<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《小狗钱钱》-读书笔记</title>
    <link href="/king/a5f840b2.html"/>
    <url>/king/a5f840b2.html</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th><strong>书名</strong></th><th>小狗钱钱</th></tr></thead><tbody><tr><td><strong>作者</strong></td><td>博多·舍费尔（Bodo Schäfer）</td></tr><tr><td><strong>状态</strong></td><td>已完成</td></tr><tr><td><strong>简介</strong></td><td>吉娅是一个普通的12岁女孩，一次偶然的机会，她救助了一只受伤的小狗，并给它取名叫“钱钱”。没想到，钱钱居然是一位深藏不露的理财高手，它改变了吉娅一家人的财富命运……</td></tr></tbody></table><h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><h1 id="书摘"><a href="#书摘" class="headerlink" title="书摘"></a>书摘</h1><p>1、大多数人并不清楚自己想要的是什么，他们只知道，自己想要得到更多的东西。你可以把自己的生活想成是一家购物公司。如果你给购物公司写信说，请给我寄一些好东西来。你肯定什么都得不到，我们的愿望也是一样。我们必须确切地知道自己心里渴望的是什么才行。</p><p>2、好奇是好的，但是绝不能让好奇阻碍你做事。太多的人做事犹豫不决，就是因为他们觉得没有完全弄懂这件事。真正付诸实践要比纯粹的思考有用多了。</p><p>3、有一只海鸥曾经说，在你展翅飞翔之前，你必须相信自己能到达目的地。你必须设想自己已经拥有了这些东西，这样你的一个小愿望才会变成一种强烈的渴望。你想象的越多，你的愿望就越强烈，那么你就会开始寻找机会实现自己的梦想。</p><p>4、在做什么事之前，你总是首先想“这事是做不成的，这样肯定不会成功”。</p><p>5、你是否能挣到钱，最关键的并不是你有没有好点子，也不是你是否聪明，而是你的自信程度。</p><p>6、商人给的建议，第一，为别人解决一个难题，那么你就能赚到许多钱；第二，把精力集中在你知道的，能做的和拥有的东西上。</p><p>所有能赚钱的事，无外乎利他，你能帮助到别人，不管是物质还是情感，能解决问题，人家才愿意付钱。你无法赚到认知之外的钱。所以要把精力放在自己擅长的的事情上。</p><p>7、他们总是有那么多紧急的事情要做，以至于没有时间来关注重要的事情。</p><p>8、遇到困难的时候，仍然要坚持自己的想法。一切正常的时候，每个人都能做到这一点。只有真正的困难出现时，才能见分晓。只有少数人能坚定不移地贯彻自己的计划。那些非常成功的人，甚至有能力在他们最困难的时候做出最杰出的表现。</p><p>9、当你决定做一件事情的时候，你必须在72小时之内完成，否则你很可能永远不会再做了。</p><p>一件事一旦被拖延，人就会产生惰性。所以任何时候都要告诉自己，3天就是极限。</p><p>10、越是把注意力放在疼痛上，我就越会觉得疼。谈论疼痛就像给植物施肥一样。所以我很多年以前就改掉了抱怨的习惯。</p><p>11、勇敢的人也会害怕，一个人虽然害怕却仍然敢于前进，这才叫勇气。</p><p>12、笨人只有一次好运，聪明人永远都有好运。</p><p>13、最珍贵的礼物是我们自己争取来的。克服了丢面子的恐惧，世界就会向你敞开大门。</p><p>14、困难，犯错误和丢面子引起的恐惧已经破坏了无数人的生活。</p><p>15、恐惧总是出现在我们设想事情会如何不顺的时候。我们对事变化的可能性想得越多，就会越害怕。而当你看着自己的成功日记时，你就会注意到那些成功的事情，自然而然也就会想到应该怎样去做。</p><p>因为这句话，我开始了每天写成功日记。希望自己少点恐惧，多点信心，即便将来害怕了，也能翻开自己的成功日记，告诉自己还是挺厉害的嘛.</p><p>16、决定一件东西价值多少的唯一因素就是，你愿意为它支付多少钱。</p><p>17就像你现在写的这本书，有一些人读过之后不会有任何改变，而另一些人读过之后开始聪明地理财，他们会拥有更幸福更富有的生活。</p><p>读书的真正目的，就是发生有效行动，最终得以改变。哪怕你只践行了书中的一个小点，对你的生活起到积极的意义，那也足够了。知行合一，人才会进步。</p><p>18、不要为失去的东西而忧伤，而要对拥有它的时光心存感激。</p><p>读到这句话时，我立马想到了《活着》中的福贵，在别人眼里他是悲痛的，因为在不断的失去。可是在他的眼里，他自己是圆满的，因为他拥有最好的妻子，儿女和女婿，哪怕他们都离开了自己。</p><p>19、不去寻找机会的人，最多不过是在走运的时候捡到天上掉下来的陷阱。</p><p>20、生活质量不是由越来越多的高科技产品堆砌而成的，而体现在一些别的方面，比如悠闲地享受一下生活，增进邻里关系，表达感情或者从事艺术性和创造性的活动。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理财</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个人最顶级的自律，是不透支自己</title>
    <link href="/king/c5aaa3db.html"/>
    <url>/king/c5aaa3db.html</url>
    
    <content type="html"><![CDATA[<p>好像，我们的人生无时无刻不在被提前透支中，譬如时间、金钱、健康……</p><p>当这些生活赋予给我们的宝藏，被一点点毫无节制地消耗完毕，你就发现，总有一天需要付出昂贵的代价。</p><p>譬如熬夜玩手机，导致皮肤变差、记忆力衰退，损坏身体健康；</p><p>周末总是宅在家里躺尸，浪费掉大把大把的时间；</p><p>花钱上瘾，一个双11下来，欠下了花呗白条各种屁股债</p><p>…</p><p>如果你想改变逆袭，想成为一个优秀的人，过上自己想要的人生。<strong>那么，这8样东西，你绝对不能透支~</strong></p><h1 id="不透支关系"><a href="#不透支关系" class="headerlink" title="不透支关系"></a>不透支关系</h1><p>最近看到这样一句话，</p><p>“永远不要把友情放在一个不可思议的高度上，有些朋友就是在一个阶段带给自己美好东西的人，互相享受尊重而不要互相捆绑。”</p><p>再好的关系，也经不起随意的透支。我把你当朋友，你却只想从我这占便宜。一次两次可以忍，毫无节制的索取，只会让好友变路人。</p><p>人与人之间讲究的是礼尚往来，只有付出没有回报的关系，注定不会长久。</p><p>所以，千万不要去太高估一段关系，去毫无底线地透支，否则最终换来的只能是一个个惨痛的教训。</p><p>你今天所有的透支，都早已暗中标好了价码。</p><p><strong>好的关系都需要边界感。</strong></p><p>无论是家人、朋友、合作伙伴，亦或是恋人都是一样的~</p><h1 id="不透支欲望"><a href="#不透支欲望" class="headerlink" title="不透支欲望"></a>不透支欲望</h1><p>现代快节奏的生活中，人们很容易会产生各种焦虑和痛苦，幸福感降低。</p><p>究其根源和本质就是欲望太多，以及随之带来的攀比心。</p><p>稻盛和夫说：</p><p>“欲望本身不是罪恶，凭借欲望无节制的为所欲为才是罪恶。”</p><p>有欲望其实是一件好事，它在一定程度上会督促你成长进步，但<strong>如果欲望太过于强大，自己压制不住，就有可能会跌进贪婪的无底洞。</strong></p><p>因此，断舍离的本质是通过“物质极简”最终走向的“精神极简”。</p><p>所以我们要尽可能追求自己能力范围内可以做到的事情~</p><h1 id="不透支运气"><a href="#不透支运气" class="headerlink" title="不透支运气"></a>不透支运气</h1><p><strong>“凭运气得来的东西，最终都会凭实力输掉。”</strong></p><p>当运气带给你超出自身实力的东西，看似是命运的馈赠。但如果你没有能力去接住它，就会变成压死骆驼最后一根稻草。</p><p>运气的本质，是你要有实力，是你应得的。如果你没有实力的话，也只是暂时放你那里，仅此而已。</p><p>有句话说：</p><p>“运气永远不可能持续一辈子，能帮助你持续一辈子的东西，只有你个人。” </p><p>不管学习、生活还是职场，能走到最后一定是始终保持进步状态，厚积薄发的人。</p><p>脚踏实地，做好准备，才可能有抓住机遇的实力和本事。</p><h1 id="不透支金钱"><a href="#不透支金钱" class="headerlink" title="不透支金钱"></a>不透支金钱</h1><p>分期付款、最低还款……</p><p>这些看起来很便捷人性化，但却是一个巨大的坑。</p><p>它不仅让你透支了明天的金钱，更是在透支着你的人生。</p><p><strong>没钱，会让你失去抵御风险的勇气，</strong>比如不敢生病、不敢失业、被巨大的债务压得喘不过气，最终生活和你都会被毁掉。</p><p>通过物品断舍离，摆脱对物质的执念，放弃不需要的东西，摆脱“买买买”带来的对金钱和精力巨大的消耗，简单生活，尽量做到“物尽其用，钱尽其责”。</p><h1 id="不透支健康"><a href="#不透支健康" class="headerlink" title="不透支健康"></a>不透支健康</h1><p>人年轻时如茨威格说：“一个人年轻的时候，总以为疾病和死神只会光顾别人。”</p><p>即使听了再多劝告，仍是我行我素地熬夜、暴饮暴食。</p><p>等到身体出现问题时，才意识到，“原来健康是最禁不起透支的。”</p><p>你是如何对待身体的，身体就会给你怎样的反馈。</p><p><strong>爱惜身体，规律作息，有节制，不纵欲，才是对未来最好的投资。</strong></p><p>只有拥有了健康，你才能去创造出更精彩的人生~</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202308232038970.jpeg" alt="图片"></p><h1 id="不透支时间"><a href="#不透支时间" class="headerlink" title="不透支时间"></a>不透支时间</h1><p><strong>废掉一个人最好的方式，就是让他瞎忙。</strong>时间是公平的，每个人只有24小时。</p><p>而你是怎么使用这24小时的，就会决定你拥有怎么样的人生。</p><p>时间总是有的。</p><p>就算我们再忙，我们也有时间做重要的事情，而当我们关注重要的事情时，我们就能拥有我们的时间，打造我们想要的生活。</p><p>集中精力在重要的时间选择做重要的事情，<strong>让自己成为时间支配者</strong>，去合理规划和利用时间，这样不仅能够提高效率，还会节省下很多时间做其他事情。</p><p>当你做好一件重要的事后，会发现其他事情也会十分顺畅</p><h1 id="不透支毅力"><a href="#不透支毅力" class="headerlink" title="不透支毅力"></a>不透支毅力</h1><p>没有目的的坚持，最后都会输得很惨。</p><p>我们都太想要得到结果了，然而这样做会导致我们不小心用力过猛，透支自己的毅力值。</p><p>就像减肥，许多人都像走捷径，企图通过节食、喝减肥等等方式燃烧脂肪，但这样做的后果，不仅效果不理想，而且还会危害你的健康。</p><p>没有谁的成功是一蹴而成的，都是需要一个持续付出与努力的过程。</p><p>好结果往往不是一蹴而就的，而是通过积累慢慢达成目标的。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202308232039840.jpeg" alt="图片"></p><h1 id="不透支期待"><a href="#不透支期待" class="headerlink" title="不透支期待"></a>不透支期待</h1><p>期待越高，失望就越大。我们总认为，我们帮过别人，他也应该帮我们，我们对一个人好，他也应该要对自己好</p><p>……</p><p>但，人心不是等级交换的，你永远也不知道自己在对方心里有几斤几两。</p><p>所以，千万不要对别人或还为发生的事情，抱有过高的期待。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202308232043011.jpg" alt="561685372529_.pic"></p><p><strong>因为一旦期待落空，那种强烈的落差感就会让人彻底寒了心。</strong></p><p>看过一句话：</p><p><strong>年轻时，你可以靠透支身体、小聪明和老天给你的运气一直取巧地活着。</strong></p><p>然而到某个年纪后，真正能让你走远的，都是自律、积极和勤奋呐~</p><blockquote><p>“当我真正开始爱自己，我睡得越来越早，也越来越喜欢锻炼。 </p><p>我不再纠结和焦虑，变得自信满满去追求有意义的人和事，并为之燃烧自己的热情。</p><p>我发现人生才真正的开始。”</p></blockquote><p>希望我们不要再透支自己了。</p><p>积蓄能量，努力成为一个更好的人吧，冲鸭！！！</p><p>注：以上内容来自“时光序”公众号</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>自律</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式事务Seata</title>
    <link href="/king/dfa7c1c2.html"/>
    <url>/king/dfa7c1c2.html</url>
    
    <content type="html"><![CDATA[<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h2><h3 id="1-创建seata-server数据表"><a href="#1-创建seata-server数据表" class="headerlink" title="1.创建seata server数据表"></a>1.创建seata server数据表</h3><p>seata server的作用之一是记录分布式事务的状态，所以需要创建数据表，需要在seata项目中找到对应的sql脚本：<a href="https://github.com/seata/seata/blob/develop/script/server/db/mysql.sql">seata/sql</a>，可以根据数据库类型来选择对应的脚本。以下是Mysql的脚本：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- -------------------------------- The script used when storeMode is &#x27;db&#x27; --------------------------------</span><span class="hljs-comment">-- the table to store GlobalSession data</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `global_table`(    `xid`                       <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,    `transaction_id`            <span class="hljs-type">BIGINT</span>,    `status`                    TINYINT      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,    `application_id`            <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),    `transaction_service_group` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),    `transaction_name`          <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>),    `timeout`                   <span class="hljs-type">INT</span>,    `begin_time`                <span class="hljs-type">BIGINT</span>,    `application_data`          <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2000</span>),    `gmt_create`                DATETIME,    `gmt_modified`              DATETIME,    <span class="hljs-keyword">PRIMARY</span> KEY (`xid`),    KEY `idx_status_gmt_modified` (`status` , `gmt_modified`),    KEY `idx_transaction_id` (`transaction_id`)) ENGINE <span class="hljs-operator">=</span> InnoDB  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8mb4;<span class="hljs-comment">-- the table to store BranchSession data</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `branch_table`(    `branch_id`         <span class="hljs-type">BIGINT</span>       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,    `xid`               <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,    `transaction_id`    <span class="hljs-type">BIGINT</span>,    `resource_group_id` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),    `resource_id`       <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">256</span>),    `branch_type`       <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">8</span>),    `status`            TINYINT,    `client_id`         <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>),    `application_data`  <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2000</span>),    `gmt_create`        DATETIME(<span class="hljs-number">6</span>),    `gmt_modified`      DATETIME(<span class="hljs-number">6</span>),    <span class="hljs-keyword">PRIMARY</span> KEY (`branch_id`),    KEY `idx_xid` (`xid`)) ENGINE <span class="hljs-operator">=</span> InnoDB  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8mb4;<span class="hljs-comment">-- the table to store lock data</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `lock_table`(    `row_key`        <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,    `xid`            <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>),    `transaction_id` <span class="hljs-type">BIGINT</span>,    `branch_id`      <span class="hljs-type">BIGINT</span>       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,    `resource_id`    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">256</span>),    `table_name`     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),    `pk`             <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">36</span>),    `status`         TINYINT      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;0:locked ,1:rollbacking&#x27;</span>,    `gmt_create`     DATETIME,    `gmt_modified`   DATETIME,    <span class="hljs-keyword">PRIMARY</span> KEY (`row_key`),    KEY `idx_status` (`status`),    KEY `idx_branch_id` (`branch_id`),    KEY `idx_xid` (`xid`)) ENGINE <span class="hljs-operator">=</span> InnoDB  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8mb4;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `distributed_lock`(    `lock_key`       <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,    `lock_value`     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,    `expire`         <span class="hljs-type">BIGINT</span>,    <span class="hljs-keyword">primary</span> key (`lock_key`)) ENGINE <span class="hljs-operator">=</span> InnoDB  <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8mb4;<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;AsyncCommitting&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0</span>);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;RetryCommitting&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0</span>);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;RetryRollbacking&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0</span>);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;TxTimeoutCheck&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0</span>);</code></pre></div><h2 id="2-配置seata-server-配置文件"><a href="#2-配置seata-server-配置文件" class="headerlink" title="2.配置seata server 配置文件"></a>2.配置seata server 配置文件</h2><blockquote><p>注意：现在seata server1.5.2版本的配置文件和之前版本不一样了，之前使用的是<code>registry.conf</code>，现在1.5.2版本改用<code>application.yml</code>了。</p><p>如果没有配置application.yml或者没有读取到配置，那么seata server将启动失败，日志中显示一直链接127.0.0.1的目标数据库失败。</p></blockquote><p>【技巧】为了获取seata server1.5.2的配置文件，需要先启动一个seata server1.5.2的服务，然后再从启动的容器实例中把默认的配置文件复制出来，再进行修改。ps:虽然麻烦但是省事，不需要到处去找配置文件</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.1&quot;</span><span class="hljs-attr">services:</span>  <span class="hljs-attr">seata-server:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">seataio/seata-server:1.5.2</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;7091:7091&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8091:8091&quot;</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">STORE_MODE=db</span>      <span class="hljs-comment"># 以SEATA_IP作为host注册seata server</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">SEATA_IP=172.29.70.185</span>  <span class="hljs-comment">#设置内网服务器部署ip</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">SEATA_PORT=8091</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime&quot;</span>        <span class="hljs-comment">#设置系统时区</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/usr/share/zoneinfo/Asia/Shanghai:/etc/timezone&quot;</span>  <span class="hljs-comment">#设置时区</span>     <span class="hljs-comment"># - &quot;./seata-server/resources:/seata-server/resources&quot;</span></code></pre></div><p>先通过<code>docker-compose up -d seata-server</code>命令启动实例</p><p>通过<code>docker ps</code>查看运行起来的实例，找到seata-server的容器id</p><p>通过<code>docker cp 容器id:/seata-server/resources [宿主机目标路径]</code>命令，把容器中的资源文件全部拷贝到指定的宿主机目标路径下。</p><h2 id="3-配置nacos注册中心和配置中心"><a href="#3-配置nacos注册中心和配置中心" class="headerlink" title="3.配置nacos注册中心和配置中心"></a>3.配置nacos注册中心和配置中心</h2><p>从拷贝出来的资源文件找到 application.yml文件，根据实际情况修改</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">7091</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">seata-server</span><span class="hljs-attr">logging:</span>  <span class="hljs-attr">config:</span> <span class="hljs-string">classpath:logback-spring.xml</span>  <span class="hljs-attr">file:</span>    <span class="hljs-attr">path:</span> <span class="hljs-string">$&#123;user.home&#125;/logs/seata</span>  <span class="hljs-attr">extend:</span>    <span class="hljs-attr">logstash-appender:</span>      <span class="hljs-attr">destination:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:4560</span>    <span class="hljs-attr">kafka-appender:</span>      <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:9092</span>      <span class="hljs-attr">topic:</span> <span class="hljs-string">logback_to_logstash</span><span class="hljs-attr">console:</span>  <span class="hljs-attr">user:</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">seata</span>    <span class="hljs-attr">password:</span> <span class="hljs-string">seata</span><span class="hljs-attr">seata:</span>  <span class="hljs-attr">config:</span>    <span class="hljs-comment"># support: nacos, consul, apollo, zk, etcd3</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">nacos</span>    <span class="hljs-attr">nacos:</span>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">nacos_ip:nacos_port</span>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">seata-server</span>      <span class="hljs-attr">group:</span> <span class="hljs-string">DEFAULT_GROUP</span>      <span class="hljs-attr">usernam:</span> <span class="hljs-string">nacos</span>      <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span>      <span class="hljs-attr">data-id:</span> <span class="hljs-string">seataServer.properties</span>  <span class="hljs-attr">registry:</span>    <span class="hljs-comment"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span>    <span class="hljs-comment"># 这里使用nacos配</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">nacos</span>    <span class="hljs-attr">nacos:</span>      <span class="hljs-attr">application:</span> <span class="hljs-string">seata-server</span>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">nacos_ip:nacos_port</span>      <span class="hljs-attr">group:</span> <span class="hljs-string">SEATA_GROUP</span>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">seata-server</span>      <span class="hljs-comment"># tc集群名称</span>      <span class="hljs-attr">cluster:</span> <span class="hljs-string">DEFAULT_GROUP</span>      <span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span>      <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><span class="hljs-comment">#  store:</span>    <span class="hljs-comment"># support: file 、 db 、 redis</span><span class="hljs-comment">#    mode: file</span><span class="hljs-comment">#  server:</span><span class="hljs-comment">#    service-port: 8091 #If not configured, the default is &#x27;$&#123;server.port&#125; + 1000&#x27;</span>  <span class="hljs-attr">security:</span>    <span class="hljs-attr">secretKey:</span> <span class="hljs-string">SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span>    <span class="hljs-attr">tokenValidityInMilliseconds:</span> <span class="hljs-number">1800000</span>    <span class="hljs-attr">ignore:</span>      <span class="hljs-attr">urls:</span> <span class="hljs-string">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/api/v1/auth/login</span></code></pre></div><h2 id="seata-server-propertise"><a href="#seata-server-propertise" class="headerlink" title="seata-server.propertise"></a>seata-server.propertise</h2><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">store.mode</span>=<span class="hljs-string">db</span><span class="hljs-comment">#-----db-----</span><span class="hljs-attr">store.db.datasource</span>=<span class="hljs-string">druid</span><span class="hljs-attr">store.db.dbType</span>=<span class="hljs-string">mysql</span><span class="hljs-attr">store.db.driverClassName</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-attr">store.db.url</span>=<span class="hljs-string">jdbc:mysql://sit3.kq120.com:3306/public_database?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8&amp;useAffectedRows=true&amp;allowMultiQueries=true&amp;useSSL=false</span><span class="hljs-attr">store.db.user</span>=<span class="hljs-string">qsyy</span><span class="hljs-attr">store.db.password</span>=<span class="hljs-string">ad1988b52e3c8cee</span><span class="hljs-comment"># 数据库初始连接数</span><span class="hljs-attr">store.db.minConn</span>=<span class="hljs-string">1</span><span class="hljs-comment"># 数据库最大连接数</span><span class="hljs-attr">store.db.maxConn</span>=<span class="hljs-string">20</span><span class="hljs-comment"># 获取连接时最大等待时间 默认5000，单位毫秒</span><span class="hljs-attr">store.db.maxWait</span>=<span class="hljs-string">5000</span><span class="hljs-comment"># 全局事务表名 默认global_table</span><span class="hljs-attr">store.db.globalTable</span>=<span class="hljs-string">global_table</span><span class="hljs-comment"># 分支事务表名 默认branch_table</span><span class="hljs-attr">store.db.branchTable</span>=<span class="hljs-string">branch_table</span><span class="hljs-comment"># 全局锁表名 默认lock_table</span><span class="hljs-attr">store.db.lockTable</span>=<span class="hljs-string">lock_table</span><span class="hljs-comment"># 查询全局事务一次的最大条数 默认100</span><span class="hljs-attr">store.db.queryLimit</span>=<span class="hljs-string">100</span><span class="hljs-comment"></span><span class="hljs-comment"># undo保留天数 默认7天,log_status=1（附录3）和未正常清理的undo</span><span class="hljs-attr">server.undo.logSaveDays</span>=<span class="hljs-string">7</span><span class="hljs-comment"># undo清理线程间隔时间 默认86400000，单位毫秒</span><span class="hljs-attr">server.undo.logDeletePeriod</span>=<span class="hljs-string">86400000</span><span class="hljs-comment"># 二阶段提交重试超时时长 单位ms,s,m,h,d,对应毫秒,秒,分,小时,天,默认毫秒。默认值-1表示无限重试</span><span class="hljs-comment"># 公式: timeout&gt;=now-globalTransactionBeginTime,true表示超时则不再重试</span><span class="hljs-comment"># 注: 达到超时时间后将不会做任何重试,有数据不一致风险,除非业务自行可校准数据,否者慎用</span><span class="hljs-attr">server.maxCommitRetryTimeout</span>=<span class="hljs-string">-1</span><span class="hljs-comment"># 二阶段回滚重试超时时长</span><span class="hljs-attr">server.maxRollbackRetryTimeout</span>=<span class="hljs-string">-1</span><span class="hljs-comment"># 二阶段提交未完成状态全局事务重试提交线程间隔时间 默认1000，单位毫秒</span><span class="hljs-attr">server.recovery.committingRetryPeriod</span>=<span class="hljs-string">1000</span><span class="hljs-comment"># 二阶段异步提交状态重试提交线程间隔时间 默认1000，单位毫秒</span><span class="hljs-attr">server.recovery.asynCommittingRetryPeriod</span>=<span class="hljs-string">1000</span><span class="hljs-comment"># 二阶段回滚状态重试回滚线程间隔时间  默认1000，单位毫秒</span><span class="hljs-attr">server.recovery.rollbackingRetryPeriod</span>=<span class="hljs-string">1000</span><span class="hljs-comment"># 超时状态检测重试线程间隔时间 默认1000，单位毫秒，检测出超时将全局事务置入回滚会话管理器</span><span class="hljs-attr">server.recovery.timeoutRetryPeriod</span>=<span class="hljs-string">1000</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>事务</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小白存钱指南</title>
    <link href="/king/694306b6.html"/>
    <url>/king/694306b6.html</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理财</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>焦虑的内耗</title>
    <link href="/king/67102d37.html"/>
    <url>/king/67102d37.html</url>
    
    <content type="html"><![CDATA[<p>原本以为生活已经乱糟糟的了，没想到工作一直也乱糟糟的。</p><p>每天都想辞职，该怎么办。</p><p>怎么今天才周一</p><p>这需求是人能想到的吗</p><p>是谁写的这么糟糕的代码</p><p>不想上班，只想躺平</p><p>时间怎么又不够啦</p><p>还没到月底怎么就没钱啦</p><p>你怎么又不回我消息呢</p><p>活着到底是因为什么呢</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Transactional注解详解</title>
    <link href="/king/e3ca066d.html"/>
    <url>/king/e3ca066d.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>@Transactional注解可以作用于接口、接口方法、类以及类方法上 1. 当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性 2. 当作用在方法级别时会覆盖类级别的定义 3. 当作用在接口和接口方法时则只有在使用基于接口的代理时它才会生效，也就是JDK动态代理，而不是Cglib代理 4. 当在 protected、private 或者默认可见性的方法上使用 @Transactional 注解时是不会生效的，也不会抛出任何异常 5. 默认情况下，只有来自外部的方法调用才会被AOP代理捕获，也就是，类内部方法调用本类内部的其他方法并不会引起事务行为，即使被调用方法使用@Transactional注解进行修饰</p></blockquote><h2 id="Transactional作用范围"><a href="#Transactional作用范围" class="headerlink" title="@Transactional作用范围"></a>@Transactional作用范围</h2><p>@Transactional 可以作用在接、类、类方法。</p><ul><li><strong>作用于类</strong>：当把@Transactional 注解放在类上时，表示所有该类的<code>public</code>方法都配置相同的事务属性信息。</li><li><strong>作用于方法</strong>：当类配置了@Transactional，方法也配置了@Transactional，方法的事务会覆盖类的事务配置信息。</li><li><strong>作用于接口</strong>：不推荐这种使用方法，因为一旦标注在Interface上并且配置了Spring AOP 使用CGLib动态代理，将会导致@Transactional注解失效</li></ul><h2 id="Transactional注解的可用属性"><a href="#Transactional注解的可用属性" class="headerlink" title="@Transactional注解的可用属性"></a>@Transactional注解的可用属性</h2><h3 id="1-readOnly"><a href="#1-readOnly" class="headerlink" title="1.readOnly"></a>1.readOnly</h3><p>该属性用于设置当前事务是否为只读事务，设置为true表示只读，false则表示可读写，默认值为false</p><h3 id="2-rollbackFor"><a href="#2-rollbackFor" class="headerlink" title="2.rollbackFor"></a>2.rollbackFor</h3><p>该属性用于设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚。例如： 1. 指定单一异常类：@Transactional(rollbackFor=RuntimeException.class) 2. 指定多个异常类：@Transactional(rollbackFor={RuntimeException.class, BusnessException.class})</p><h3 id="3-rollbackForClassName"><a href="#3-rollbackForClassName" class="headerlink" title="3.rollbackForClassName"></a>3.rollbackForClassName</h3><p>该属性用于设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。例如： 1. 指定单一异常类名称：@Transactional(rollbackForClassName=“RuntimeException”) 2. 指定多个异常类名称：@Transactional(rollbackForClassName={“RuntimeException”,“BusnessException”})</p><h3 id="4-noRollbackFor"><a href="#4-noRollbackFor" class="headerlink" title="4.noRollbackFor"></a>4.noRollbackFor</h3><p>该属性用于设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚</p><h3 id="5-noRollbackForClassName"><a href="#5-noRollbackForClassName" class="headerlink" title="5.noRollbackForClassName"></a>5.noRollbackForClassName</h3><p>抛出指定的异常类型，不回滚事务，也可以指定多个异常类型。</p><h3 id="6-timeout"><a href="#6-timeout" class="headerlink" title="6.timeout"></a>6.timeout</h3><p>该属性用于设置事务的超时秒数，默认值为-1表示永不超时</p><h3 id="7-propagation"><a href="#7-propagation" class="headerlink" title="7.propagation"></a>7.propagation</h3><p>该属性用于设置事务的传播行为 。默认值为：@Transactional(propagation=Propagation.REQUIRED)</p><ul><li>@Transactional(propagation=Propagation.REQUIRED) 如果当前存在事务，则加入该事务，如果当前不存在事务，则创建一个新的事务(默认)。( 也就是说如果A方法和B方法都添加了注解，在默认传播模式下，A方法内部调用B方法，会把两个方法的事务合并为一个事务 ）</li><li>@Transactional(propagation=Propagation.NOT_SUPPORTED) :容器不为这个方法开启事务,以非事务的方式运行，如果当前存在事务，暂停当前的事务。</li><li>@Transactional(propagation=Propagation.REQUIRES_NEW) 不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务.<strong>(</strong> 当类A中的 a 方法用默认<code>Propagation.REQUIRED</code>模式，类B中的 b方法加上采用 <code>Propagation.REQUIRES_NEW</code>模式，然后在 a 方法中调用 b方法操作<a href="https://auth.huaweicloud.com/authui/saml/login?xAccountType=csdndev_IDP&isFirstLogin=false&service=https://activity.huaweicloud.com/dbs_Promotion/index.html?utm_source=hwc-csdn&utm_medium=share-op&utm_campaign=&utm_content=&utm_term=&utm_adplace=AdPlace070851">数据库</a>，然而 a方法抛出异常后，b方法并没有进行回滚，因为<code>Propagation.REQUIRES_NEW</code>会暂停 a方法的事务 <strong>)</strong></li><li>@Transactional(propagation=Propagation.MANDATORY) 必须在一个已有的事务中执行,否则抛出异常</li><li>@Transactional(propagation=Propagation.NEVER) 必须在一个没有的事务中执行,否则抛出异常(与Propagation.MANDATORY相反)</li><li>@Transactional(propagation=Propagation.SUPPORTS) 如果其他bean调用这个方法,在其他bean中声明事务,那就用事务.如果其他bean没有声明事务,那就不用事务</li></ul><p>@Transactional(propagation=Propagation.NESTED) ：和 Propagation.REQUIRED 效果一样。</p><h3 id="8-isolation属性"><a href="#8-isolation属性" class="headerlink" title="8.isolation属性"></a>8.isolation属性</h3><p><code>isolation</code> ：事务的隔离级别，默认值为 <code>Isolation.DEFAULT</code>。</p><ul><li>Isolation.DEFAULT：使用底层数据库默认的隔离级别。</li><li>Isolation.READ_UNCOMMITTED</li><li>Isolation.READ_COMMITTED</li><li>Isolation.REPEATABLE_READ</li><li>Isolation.SERIALIZABLE</li></ul><p>事务隔离级别介绍:</p><ul><li>@Transactional(isolation = Isolation.READ_UNCOMMITTED)读取未提交数据(会出现脏读, 不可重复读) 基本不使用</li><li>@Transactional(isolation = Isolation.READ_COMMITTED)读取已提交数据(会出现不可重复读和幻读)</li><li>@Transactional(isolation = Isolation.REPEATABLE_READ)可重复读(会出现幻读)</li><li>@Transactional(isolation = Isolation.SERIALIZABLE)串行化</li><li>什么是脏读、幻读、不可重复读？</li></ul><blockquote><p>脏读 : 一个事务读取到另一事务未提交的更新数据<br>不可重复读 : 在同一事务中, 多次读取同一数据返回的结果有所不同, 换句话说, 后续读取可以读到另一事务已提交的更新数据. 相反, “可重复读”在同一事务中多次读取数据时, 能够保证所读数据一样, 也就是后续读取不能读到另一事务已提交的更新数据<br>幻读 : 一个事务读到另一个事务已提交的insert数据<br>其中MySQL默认使用的隔离级别为REPEATABLE_READ、Oracle的为READ_COMMITTED</p></blockquote><h1 id="Spring事务失效场景"><a href="#Spring事务失效场景" class="headerlink" title="Spring事务失效场景"></a>Spring事务失效场景</h1><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E5%9C%BA%E6%99%AF.png" alt="事务失效场景"></p><h2 id="1-service类未被Spring管理"><a href="#1-service类未被Spring管理" class="headerlink" title="1.service类未被Spring管理"></a>1.service类未被Spring管理</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//@Service （注释了@Service）</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserMapper UserMapper;         <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserFlowMapper UserFlowMapper;    <span class="hljs-meta">@Transactional</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User User)</span> &#123;        <span class="hljs-comment">//保存User实体数据库记录</span>        UserMapper.save(User);        <span class="hljs-comment">//保存User数据库记录</span>        UserFlowMapper.saveFlow(buildFlowByUser(User));    &#125;&#125;</code></pre></div><ul><li><strong>事务不生效的原因</strong> ：上面例子中， <code>@Service</code>注解注释之后，<code>spring</code>事务（<code>@Transactional</code>）没有生效，因为<code>Spring</code>事务是由<code>AOP</code>机制实现的，也就是说从<code>Spring IOC</code>容器获取<code>bean</code>时，<code>Spring</code>会为目标类创建代理，来支持事务的。但是<code>@Service</code>被注释后，你的<code>service</code>类都不是<code>spring</code>管理的，<strong>那怎么创建代理类来支持事务呢</strong> 。</li><li><strong>解决方案</strong> ：加上<code>@Service</code>注解。</li></ul><h2 id="2-没有在Spring配置文件中启用事务管理器"><a href="#2-没有在Spring配置文件中启用事务管理器" class="headerlink" title="2.没有在Spring配置文件中启用事务管理器"></a>2.没有在Spring配置文件中启用事务管理器</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span> &#123;    <span class="hljs-comment">// 没有配置事务管理器</span>&#125;<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;    <span class="hljs-meta">@Transactional</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><ul><li><strong>事务不生效的原因</strong> ：没有在<code>AppConfig</code>中配置事务管理器，因此<code>Spring</code>无法创建事务代理对象，导致事务不生效。即使在<code>MyService</code>中添加了<code>@Transactional</code>注解，该方法也不会被<code>Spring</code>管理的事务代理拦截。</li><li><strong>解决方案</strong> ：为了解决这个问题，应该在<code>AppConfig</code>中配置一个事务管器。例如：</li></ul><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">PlatformTransactionManager</span> <span class="hljs-title function_">transactionManager</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>(<span class="hljs-title function_">dataSource</span>());    &#125;&#125;<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;    <span class="hljs-meta">@Transactional</span>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">doSomething</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><blockquote><p>如果是<code>Spring Boot</code>项目，它默认会自动配置事务管理器并开启事务支持。</p></blockquote><h2 id="3-事务方法被final、static关键字修饰"><a href="#3-事务方法被final、static关键字修饰" class="headerlink" title="3. 事务方法被final、static关键字修饰"></a>3. 事务方法被final、static关键字修饰</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span>  &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserMapper UserMapper;        <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserFlowMapper UserFlowMapper;    <span class="hljs-meta">@Transactional</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User User)</span> &#123;         <span class="hljs-comment">//保存User实体数据库记录</span>        UserMapper.save(User);        <span class="hljs-comment">//保存User流水数据库记录</span>        UserFlowMapper.saveFlow(buildFlowByUser(User));    &#125;&#125;</code></pre></div><ul><li><strong>事务不生效的原因</strong> ：如果一个方法被声明为<code>final</code>或者<code>static</code>，则该方法不能被子类重写，也就是说无法在该方法上进行动态代理，这会导致<code>Spring</code>无法生成事务代理对象来管理事务。</li><li><strong>解决方案</strong> ：<code>addUser</code><strong>事务方法</strong> 不要用<code>final</code>修饰或者<code>static</code>修饰。</li></ul><h2 id="4-同一个类中，方法内部调用"><a href="#4-同一个类中，方法内部调用" class="headerlink" title="4. 同一个类中，方法内部调用"></a>4. 同一个类中，方法内部调用</h2><div class="code-wrapper"><pre><code class="hljs java">Service<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserMapper UserMapper;        <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserFlowMapper UserFlowMapper;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User User)</span>&#123;     <span class="hljs-comment">// 调用内部的事务方法</span>     <span class="hljs-built_in">this</span>.executeAddUser(User);   &#125;    <span class="hljs-meta">@Transactional</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeAddUser</span><span class="hljs-params">(User User)</span> &#123;        UserMapper.save(User);        UserFlowMapper.saveFlow(buildFlowByUser(User));    &#125;&#125;</code></pre></div><ul><li><strong>事务不生效的原因</strong> : 事务是通过<code>Spring AOP</code>代理来实现的，而在同一个类中，一个方法调用另一个方法时，<strong>调用方法直接调用目标方法的代码，而不是通过代理类进行调用</strong> 。即以上代码，调用目标<code>executeAddUser</code>方法不是通过代理类进行的，因此事务不生效。</li><li><strong>解决方案</strong> ：可以新建多一个类，让这两个方法分开，分别在不同的类中。如下：</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserExecuteServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserExecuteService</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserMapper UserMapper;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserFlowMapper UserFlowMapper;        <span class="hljs-meta">@Transactional</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeAddUser</span><span class="hljs-params">(User User)</span> &#123;        UserMapper.save(User);        UserFlowMapper.saveFlow(buildFlowByUser(User));    &#125;&#125;<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAddServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserAddService</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserExecuteService UserExecuteService;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>&#123;     UserExecuteService.executeAddUser(user);   &#125;&#125;</code></pre></div><p>当然，有时候你也可以在该<code> Service</code> 类中注入自己，或者通过<code>AopContext.currentProxy()</code>获取代理对象。</p><h2 id="5-方法的访问权限不是public"><a href="#5-方法的访问权限不是public" class="headerlink" title="5.方法的访问权限不是public"></a>5.方法的访问权限不是public</h2><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-title class_">UserMapper</span>;        <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">UserFlowMapper</span> <span class="hljs-title class_">UserFlowMapper</span>;    <span class="hljs-meta">@Transactional</span>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">addUser</span>(<span class="hljs-params">User User</span>) &#123;        <span class="hljs-title class_">UserMapper</span>.<span class="hljs-title function_">save</span>(<span class="hljs-title class_">User</span>);        <span class="hljs-title class_">UserFlowMapper</span>.<span class="hljs-title function_">saveFlow</span>(<span class="hljs-title function_">buildFlowByUser</span>(<span class="hljs-title class_">User</span>));    &#125;&#125;</code></pre></div><ul><li><strong>事务不生效的原因</strong> ：<code>spring</code>事务方法<code>addUser</code>的访问权限不是<code>public</code>，所以事务就不生效啦，因为<code>Spring</code>事务是由<code>AOP</code>机制实现的，<code>AOP</code>机制的本质就是动态代理，而代理的事务方法不是<code>public</code>的话，<code>computeTransactionAttribute()</code>就会返回null，也就是这时事务属性不存在了。大家可以看下<code>AbstractFallbackTransactionAttributeSource</code>的源码：</li></ul><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://huaweicloud.csdn.net/633550acd3efff3090b540c0.html?spm=1001.2101.3001.6650.17&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-17-117747798-blog-125363961.235%5Ev38%5Epc_relevant_default_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-17-117747798-blog-125363961.235%5Ev38%5Epc_relevant_default_base3&utm_relevant_index=23">1</a></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如果你最近有点不开心，请点开这篇</title>
    <link href="/king/a2d6429f.html"/>
    <url>/king/a2d6429f.html</url>
    
    <content type="html"><![CDATA[<p>生活中的每个人都可能隐藏着内心的痛苦和困扰。</p><p><font color="#9e9e9e">“最近有点丧，做什么都提不起劲”</font><br><font color="#9e9e9e">“什么都没做好，真是失败“</font><br><font color="#9e9e9e">“感受不到生活中的幸福，不开心，也不快乐”</font></p><p>如果你最近不太开心，希望这篇文章能帮助你赶走一点点坏情绪。</p><h2 id="为什么总是不开心？"><a href="#为什么总是不开心？" class="headerlink" title="为什么总是不开心？"></a>为什么总是不开心？</h2><p>有没有发现，人越长大对快乐的感知力也越来越差？</p><p>每天要忙着工作，忙着赚钱，被生存这座大山压得喘不过气来，根本就无暇顾及身边美好的人和事。</p><p>我们如此努力的目的，是为了收获幸福。但最终结果却导致我们变得越来越不快乐了。</p><p><strong>为什么我们总是不快乐？</strong></p><p>有人说挑剔的人不快乐，是因为凡事都斤斤计较；</p><p>心软的人不快乐，是因为总是优先考虑别人，委屈自己；</p><p>内耗的人不快乐，是因为总是为还没有发生的事情焦虑，或者总是为已经发生的事情而后悔；</p><p>工作不开心的人，总是责任心过剩；不想上班也没有不上班的底气；</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202307231609961.jpeg" alt="图源电影《丈夫得了抑郁症》"></p><p>越长越大越难感到快乐，是因为长大后知道的事情变多了，想要的东西也变得多了，欲望也就变大了；</p><p>还有的不开心是因为注意力总是放在自己没有的东西上，而且总是拿自己没有的东西跟别人有的去比，还特别在意那些负面评价；</p><p>被完美主义束缚，又怎么能开心起来呢？</p><h2 id="开几个可能有效的药方"><a href="#开几个可能有效的药方" class="headerlink" title="开几个可能有效的药方"></a>开几个可能有效的药方</h2><p><strong>1、注意力转移</strong></p><p>窦文涛在《圆桌派》里提到过：</p><p><font color="#9e9e9e">”我们很多的不快乐，是因为想要如意。</font></p><p><font color="#9e9e9e">事情必须按照自己想象的发展，差一分都不行，</font></p><p><font color="#9e9e9e">所以在生活中处处都是不满意，因为多少都会差一点。</font></p><p><font color="#9e9e9e">强迫症有一个特点叫无限放大小概率事件，</font></p><p><font color="#9e9e9e">也就是杞人忧天。</font></p><p><font color="#9e9e9e">老琢磨自己这点情绪问题，那没有出路。</font></p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202307231610145.jpeg" alt="202307231610145"></p><p><strong>而快乐之道是注意力向外，相当于把自己的心放大了，</strong></p><p><strong>世界都在自己心里，不快乐好像消失了</strong>“</p><p>遇到不开心的事情，烦躁生气的事情不妨<strong>先睡一觉</strong>，或者做点别的事<strong>转移注意力</strong>，</p><p>完了你再回头来看当初让你情绪滋生的事情，往往都没有那么泰山压顶了，甚至会<strong>直接忘记</strong>。</p><p><strong>2、不必过度为人提供情绪价值</strong></p><p>维持情绪稳定的第一要义，就是把自己放在第一位做选择。</p><p>“对内满足自己”，而不是“向外满足他人”。</p><p>你快乐才能带给别人快乐，你自己心态好了，就更能情绪稳定地处理一切。</p><p>可以理解别人的处境，边界感很重要，<strong>让别人开心不是你的责任。</strong></p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202307231610013.jpeg" alt="202307231610013"></p><h2 id="3、记录下那些让你感到开心的小事"><a href="#3、记录下那些让你感到开心的小事" class="headerlink" title="3、记录下那些让你感到开心的小事"></a><strong>3、记录下那些让你感到开心的小事</strong></h2><p>积极心理学认为，人类进化使我们更容易记住失败而不是成功，所以大脑天生就倾向于关注负面事件和经历，而不是积极的事情。</p><p>事实上，生活中有许多人人都喜爱的，简单而随处可见的快乐，只是我们很少谈论这些快乐，比如下班路上看到很美的落日；</p><p>你在超市排队结账的时候更好碰上新开了一条新的付款通道，本来你排在最后一个，现在你排第一了。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202307231610086.jpeg" alt="202307231610086"></p><p>试着观察这些生活中值得开心的小事，有空就把它记录下来。</p><p>下班路上偶遇一场黄昏，夕阳洒落在街道上，金光闪闪的，也是一种幸福；</p><p>认真整理房间，买一束鲜花，阅读一本好书，把日子过得活色生香……</p><p>生活很苦，但请不要丧失感知幸福的能力。</p><p><strong>4、允许一切发生</strong></p><p>允许自己失败，允许自己怀疑。</p><p>允许自己脆弱，允许自己改变主意，允许自己不开心。</p><p>允许自己不完美。不要因为自己把生活弄得一团糟而自责。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202307231611486.png" alt="图片"></p><blockquote><p>请记住以下5点：</p><p>1、即使被讨厌也不要在意，100％不可能被任何人所喜欢 </p><p>2、痛苦的时候可以逃跑，堂堂正正地逃走 </p><p>3、不要与不好的人打交道 </p><p>4、可以偶尔放弃</p><p>5、即使我担心也无法解决，所以睡觉</p></blockquote><p>人生总有高峰和低谷，有时候可能什么也没发生就陷入了无由来的低落和难过里。</p><p>但其实负面情绪也没那么可怕，沮丧的时候就去找一些让自己开心的事情做做，或者跟朋友见见面什么的。</p><p>重要的是，不要害怕，也不要因此就一蹶不振。</p><p>反而要学会告诉自己每一个人都会有状态不好的阶段，所以没什么好怕的，往前走就好了。</p><h2 id="不开心时可以马上做的10件小事"><a href="#不开心时可以马上做的10件小事" class="headerlink" title="不开心时可以马上做的10件小事"></a><strong>不开心时可以马上做的10件小事</strong></h2><p>当你发觉自己情绪低迷时，不要放任自己沉溺在低落情绪里，让自己跳脱出来。</p><p>下次不开心的时候就去做这10件小事吧，希望它能带给你力量～</p><p><strong>1、睡觉</strong></p><p>洗个热水澡冲刷掉心中的烦躁和不开心。然后关掉手机，好好睡一觉。人生中的许多事，有时是在睡着时解决的。</p><p><strong>2、断舍离</strong></p><p>扔掉闲置和乱七八糟再也不会用的东西，看到房间慢慢回归秩序，变的干净整洁，整个人都能焕然一新，有种重新收获轻松的感觉。当你整理好了物品，也就整理好了自己的心。</p><p><strong>3、运动暴汗</strong></p><p>充分享受大汗淋漓带给你的快乐。</p><p><strong>4、记录</strong></p><p>写下你今天的烦恼，当你一件件地写下来，不安的心也就一个个地落了地。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202307231613908.jpeg" alt="202307231613908"></p><p><strong>6、晒太阳</strong></p><p>心情不好的时候出去晒太阳，躺着草地上，阳光照在自己身上，沐浴阳光。</p><p>但是现在酷暑，可以试试做好防晒措施，用15分钟晒晒背。7、去亲近大自然</p><p><strong>7、去感受大自然</strong></p><p>这是我从一个博主那里学来的生活小技巧。</p><p>“人必须要待在没有天花板的地方”，千万不要把自己困在房间。</p><p>去感受黄昏，去看落日和晚风，体会自然的纯粹与美好。</p><p><strong>8、看搞笑的视频或者段子</strong></p><p>分享几个我最近收藏的：</p><blockquote><p>你家真穷，我说去你家玩，你说没门。 </p><p>我告诉你，人被逼疯了什么都做的出来，除了数学题。 </p><p>朋友圈最近好安静，也没人emo了，怎么了，都过上好日子了？ </p><p>我将玫瑰藏于身后，花店老板说，拿出来这里有监控。</p></blockquote><p><strong>9、美食的治愈力！</strong></p><p>没有什么是吃一顿好吃的不能解决的，如果不行，就两顿。</p><p><strong>10、</strong>捕捉细微的幸福感</p><p>高敏感人的五官比一般人更灵敏，更容易察觉细微生活中的幸福感。</p><p>休息的时候好好利用这样的天赋，多把注意力放在这些美好的事情上，大脑就没有空去想那些不开心的事了。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202307231614388.png" alt="202307231614388"></p><p>人要去努力学会捕捉生活里每一件小事带来的幸福感，才能够打败这个世界上数不尽的无奈和痛苦。</p><p>别被负能量所裹挟，更不要对自己太苛刻。</p><p>希望大家每天都能很开心！</p><p>很顺利！很幸福！</p><p>❤️❤️❤️</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>快乐</tag>
      
      <tag>治愈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>所谓的边界感</title>
    <link href="/king/dd0e30da.html"/>
    <url>/king/dd0e30da.html</url>
    
    <content type="html"><![CDATA[<ol><li><p>自我边界感：指个人对自己的感受、需求和价值的认知和保护。自我边界感强的人更容易识别自己的感受和需求，并有能力表达和维护自己的权益。</p></li><li><p>人际边界感：指个人在与他人互动时识别和尊重彼此的边界。这包括对他人的感受和需求的敏感性，以及在与他人交往时合适地表达自己的期望和界限。</p></li><li><p>空间边界感：指对个人私人空间的需求和保护。每个人对个人空间的需求有所不同，有些人可能需要更多的私人空间和独处时间，而有些人则更喜欢与他人共享空间。</p></li><li><p>情感边界感：指个人对自己和他人之间情感交流的感知和管理能力。这包括个人对情感的辨识能力、情感的表达和接受能力，以及在情感互动中保持适当距离和平衡的能力。</p><p>边界感的强弱会对个人的心理健康和人际关系产生影响。边界感太强可能导致与他人保持过度距离、孤立感和难以建立亲密关系；而边界感过弱可能导致对他人的需求和感受缺乏敏感，容易被他人侵犯。</p><p>建立健康的边界感需要不断的自我反思和学习，可以通过与他人的沟通和边界的实践来提高。此外，寻求心理咨询或支持也是探索和发展边界感的有效途径。</p></li></ol><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202307082251885.gif" class="img-center"/><center>远离那些没有边界感的人，因为它们只能和稀泥。</center>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>边界感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常用命令</title>
    <link href="/king/caff8000.html"/>
    <url>/king/caff8000.html</url>
    
    <content type="html"><![CDATA[<h3 id="查看分支是由谁创建的"><a href="#查看分支是由谁创建的" class="headerlink" title="查看分支是由谁创建的"></a>查看分支是由谁创建的</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看线上分支是由何人创建</span>git log --oneline master | cut -d &quot; &quot; -f 1 | tail -1 | xargs git log<span class="hljs-meta prompt_"># </span><span class="language-bash">查看所有分支是由谁创建</span>git for-each-ref --format=&#x27;%(committerdate) %09 %(authorname) %09 %(refname)&#x27; | sort -k5n -k2M -k3n -k4n</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GIT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>永远拥有音乐自由和月亮</title>
    <link href="/king/c280e12f.html"/>
    <url>/king/c280e12f.html</url>
    
    <content type="html"><![CDATA[<p>明日连载–先碎觉  (¦3[▓▓] 晚安</p><p>写于:2023年7月8日     胡言乱语</p><p>或许在一直被灌输正确答案的土地待太久了，似乎忘记了该怎么思考。昨日过眼云烟，时间好似被加快了速度，眼睛睁开就要闭上，看不清你在哪里，等我找到你，必定答复上次的约定。我似乎被困在这片泥地里与泥巴粘连在一起，变为一堆粪土，娇艳的“牡丹”拼命在我身上汲取的营养。被夸赞的是你，牺牲的是我。怎么找爬出去的办法，我思考良久始终找不到答案，被掩埋太久只能做随风飘散的粉尘。眼前一片黑暗，找不到真谛嘈杂的声音让我一次又一次的失去了方向。</p><p>被窝的小猫在舔舐着伤口，眼神坚定不移。看了太多的书，思绪乱飞，抠字眼，解释意，在笔记本狂草，听着偷来的黑胶唱片，梦想成就另一片世界。</p><p>哈姆雷特：我就是我不一样的烟火，我并没有一千个分身呀！</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202307082240673.jpeg"></p><p>音乐给我带来生活的勇气，自由让我敢于寻找真实的自己，而月亮是在想你</p><p>看月亮是件很隐私也很浪漫的事情，我想和喜欢的人一起看月亮。不是你看一眼我也看一眼的那种，最好四下无人，最好我们靠在一起，夜幕四合月亮躺在星星的怀抱里，我看一眼月亮再偷看一眼你。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自由</tag>
      
      <tag>朋友</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins</title>
    <link href="/king/9a7f448e.html"/>
    <url>/king/9a7f448e.html</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用网站链接</title>
    <link href="/king/f2d3bd3a.html"/>
    <url>/king/f2d3bd3a.html</url>
    
    <content type="html"><![CDATA[<h1 id="👓必备在线工具"><a href="#👓必备在线工具" class="headerlink" title="👓必备在线工具"></a>👓必备在线工具</h1><p><a href="https://www.bejson.com/">JSON格式转换</a></p><p><a href="https://www.processon.com/">在线画图</a></p><p><a href="https://www.linuxcool.com/">Linux命令大全</a></p><p><a href="https://tinypng.com/">图片压缩</a></p><p><a href="https://unbug.github.io/codelf/">变量起名</a></p><p><a href="https://carbon.now.sh/">代码转图片</a></p><p><a href="https://springdoc.cn/">Spring中文文档</a></p><h1 id="🌞常用网站"><a href="#🌞常用网站" class="headerlink" title="🌞常用网站"></a>🌞常用网站</h1><p><a href="https://mvnrepository.com/"> Maven仓库管理</a></p><p><a href="https://spring.io/">Spring</a></p><h1 id="🍺大佬博客"><a href="#🍺大佬博客" class="headerlink" title="🍺大佬博客"></a>🍺大佬博客</h1><p><a href="https://surmon.me/">来苏之望</a></p><p><a href="https://tobebetterjavaer.com/">沉默王二</a></p><p><a href="https://paicoding.com/">技术派</a></p><p><a href="https://www.sunofbeach.net/">阳光沙滩</a></p><h1 id="📖学习网站"><a href="#📖学习网站" class="headerlink" title="📖学习网站"></a>📖学习网站</h1><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">数据结构学习</a></p><p><a href="http://note.moguit.cn/">陌溪的学习笔记</a></p><p><a href="https://icyfenix.cn/">凤凰架构</a></p><p><a href="https://www.liaoxuefeng.com/">廖雪峰的官方网站</a></p><p><a href="https://javaguide.cn/">javaguide</a></p><p><a href="https://www.processon.com/view/link/615439a3e401fd6be078fdfd#map">MySQL思维导图</a></p><h1 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h1><p><a href="https://github.com/IanLunn/Hover">鼠标悬停效果</a></p><p><a href="https://gitee.com/ele-admin/EasyCaptcha">图形验证码</a></p><p><a href="https://gitee.com/log4j/pig">脚手架-pig</a></p><p><a href="https://gitee.com/jeecg/jeecg-boot">jeecg-boot</a></p><p><a href="https://gitee.com/zhijiantianya/ruoyi-vue-pro">脚手架-ruoyi-vue-pro</a></p><p><a href="https://gitee.com/dromara/sa-token">权限认证框架-Sa-token</a></p><p><a href="https://gitee.com/leshalv/screw">  数据库表结构生成</a></p><h1 id="🤔一些有趣的网站"><a href="#🤔一些有趣的网站" class="headerlink" title="🤔一些有趣的网站"></a>🤔一些有趣的网站</h1><p><a href="https://getemoji.com/">Emoji颜文字</a></p><p><a href="https://getavataaars.com/">头像生成</a></p><p><a href="http://zhongguose.com/">中国传统颜色</a></p><p><a href="https://webgradients.com/">渐变色</a></p><p><a href="https://aicolors.co/">AI网站配色</a></p><h1 id="免费无版权资源"><a href="#免费无版权资源" class="headerlink" title="免费无版权资源"></a>免费无版权资源</h1><p><a href="https://unsplash.com/">精美图片unsplash</a></p>]]></content>
    
    
    <categories>
      
      <category>生产工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>效率</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间到底去哪里了</title>
    <link href="/king/210dd370.html"/>
    <url>/king/210dd370.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、疑问🤔️"><a href="#一、疑问🤔️" class="headerlink" title="一、疑问🤔️"></a>一、疑问🤔️</h1><p>正如标题所言，我目前正在困顿我的时间到底去哪里了。我很想知道2023年4月3日入职新公司到目前已经快两月了，貌似才刚入职不久就已经过去那么快了。</p><h1 id="二、最近"><a href="#二、最近" class="headerlink" title="二、最近"></a>二、最近</h1><p>入职后第一件事就是安排了自己的学习进度计划，貌似自己并没有实现的很好反而熬夜变成了常态，刷抖音小红书似乎已经成了一种常态。有一天在卸载抖音之后，打开手机居然有一种空虚之感，想要再次把短视频app下下来的冲动，今天我又装上了抖音并给自己美曰其名为跟随时代潮流。目前维持最好的貌似是看书，前不久断断续续的刷完了《挪威的森林》，本以读书笔记作为坚持阅读的激励。但是似乎呵呵呵（并没有做什么），就像现在不知是什么原因导致自己写这么一篇流水账。</p><h1 id="三、理想"><a href="#三、理想" class="headerlink" title="三、理想"></a>三、理想</h1><p>关于理想我必须说点什么虽然跟今天的blog毫无关联，小时候被隔壁医生老爷爷拯救过一次我就爱上了医生这个职业，但是由于种种原因最后走上了码农的道路(当然我很热爱这份职业，毕竟我现在可以在这肆无忌惮的废话)。小时候的职业幻想确实比较清晰，毕竟我们的日常生活还需要别人来施舍，这样说并为贬低亲人的伟大，因为小时候确实惹了不少麻烦事。工作后比较想做一个自由职业者，因为真的不需要早起这样的工作其实也只是自己的美好幻想。</p><p>不论哪一份职业都有自己的幸苦，或许我认为的并不是真实的场景可能是自带滤镜过滤掉了那些鲜为人知的幸酸。不过在认识博士之后，我似乎发现了我也可以成为任何一个角色比如：自媒体，模特，乞丐…或许当一个小有名气的作家。写东西一直以来是我比较喜欢干的事情，就像生活已经离不开香烟🚬。虽然到现在我并未写出一本书或者几片拿得上台面的杂文，我只是在脑子里面突然迸发出几个奇思妙想的文案，但是我却没有及时记录，这应该是我不能成为一个作家的主要原因，其实归根结底还是因为熬夜惹的祸。</p><h1 id="四、浪费"><a href="#四、浪费" class="headerlink" title="四、浪费"></a>四、浪费</h1><p>对我来说最不能接受的就是浪费时间(指被强迫做不喜欢的事情)。当我回家之前计划的要写一篇比较正规而又精美的博文时，我又偷偷去干别的事情慢慢就过了十点也我也是在计划十点准时休息，但是到目前为止没有一天我早睡过。不知道哪位伟人曾说过浪费时间等于谋财害命，我也不想去追究了，反正就是该做什么的时候就好好去做什么吧，所以我现在就需要关闭电脑好好睡一个好觉。晚安😴！</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>不发朋友圈的日子</title>
    <link href="/king/5c6c362a.html"/>
    <url>/king/5c6c362a.html</url>
    
    <content type="html"><![CDATA[<p>艺术源于生活，也归于生活。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305292304500.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305292304521.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305292304547.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305292304571.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305292304587.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305292304605.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305292304622.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305292304639.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305292304659.jpg"></div></div></div><p>周末看了画展，艺术给人的震惊感确实是无法比拟的，作者的精神状态、生活习惯以及等等个人生活的映射都将以另一幅不为世人所理解的画面展示。</p><p>生活的意义在哪里，我并不知道，我只知道我需要为别人而活，为他们的期盼和责任。苟延残喘的努力在世界上留下鲜为人知的脚印👣。也或许为自己心中的一丝不甘坚持着，为欺骗内心，为蝇营狗苟的生活。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell常用命令</title>
    <link href="/king/cdf8534a.html"/>
    <url>/king/cdf8534a.html</url>
    
    <content type="html"><![CDATA[<h3 id="查询占用端口的进程-并关闭进程"><a href="#查询占用端口的进程-并关闭进程" class="headerlink" title="查询占用端口的进程,并关闭进程"></a>查询占用端口的进程,并关闭进程</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看端口被占用的进程</span>lsof -i tcp:10082kill -9 进程号</code></pre></div><h3 id="将当天本人的-git-提交记录生成txt文档"><a href="#将当天本人的-git-提交记录生成txt文档" class="headerlink" title="将当天本人的 git  提交记录生成txt文档"></a>将当天本人的 git  提交记录生成txt文档</h3><div class="code-wrapper"><pre><code class="hljs shell">filename=&quot;log_$(date +&quot;%Y%m%d&quot;).txt&quot;git log --author=jinguoguang --since=midnight --no-merges --pretty=format:&quot;%s&quot; | sort | uniq &gt;&gt; /Users/zhangshun/shell/$filename<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">查找当天（自午夜以来）由 YourName 提交的 Git 记录。</span><span class="hljs-meta prompt_"># </span><span class="language-bash">排除合并提交，只保留非合并提交。</span><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 format 参数输出每一行记录的短 SHA 值和提交说明。</span><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 <span class="hljs-built_in">sort</span> 和 <span class="hljs-built_in">uniq</span> 命令过滤出相同的记录。</span><span class="hljs-meta prompt_"># </span><span class="language-bash">将过滤后的记录追加到 /Users/zhangshun/shell/log_当天日期.txt 文件中。</span><span class="hljs-meta prompt_">#</span><span class="language-bash">请将 YourName 替换为你自己的 Git 用户名，并在执行命令前检查文件路径是否正确。</span></code></pre></div><h3 id="输入数字运行相应命令"><a href="#输入数字运行相应命令" class="headerlink" title="输入数字运行相应命令"></a>输入数字运行相应命令</h3><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash  </span><span class="hljs-comment">##############################################################  </span><span class="hljs-comment">#输入数字运行相应命令  </span><span class="hljs-comment">##############################################################  </span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;*cmd menu* 1-date 2-ls 3-who 4-pwd 0-exit &quot;</span>  <span class="hljs-keyword">while</span> :  <span class="hljs-keyword">do</span>  <span class="hljs-comment">#捕获用户键入值  </span> <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;please input number :&quot;</span> n   n1=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$n</span>|sed s<span class="hljs-string">&#x27;/[0-9]//&#x27;</span>g`  <span class="hljs-comment">#空输入检测   </span> <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$n</span>&quot;</span> ]   <span class="hljs-keyword">then</span>   <span class="hljs-built_in">continue</span>   <span class="hljs-keyword">fi</span>  <span class="hljs-comment">#非数字输入检测   </span> <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$n1</span>&quot;</span> ]   <span class="hljs-keyword">then</span>   <span class="hljs-built_in">exit</span> 0   <span class="hljs-keyword">fi</span>   <span class="hljs-built_in">break</span>  <span class="hljs-keyword">done</span>  <span class="hljs-keyword">case</span> <span class="hljs-variable">$n</span> <span class="hljs-keyword">in</span>   1)   <span class="hljs-built_in">date</span>   ;;   2)   <span class="hljs-built_in">ls</span>   ;;   3)   <span class="hljs-built_in">who</span>   ;;   4)   <span class="hljs-built_in">pwd</span>   ;;   0)   <span class="hljs-built_in">break</span>   ;;      <span class="hljs-comment">#输入数字非1-4的提示  </span> *)   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;please input number is [1-4]&quot;</span>  <span class="hljs-keyword">esac</span></code></pre></div><h3 id="记录linux服务器输入的命令"><a href="#记录linux服务器输入的命令" class="headerlink" title="记录linux服务器输入的命令"></a>记录linux服务器输入的命令</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment"># 获取当前日期和时间</span>timestamp=$(<span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<span class="hljs-comment"># 获取登录的 IP 地址和用户名</span>ip=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$SSH_CLIENT</span> | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)username=$(<span class="hljs-built_in">whoami</span>)<span class="hljs-comment"># 获取输入的命令</span><span class="hljs-built_in">command</span>=$(<span class="hljs-built_in">history</span> 1 | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<span class="hljs-comment"># 记录到日志文件</span>log_file=<span class="hljs-string">&quot;/var/log/command.log&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$timestamp</span> - IP: <span class="hljs-variable">$ip</span> - User: <span class="hljs-variable">$username</span> - Command: <span class="hljs-variable">$command</span>&quot;</span> &gt;&gt; <span class="hljs-string">&quot;<span class="hljs-variable">$log_file</span>&quot;</span></code></pre></div><p>这段 Bash 脚本可以用于记录用户执行的命令，将相关信息写入日志文件。具体解释如下：</p><ol><li><code>timestamp=$(date +&quot;%Y-%m-%d %H:%M:%S&quot;)</code>：使用 <code>date</code> 命令获取当前日期和时间，并使用指定的格式保存在 <code>timestamp</code> 变量中。</li><li><code>ip=$(echo $SSH_CLIENT | awk &#39;&#123;print $1&#125;&#39;)</code>：使用 <code>echo $SSH_CLIENT</code> 命令获取当前登录用户的 IP 地址和端口号，并通过 <code>awk</code> 命令提取出 IP 地址并保存在 <code>ip</code> 变量中。</li><li><code>username=$(whoami)</code>：使用 <code>whoami</code> 命令获取当前登录用户的用户名，并保存在 <code>username</code> 变量中。</li><li><code>command=$(history 1 | awk &#39;&#123;print $2&#125;&#39;)</code>：使用 <code>history</code> 命令获取最近执行的命令历史记录，并通过 <code>awk</code> 命令提取出最后一个命令，并保存在 <code>command</code> 变量中。</li><li><code>log_file=&quot;/var/log/command.log&quot;</code>：定义日志文件路径和名称。</li><li><code>echo &quot;$timestamp - IP: $ip - User: $username - Command: $command&quot; &gt;&gt; &quot;$log_file&quot;</code>：将日志信息以特定格式输出，并追加写入到日志文件中。</li></ol><p>你可以将这段脚本保存为一个文件（例如 <code>record_command.sh</code>），然后在需要记录用户命令的地方添加执行该脚本的命令（例如 <code>./record_command.sh</code>），即可实现记录用户命令到指定的日志文件中。请确保日志文件的存储路径和权限设置正确。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>真正做到自律的唯一“捷径”</title>
    <link href="/king/1679bc2f.html"/>
    <url>/king/1679bc2f.html</url>
    
    <content type="html"><![CDATA[<p>“最初是我们塑造习惯，后来是习惯塑造我们。”<br>——奥斯卡·王尔德</p><span id="more"></span><p>文章太长不看版：</p><p style="color:red">找到最关键的核心习惯，改变就能轻而易举。</p> <h2 id="核心习惯"><a href="#核心习惯" class="headerlink" title="核心习惯"></a>核心习惯</h2><p>你会不会受够了糟糕的现状，然后立志改变——不能这样下去了，我要自律！</p><p>我们一般的思路是，制定一个完美的计划，然后一股脑开始十几个甚至几十个习惯养成计划：</p><blockquote><p>早睡早起、不熬夜、运动、关心家人</p><p>不玩手机，冥想，不拖延，不抱怨 </p><p>健康饮食、醒来喝一杯水、每天喝8杯水</p><p>日行一善、护肤、敷面膜……</p></blockquote><p>我有时候打开时光序的习惯库，每一个看起来都非常有用，于是恨不得把每一个都添加上😂</p><p>但是，正确≠必要。</p><p>如果强行一次性完成十几二十个习惯，难度真的好大😭</p><p>而且中途几次没坚持下去，就会破罐子破摔，间歇性自律，持续性摆烂…</p><p>不过好消息是，只需要培养一个核心习惯，作为整体的生活状态就会往更加规律的方向运作。</p><p><strong>什么是「核心习惯」？</strong></p><p>查尔斯·都希格在《习惯的力量》一书中提出了这一理念。</p><p>它指的是最关键的，能起带头作用的习惯。</p><p><strong>某些或者某个习惯，一旦将其改变，就会自发地引起连锁反应，进而重塑生活/学习方式。</strong></p><p>像多米诺骨牌那样，只要用力推到最前面那个，他会产生连带效应影响后面的骨牌。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/640.jpeg" alt="图片"></p><p>以上图为例，核心问题是玩手机，那么只要养成“睡前不玩手机”这个核心习惯，那么熬夜失眠、晚起、精神状态差就会得到极大缓解。</p><p>“核心习惯能启动一个进程，久而久之将改变一切。”</p><p><strong>只需要优先培养你的核心习惯，切实的付诸行动开始改变，就是找到了自律的捷径。</strong></p><p>这个认知对我来说太重要了。</p><p>曾经我也是，长期困扰我的坏习惯就是：</p><blockquote><p>整体精神萎靡，专注力差，总是玩手机；</p><p>做事拖延，又因为拖延导致焦虑压力大;</p><p>花钱大手大脚，在减肥和吃吃喝喝中反复…</p></blockquote><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/640.gif" class="img-center"><p>仔细想想，似乎每次只要早起，我一天的状态都会很不错，而且因为生物钟影响，无论几点睡，我睡7个小时候就会醒过来。</p><p>所以我给自己的核心计划就是，<strong>晚上11点睡觉，用早睡带动早起</strong>。</p><p>为了保证这个核心习惯养成，我制定了睡前和早起后的routine——</p><p>晚上10点泡脚/拉伸，看完半小时书开始准备入睡；</p><p>第二天6点早起，1小时做运动洗个热水澡、1小时边做早餐边听网课，8点准时出门。</p><p>当早上完成那么多事情，然后安静地迎接太阳，那种感觉真的很爽。</p><p>就算那一天遇到很多问题，但至少拥有了一个美好的早餐。</p><p>核心习惯对人的影响是显著的。</p><p>只有将有限的时间和精力投入核心习惯，才能形成良性的生活循环，产生高效的复利效应，引领你的人生转变。</p><h2 id="3步找到你的专属核心习惯"><a href="#3步找到你的专属核心习惯" class="headerlink" title="3步找到你的专属核心习惯"></a>3步找到你的专属核心习惯</h2><p><strong>“成功并不需要做对每一件事情”。</strong></p><p>当你找准你的核心习惯——</p><p>你是因为没养成哪个习惯，才导致生活中的一切都失控的，并着力于此养成例行公事之后，自然会“驱动和重塑其他行为模式”。</p><p>每一个人的核心习惯不一样。有的是早起，有的是读书，有的是冥想…</p><p>那么如何找到适合你的核心习惯呢？</p><h3 id="1、确定目标和方向"><a href="#1、确定目标和方向" class="headerlink" title="1、确定目标和方向"></a><strong>1、确定目标和方向</strong></h3><p>首先第一步，找方向。</p><p>明确自己想要在什么方面进行改进，最好是确定一个当前最急迫的目标。</p><h3 id="2、列行为，梳理内在关联"><a href="#2、列行为，梳理内在关联" class="headerlink" title="2、列行为，梳理内在关联"></a>2、列行为，梳理内在关联</h3><p>定好方向以后，进行第二步，列行为。</p><p>比如总是熬夜，是因为玩手机导致你睡得晚，那么为什么会玩手机呢？</p><p>是因为你感觉到焦虑，甚至无聊，对信息高刺激的依赖，对大脑及时睡前大量刷视频看文字，睡觉的时候更难平复心绪，反而带着一种更大的空虚和焦虑以及负罪感。</p><h3 id="3、确定核心习惯"><a href="#3、确定核心习惯" class="headerlink" title="3、确定核心习惯"></a>3、确定核心习惯</h3><p>最后一步，定习惯。通过分析行为之间的关联，找出那个在改变之后，就能够带动其他行为的习惯。</p><p>所以对熬夜，我定下的原则是，不带手机上床，睡前避免高刺激。</p><p>然后找一个让我有动力的事情，比如读历史类书籍。</p><p>所以<strong>睡前****读书就是我的核心习惯</strong>，避免晚上持续耍手机，尽量早睡；然后带动我早起，吃健康的食物，制定日计划…</p><p>先养成最重要的核心习惯，你会发现在它的带动下，很多问题都会迎刃而解。</p><p>在《习惯的力量》中提到，对于很多人来说，<strong>运动是引发广泛变化的核心习惯。</strong></p><p>发现当人们开始养成运动的习惯时，即使是一周一次的运动，他们也会不知不觉改变其它与之无关的行为模式。</p><p>通常来说，做运动的人会吃得更香，工作更有效率。运动后大脑分泌的多巴胺是天然的抗压剂，让人心情愉悦，排解压力。</p><p>相信我，好的习惯真的会一牵而动全身，让你整个人都变了一个样似的。</p><p>就像早起早睡的人能感受到身体日益康健，常常阅读的人能感受到心灵逐渐丰盈。</p><p>当自律成为一种本能，它便成了我们的一个习惯、一个爱好。</p><p>这样的自律才是真正属于你的人生硕果。</p><p>共勉！</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自律</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么写博客</title>
    <link href="/king/274c9a8f.html"/>
    <url>/king/274c9a8f.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="写博客会有什么收获"><a href="#写博客会有什么收获" class="headerlink" title="写博客会有什么收获"></a>写博客会有什么收获</h1><p>1、增加写作能力</p><p>这一点是显而易见的，写作能力就是靠坚持不懈地写作来提升的。</p><p>定期的写作是一种刻意练习，有时候你想的很多，但是要写出来，</p><p>让人看懂却不是那吗容易，所以需要去总结学习，在这样的过程中，写作能力会逐渐上升。</p><p>2、迫使你深入思考</p><p> 如果你总是写些不痛不痒的文字，写的质量很差，</p><p>基本上不会有人关注，连评论都不会有，</p><p>所以这会迫使你去深入思考总结，拓展你思维的深度，可以有效地训练你的思维能力。</p><p>3、会迫使你更多的输入</p><p>如果你肚子里存货不够，写上一段时间就没有什么东西可写了。</p><p>所以，你就不得不去阅读，去思考，去实践，保持大量的输入才能有持续的输出，但成长也会更快。</p><p>4、有助于认识志同道合的人</p><p>如果你的文章写得好，就会有人来关注你，你会发现你的观点会有人认可，</p><p>有些人会输出自己的观点，不同观点之间的碰撞，会给你带来新的思考，所谓以文会友，就是这个意思吧。</p><p>5、有助于建立个人品牌</p><p>当你持续地写作后，慢慢地看到的人就会多，你的影响力就会慢慢扩大，</p><p>别人也可以通过你的文章来了解你的能力。</p><p>而且，你的博客会是一个很好的建立，HR可以通过博客了解你是不是一个有自己独立思考的人，</p><p>你的表达能力如何，你的写作能力如何。</p><p>其他好处还有很多，当你真正地开始写之后，你才能体会到。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>【1】<a href="https://www.woshipm.com/pd/46149.html">https://www.woshipm.com/pd/46149.html</a><br>【2】<a href="https://blog.csdn.net/weixin_48322563/article/details/116504508">https://blog.csdn.net/weixin_48322563/article/details/116504508</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA常用设置及其技巧</title>
    <link href="/king/4f2f0829.html"/>
    <url>/king/4f2f0829.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本人使用IDEA版本为IntelliJ IDEA 2021.3.3，如遇到不同设置请至官网查看详细设置</p></blockquote><h1 id="一、常用设置"><a href="#一、常用设置" class="headerlink" title="一、常用设置"></a>一、常用设置</h1><h2 id="1-设置提示词忽略大小写"><a href="#1-设置提示词忽略大小写" class="headerlink" title="1.设置提示词忽略大小写"></a>1.设置提示词忽略大小写</h2><p>把这个勾去掉，(有的idea版本是选择选项 选择none即可)</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141400256.png" alt="image-20230514140010097"></p><h2 id="2-显示方法分隔符"><a href="#2-显示方法分隔符" class="headerlink" title="2.显示方法分隔符"></a>2.显示方法分隔符</h2><p>方便查看方法与方法之间的间隔，在代码不规范的项目中 很好用！</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141401097.png" alt="image-20230514140135967"></p><h2 id="3-自动导包、自动移除没用的包"><a href="#3-自动导包、自动移除没用的包" class="headerlink" title="3.自动导包、自动移除没用的包"></a>3.自动导包、自动移除没用的包</h2><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141402385.png" alt="image-20230514140224885"></p><h2 id="4-取消tab页单行显示"><a href="#4-取消tab页单行显示" class="headerlink" title="4.取消tab页单行显示"></a>4.取消tab页单行显示</h2><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/image-20230518124544617.png" alt="image-20230518124544617"></p><h2 id="5-双斜杠注释改成紧跟代码头"><a href="#5-双斜杠注释改成紧跟代码头" class="headerlink" title="5.双斜杠注释改成紧跟代码头"></a>5.双斜杠注释改成紧跟代码头</h2><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/image-20230518124742156.png" alt="image-20230518124742156"></p><h2 id="6-创建文件时，自动生成作者和时间信息"><a href="#6-创建文件时，自动生成作者和时间信息" class="headerlink" title="6.创建文件时，自动生成作者和时间信息"></a>6.创建文件时，自动生成作者和时间信息</h2><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/image-20230518125312845.png" alt="image-20230518125312845"></p><h2 id="7-添加背景图片"><a href="#7-添加背景图片" class="headerlink" title="7.添加背景图片"></a>7.添加背景图片</h2><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/image-20230518125103324.png" alt="image-20230518125103324"></p><h2 id="8-SpringBoot开启热部署"><a href="#8-SpringBoot开启热部署" class="headerlink" title="8.SpringBoot开启热部署"></a>8.SpringBoot开启热部署</h2><p><a href="https://blog.csdn.net/zhangxianling11/article/details/125424479">原文链接</a></p><h1 id="二、常用快捷键"><a href="#二、常用快捷键" class="headerlink" title="二、常用快捷键"></a>二、常用快捷键</h1><h3 id="一、Search-Replace（查询-替换）"><a href="#一、Search-Replace（查询-替换）" class="headerlink" title="一、Search/Replace（查询/替换）"></a>一、Search/Replace（查询/替换）</h3><ol><li>Double <code>⇧</code> ：查询任何东西</li><li><code>⌘ + F</code> ：文件内查找</li><li><code>⌘ + R</code> ：文件内替换</li><li><code>⌘ + ⇧ + F</code> ：全局查找（根据路径）</li><li><code>⌘ + E</code> 显示最近打开的文件记录列表</li><li><code>⌘ + ⌥ + ←</code> / <code>⌘ + ⌥ + →</code> ：退回 / 前进到上一个操作的地方</li><li><code>⌘ + ⇧ + ⌫</code> ：跳转到最后一个编辑的地方</li><li><code>⌘ + ⌥ + B</code> ：跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li><li><code>⌘ + U</code> ：前往当前光标所在方法的父类的方法 / 接口定义</li><li><code>⌘ + F12</code> ：弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li></ol><h3 id="二、Editing（编辑）"><a href="#二、Editing（编辑）" class="headerlink" title="二、Editing（编辑）"></a>二、Editing（编辑）</h3><ol><li><code>⌃ + I</code> ：实现方法（实现接口中的方法）</li><li><code>⌘ + /</code> ：注释/取消注释与行注释</li><li><code>⌘ + ⌥ + /</code> ：注释/取消注释与块注释</li><li><code>⌃ + ⇧</code> ：连续向上选中代码块</li><li><code>⌘ + ⌥ + L</code> ：格式化代码</li><li><code>⌃ + ⌥ + O</code> ：优化import</li><li><code>⌘ + X</code> ：剪切当前行或选定的块到剪贴板</li><li><code>⌘ + Z</code> ：撤销当前操作</li><li><code>⌘ + ⌃ + Z</code> ：撤销撤销的操作</li><li><code>⌘ + C</code> ：复制当前行或选定的块到剪贴板</li><li><code>⌘ + V</code> ：从剪贴板粘贴</li><li><code>⌘ + ⇧ + V</code> ：从最近复制的的缓冲区中选择粘贴</li><li><code>⌘ + D</code> ：复制当前行或选定的块</li><li><code>⌘ + ⌫</code> ：删除当前行或选定的块的行</li></ol><h3 id="三、Refactoring（重构）"><a href="#三、Refactoring（重构）" class="headerlink" title="三、Refactoring（重构）"></a>三、Refactoring（重构）</h3><ol><li><code>⇧ + F6</code> ：重命名文件</li></ol><h3 id="四、Debugging（调试）"><a href="#四、Debugging（调试）" class="headerlink" title="四、Debugging（调试）"></a>四、Debugging（调试）</h3><ol><li><code>F8</code> ：进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li><li><code>F7</code> ：进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li><li><code>⇧F7</code> ：智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li><li><code>⇧F8</code> ：跳出</li><li><code>⌥ + F9</code> ：运行到光标处，如果光标前有其他断点会进入到该断点</li><li><code>⌥ + F8</code> ：计算表达式（可以更改变量值使其生效）</li><li><code>⌘ + ⌥ + R</code> ：恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li><li><code>⌘ + F8</code> ：切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li><li><code>⌘ + ⇧ + F8</code> ：查看断点信息</li></ol><h3 id="五、插件："><a href="#五、插件：" class="headerlink" title="五、插件："></a>五、插件：</h3><ol><li><code>Command + Shift+ Option + U</code>: 类继承关系图表</li><li><code>Ctrl + \</code>: 查找类和方法组合的Controller</li><li><code>Option + S (mac)</code>: JSON数据快速生成Java实体类</li></ol><h3 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h3><ol><li><code>⇧ + Command + 5</code> ：截屏</li></ol><h1 id="三、插件推荐"><a href="#三、插件推荐" class="headerlink" title="三、插件推荐"></a>三、插件推荐</h1><div class="note note-success">            <p>提示：安装之后如果没立即生效，IDE重启即可生效。</p>          </div><h2 id="1-Chinese-Language-Pack"><a href="#1-Chinese-Language-Pack" class="headerlink" title="1.Chinese Language Pack"></a>1.Chinese Language Pack</h2><p>idea汉化插件</p><h2 id="2-Generate-all-setter"><a href="#2-Generate-all-setter" class="headerlink" title="2.Generate all setter"></a>2.Generate all setter</h2><p>插件描述:该插件作用是可以快速针对已有的model实体对象的属性生产get、set代码，免去开发者在开发过程中get、set属性值时还需要去实体对象中翻查的时间，生成的同时会附带类型默认值。</p><p>使用方法:new一个对象然后使用Alt键+Enter(<code>⌥+Enter</code>)键即可调出选项。根据所需要选择选项即可。</p><p>效果:</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/image-20230518135759195.png" alt="image-20230518135759195"></p><h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202306080905064.png" alt="image-20230608090544352"></p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202306080908286.png" alt="image-20230608090823228"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://mp.weixin.qq.com/s/UykEJ42d1rf0K5KXMJjwBA">https://mp.weixin.qq.com/s/UykEJ42d1rf0K5KXMJjwBA</a></p><p>[2]<a href="https://mp.weixin.qq.com/s/qjhb968jechggJEKfN-abQ">https://mp.weixin.qq.com/s/qjhb968jechggJEKfN-abQ</a></p>]]></content>
    
    
    <categories>
      
      <category>生产工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我有一只猫</title>
    <link href="/king/295de697.html"/>
    <url>/king/295de697.html</url>
    
    <content type="html"><![CDATA[<p>2022年4月12日我购买了人生当中第一只属于自己的猫咪，并给它起了名字元元，寓意着以后它会元气满满。</p><p>第一次见它的时候，它是一窝小猫最小的。嘴巴那里因为猫癣好几处没有毛，一个人静静的睡在猫砂盆里看的怪心疼。看到我时，它在使劲对我喵喵叫(它选择了我)<br><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141322694.jpg"><br>这是元元和它的弟弟点点在一起睡觉，点点是一只银渐层弟弟，去接它的时候那天貌似在下雨。后来种种原因点点被别人抱走了，到现在我还是很想念点点。<br><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141322657.jpg"></p><p>下面展示一下猪咪的日常生活</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141318894.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141318019.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141318073.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141318116.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141318162.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141318201.jpg"></div></div></div><p>小猫咪又不上班，不吃了睡睡了吃还能干嘛</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141318240.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141318278.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141318318.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141318362.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141318396.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141318442.jpg"></div></div></div><p>它似乎没预料到自己会有十几天见不到我，由于过年回家。它第一次成了留守儿童，似乎和上门喂养的小哥哥相处的不错<br><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202305141318669.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>猫咪</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客搭建</title>
    <link href="/king/9639fcc6.html"/>
    <url>/king/9639fcc6.html</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><div class="code-wrapper"><pre><code class="hljs shell">1、启动Docker 守护进程systemctl daemon-reload2、Docker启动命令：systemctl start docker3、查看docker服务是否启动ps -ef |grep docker4、查看docker启动的服务：docker ps其他：重启docker服务systemctl restart docker停止docker服务systemctl stop docker</code></pre></div><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="cnf配置文件"><a href="#cnf配置文件" class="headerlink" title="cnf配置文件"></a>cnf配置文件</h3><div class="code-wrapper"><pre><code class="hljs gradle">[client]#socket = <span class="hljs-regexp">/usr/my</span>sql/mysqld.sock<span class="hljs-keyword">default</span>-character-set = utf8mb4[mysqld]#pid-<span class="hljs-keyword">file</span>        = <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/mysqld/my</span>sqld.pid#socket          = <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/mysqld/my</span>sqld.sock#datadir         = <span class="hljs-regexp">/var/</span>lib/mysql#socket = <span class="hljs-regexp">/usr/my</span>sql/mysqld.sock#pid-<span class="hljs-keyword">file</span> = <span class="hljs-regexp">/usr/my</span>sql/mysqld.piddatadir = <span class="hljs-regexp">/docker/my</span>sql/datacharacter_set_server = utf8mb4collation_server = utf8mb4_binsecure-<span class="hljs-keyword">file</span>-priv= <span class="hljs-regexp">/var/</span>lib/mysql# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=<span class="hljs-number">0</span># Custom config should go here!includedir <span class="hljs-regexp">/etc/my</span>sql<span class="hljs-regexp">/conf.d/</span></code></pre></div><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><div class="code-wrapper"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3.1&#x27;</span><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span>  <span class="hljs-attribute">db</span><span class="hljs-punctuation">:</span>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mysql:8.0.16</span>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">MySQL8</span>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span>      <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span><span class="hljs-punctuation">:</span> <span class="hljs-string">NpgurqiVy86zihLD</span>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span>      <span class="hljs-attribute">--default-authentication-plugin=mysql_native_password</span><span class="hljs-attribute">      --character-set-server=utf8mb4</span><span class="hljs-attribute">      --collation-server=utf8mb4_general_ci</span><span class="hljs-attribute">      --explicit_defaults_for_timestamp=true</span><span class="hljs-attribute">      --lower_case_table_names=1</span><span class="hljs-attribute">    ports</span><span class="hljs-punctuation">:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">3306:3306</span>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data:/var/lib/mysql</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./conf:/etc/mysql/conf.d</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./logs:/logs</span></code></pre></div><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="docker-compose-yml-1"><a href="#docker-compose-yml-1" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><div class="code-wrapper"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3.1&#x27;</span><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span>    <span class="hljs-attribute">redis</span><span class="hljs-punctuation">:</span>      <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis</span>      <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">sx_redis</span>      <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis-server --requirepass DuHJxnb6mnGmG2N2</span>      <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6379:6379&quot;</span>      <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/local/docker/redis/data:/data&quot;</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/local/docker/redis/conf:/etc/redis/redis.conf&quot;</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/local/docker/redis/log:/logs&quot;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MySQL学习笔记】-存储引擎</title>
    <link href="/king/7b25d017.html"/>
    <url>/king/7b25d017.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、mysql存储引擎概述"><a href="#一、mysql存储引擎概述" class="headerlink" title="一、mysql存储引擎概述"></a>一、mysql存储引擎概述</h1><h2 id="1-1-存储引擎"><a href="#1-1-存储引擎" class="headerlink" title="1.1 存储引擎"></a>1.1 存储引擎</h2><p>MySQL中的数据用各种不同的技术存储在文件（或者内存）中。<br>这些技术中的每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。<br>通过选择不同的技术，你能够获得额外的速度或者功能，从而改善你的应用的整体功能。</p><p>例如，如果研究大量的临时数据，你也许需要使用内存存储引擎。内存存储引擎能够在内存中存储所有的表格数据。</p><p>这些不同的技术以及配套的相关功能在MySQL中被称作存储引擎(也称作表类型)。</p><p>MySQL默认配置了许多不同的存储引擎，可以预先设置或者在MySQL服务器中启用。你可以选择适用于服务器、数据库和表格的存储引擎，以便在选择如何存储你的信息、如何检索这些信息以及你需要你的数据结合什么性能和功能的时候为你提供最大的灵活性。</p><p>选择如何存储和检索你的数据的这种灵活性是MySQL为什么如此受欢迎的主要原因。其它数据库系统 (包括大多数商业选择)仅支持一种类型的数据存储 。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>存储引擎</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>晚熟的人</title>
    <link href="/king/7abe641c.html"/>
    <url>/king/7abe641c.html</url>
    
    <content type="html"><![CDATA[<p>晚熟的人，我个人理解为慢热的人。慢热是一个汉语词汇，拼音是màn rè。顾名思义就是热的很慢，是对一个人的性格描写。“慢热”指的是做事情需要一个过程才投入。一般是用于对人的态度，需要通过时间累积内心评估逐渐生成好感卸下防备才会慢慢的呈现热情。（释义来自于百度百科）</p><p>不管是在生活中，还是感情中，一个人慢热，总会被别人臆想出很多东西。</p><p>就像本来你遇见一个人很高兴，准备了一肚子话要说，但可能最后却说出了一句“好久不见”。</p><p>于是可能就会被对方安上“高冷”人设，你慢热的节奏，真的会很容易让身边的人觉得你并不喜欢那个集体，也不想融入他们的世界。</p><h4 id="其实只有你自己知道，你只是慢半拍，而不是不喜欢。"><a href="#其实只有你自己知道，你只是慢半拍，而不是不喜欢。" class="headerlink" title="其实只有你自己知道，你只是慢半拍，而不是不喜欢。"></a>其实只有你自己知道，你只是慢半拍，而不是不喜欢。</h4><p>因为慢热，你在别人眼里会显得格格不入，会因为一句话，成为一个话题终结者，或者踩到了别人的误区。</p><p>你看，其实你的内心并不是那么想的，也是抱着很大的诚意去与别人相处的。</p><p>但就因为你的性格，导致你还没开始进入话题，别人就已经不耐烦了。</p><p>我始终觉得，任何一段关系和感情，都应该是慢慢来的，慢慢相处，慢慢了解，才知道对方真实的脾气和秉性。</p><p>可现实是，没人会停下来让你去了解。</p><p>你的慢热，就让对方误以为你不喜欢，于是他就赶紧换下一个目标。</p><h4 id="不得不说，慢热有时候也是挺好的，可以让你过滤掉一些不真诚的人。"><a href="#不得不说，慢热有时候也是挺好的，可以让你过滤掉一些不真诚的人。" class="headerlink" title="不得不说，慢热有时候也是挺好的，可以让你过滤掉一些不真诚的人。"></a>不得不说，慢热有时候也是挺好的，可以让你过滤掉一些不真诚的人。</h4><p>我想慢热的人，是学不会快速热情的，因为她做不到违背自己的初心。</p><p>那种一开始就各种热情的人，到最后就没有任何激情了，而热情也是因为想要快速达到目的。</p><p>可能有时候，你会试着去让自己快速热情起来，于是主动找话题，装作合群，找彼此共同的爱好，寻找感情升温的突破口。</p><p>但后来，你发现这样的自己很累，变得不像自己，好的感情不应该是顺其自然，慢慢熟悉了解的吗？</p><p>凡事太快开始的感情，就会很快结束，因为彼此没有熟悉了解的过程，一开始全靠激情和新鲜感，但是时间久了，这些就会慢慢消耗完。</p><h4 id="慢慢来，这才是一种诚意，可以让你看清对方是什么样子。"><a href="#慢慢来，这才是一种诚意，可以让你看清对方是什么样子。" class="headerlink" title="慢慢来，这才是一种诚意，可以让你看清对方是什么样子。"></a>慢慢来，这才是一种诚意，可以让你看清对方是什么样子。</h4><p>经过时间的考验，足以让你彻底了解一个人，知道对方是否适合自己。</p><p>我想对于慢热的人来说，“太快”开始始终没有诚意，慢热的人大概永远都没法做到，一开始就对一个人充满激情。</p><p>关于感情这件事，从来都只跟那个人有关，跟慢热无关。</p><p>一个人真的喜欢你，是会等你慢慢了解自己，爱上自己。他也会花时间和心思来靠近你，让你慢慢喜欢下去。</p><p>总结：</p><p>爱情，本身应该是慢慢来的，这样才能经得起时间的考验。</p><p>生活要慢慢过，爱要慢慢谈，值得的人，始终都会留下。</p><p>我们这一生会遇见很多人，不要害怕错过，就急着开始，要按照自己的节奏来，慢慢来没有关系，爱你的人会等你。</p><p>慢慢来始终是一种诚意，这样才能比得过细水长流。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>2023年6月23日 12:33</p><ul><li><strong>《左镰》</strong></li></ul><p>《左镰》中，出生地主家庭的田奎，自从被他父亲为给贫农刘老三谢罪剁掉了右手，沦为了使用“左镰”割草的少年之后，他变得大胆，不怕大蛇，笑对生活，接纳一切苦难，只为坚强地活着。“这个手挥左镰、右手带钩的田奎形象，就凝聚成一个意味无比深长的意象。” </p><ul><li><strong>《晚熟的人》</strong></li></ul><p>《晚熟的人》揭示了现行的法治秩序对农民的国民性的规训。莫言延续了鲁迅国民性批判的启蒙思想，以“晚熟”两字提炼出“精神胜利法”之外的一种国民性。文中提到“晚熟”有关键几处：一是晚熟的人的代表蒋二告诉莫言一起自杀事件，当年他们一起对付知青的伙伴常林喝百草枯自杀，蒋二评论说“有的人，少时胆大，长大后胆越来越小，这就是早熟和晚熟的区别”；第二处还是这个蒋二，评论莫言上台即兴演讲，说莫言“也是晚熟品种的杰出代表”；第三处是蒋二策划的比武大战被人揭穿是一场戏后，作者莫言宣称自己“陡然间又晚熟了一个量级”，并称蒋天下（蒋二）“晚熟透了”。为什么称“晚熟”呢？答案在结尾揭晓。当假扮成日本人的常林的儿子，被得蒋家滚地龙拳真传的单雄飞打败后，起意报复，以“非法用地”的名义，用两台推土机将擂台和滚地龙拳展览馆摧毁。作者莫言得闻此消息后，劝说蒋二继续晚熟。小说就此结束。</p><ul><li><strong>《贼指花》</strong></li></ul><p>《贼指花》是一个耐人寻味的法律故事，也是小说集中唯一不是以乡村为背景而是发生在城乡结合地带的小说。小说写的是在一次笔会上，“我”认识了笔会的组织者、从公安局弃武从文的捉苍蝇能手武英杰、和武英杰打得火热玩暧昧的俄罗斯混血美女范兰妮、大款作家胡东年、女副镇长、脸上有疤痕有故事的女记者、倒腾稀土资源、周旋在美女之间的假华侨作家尤金，等等。故事由舞会上大款作家胡东年装了巨额钱款的钱包丢失开始，引出一串悬念叠生的貌似侦探小说的情节。作家莫言“我”、爱着范兰妮的尤金、前公安局反扒高手武英杰都有嫌疑。谁是真正偷钱包的人？莫言这位讲故事的高手并未完全说破，他只是说武英杰正气凛然，“看不出一丝一毫的小偷模样”，经过一番推理，嫌疑人只剩下与胡东年同室而居的“我”了。但“我”知道“我”并没有偷。在小说结尾，既然众嫌疑人都排除了，“我”只得说，“或者，真的就像他们怀疑的那样，那个贼，就是我”。 [4] </p><ul><li><strong>《等待摩西》</strong></li></ul><p>《等待摩西》是一个看似从律法开始，经过各种变乱最后回归整全的价值秩序的故事。柳摩西是东北乡资格最老的基督徒的后代，文革初顺应时代风潮改名柳卫东。从“摩西”到“卫东”，莫言暗示了东北乡人民的精神嬗变。柳卫东在二十世纪七十年代后期因自由恋爱结婚，被赶出家门一文不名，到八十年代初改革开放后却成了东北乡的首富，传言要和原配离婚，但却很快失踪了，并且失踪了三十多年。再次出现在作者面前的关于柳卫东的消息，是说他成了一个江湖骗子，四处找人投资他的非法的“讨还民族财富”计划。而两人再次见面时，“柳卫东”则又改回了“柳摩西”这个名字，随妻子给村民传道，一切似乎又回归到原点。 [4] </p><ul><li><strong>《诗人金希普》</strong></li></ul><p>《诗人金希普》描绘了一个专事骗人骗财的伪诗人金希普。此人号称自己是俄罗斯诗人普希金以来最好的诗人，因而自称“金希普”。这个倒装的诗人名字暗寓着莫言强烈的反讽。金希普的一个骗局，是到“我”表弟“宁赛叶”家骗取“我”姑父主动交出两万块钱给他，以便他活动帮助“我”表弟宁赛叶得到电视台副台长的职位。拿到钱后就玩失踪。 </p><ul><li><strong>《表弟宁赛叶》</strong></li></ul><p>《表弟宁赛叶》是《诗人金希普》的姊妹篇。与“金希普”沆瀣一气，表弟宁赛叶称自己的作品《黑白驴》是个远超莫言小说的“旷世杰作”。作者借表弟之口描摹的“黑白驴”形象高度概括了这种骗子的行状：“不白不黑，亦白亦黑；不阴不阳，亦阴亦阳。在白驴面前，它是黑驴；在黑驴面前，它是白驴。”，黑白驴这样的阴阳人，“他们在驴和人之间频繁转换”。小说全由表弟酒后与我的争辩来谋篇布局，由他们的争辩带出时下流行的各种骗局，堪称行骗大全。 </p><ul><li><strong>《地主的眼神》</strong></li></ul><p>《地主的眼神》中，童年的“我”按照当时的政治立场，对老地主孙敬贤进行了作文批判，由此获得学校的认可，却给对方造成了伤害，为此“我”一直心怀内疚。但孙敬贤在生产队集体劳动时装病，又妄想喝儿媳妇的奶水治胃病。改革开放之后，孙敬贤的儿子孙双库发家致富，成为农场主，给孙敬贤举办了一场“耀武扬威的葬礼”，“用这种方式狠狠地打那些当年曾经欺负过他父亲的人的脸”。 [10] </p><ul><li><strong>《澡堂与红床》</strong></li></ul><p>《澡堂与红床》是小说集中写作时间最早的一篇，全篇几乎都由对话构成。分“澡堂”和“红床”两篇。“澡堂”篇写了澡堂里闹事打斗背后的利益之争。改革开放后大型棉花加工厂改成澡堂子后带来了各种利益纠葛与恩怨；“红床”篇谈论的是，为了生计矿工的女儿到按摩院做单纯按摩的按摩女，在“红床”附近（即与“红床”咫尺之遥，意指她卖艺不卖身）与“我”谈论阿尔巴尼亚老电影《<a href="https://baike.baidu.com/item/%E7%AC%AC%E5%85%AB%E4%B8%AA%E6%98%AF%E9%93%9C%E5%83%8F/1375567?fromModule=lemma_inlink">第八个是铜像</a>》里的英雄易卜拉欣，由此将语境由“后四十年”拉回到“前三十年”。</p><ul><li><strong>《天下太平》</strong></li></ul><p>《天下太平》写了一件跟法律直接相关的事。小男孩马迎奥被非法打鱼的人钓上来的鳖咬住了食指，惊动了他的亲戚畜牧兽医局侯科长，动用了各种资源并喊警察来处理。其间村里各种违法寻租的事也得以曝光。最后在警察的妙计下用猪鬃来戳鳖的鼻子，使它终于松了口，小奥的手指重获自由，由此事引发的各种因利益冲突导致的紧张情绪也随之解除，侯科长甚至发现鳖盖上刻有“天下太平”四字。鳖得以被放生了，众人也在“天下太平”的喊声中散去。 </p><ul><li><strong>《红唇绿嘴》</strong></li></ul><p>《红唇绿嘴》是个直接与法律相关的故事。小说以“我”的视角讲故事。故事的时间跨度大，从二十世纪六十年代人民公社时期一直写到二十一世纪互联网时代，以其表姑覃家庄风云人物覃桂英的命运起伏来构建整个故事。走过她那叱咤风云的青年时代，互联网时代的覃桂英，以一副伪“公知”的派头出现在作家“我”面前，口若悬河，语出惊人，娴熟地运用网络开微信公众号。公众号一个叫“红唇”，一个叫“绿嘴”，通过在公众号里卖谣言捞钱。覃桂英还利用网络上访成了意见领袖。后又使计谋伪造“暴力拆迁”的把戏讹诈。结果被公安机关以编造虚假信息、扰乱公共秩序罪拘役三个月。看守所出来后，她不思悔改，反而说这个社会，在合法与非法之间有宽阔的缝隙。 [4] </p><ul><li><strong>《火把与口哨》</strong></li></ul><p>《火把与口哨》写了一桩因村干部争夺寡妇进而对寡妇“三婶”的子女打击报复的案子。这个故事揭示了传统的道德伦理秩序仍然顽固地主宰着农民的命运，而法律秩序却几乎只打了一个擦边球。不但“三婶”丈夫遭遇的矿难没有运用法律手段解决，最后“三婶”儿子丢失的大案也没有谋求法律解决。 </p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>你当善良，且有力量</title>
    <link href="/king/8a3eb0f1.html"/>
    <url>/king/8a3eb0f1.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们所做的任何事情，在人类宏大的历史和空间的范围里，都是微不足道的。但正是这些不计其数的微小的善的信念，使得人性的种子即使在最险恶的环境中，仍能够得以保存，经过时空的洗礼，在未来的某个时间、某个世界，放射出最耀眼的光辉。</p><p>在朋友的推荐下看了《你的善良必须有点锋芒》这本书，本来对鸡汤类的书籍无感，但是还是选择了硬着头皮读下去原因很简单，我总是在委曲求全中变得懦弱，而获得周围亲人、朋友、同事所谓的“性格好、善良”标签，自己却憋成内伤。看过之后，颇受启发。</p><p>我们的文化提倡谦卑、忍让，己所不欲勿施于人。于是，中庸的文化道德里不赞成冲突，不赞成在理性沟通的过程中坚持自己的原则，为自己的利益斗争，所有冲突的火星被消灭在善良光鲜的道德外衣之下。因此，学校教化出的是没有个性的、谦卑的、忍辱负重的知识分子。而道德教化之外的“卑劣”思想反而在谦卑的良善的土壤中生根、发芽、壮大，甚至叫嚣。于是，自古就有了“秀才遇上兵，有理说不清”，网络语言“我是流氓，我怕谁”风靡一时，甚至引起了某些谦卑知识分子的倒戈背叛。当然，并不是我们的文化传统出现了问题，而是有些人利用了文化传统的弱点来攻击，甚至从中获取利益。对此，我们应该不能一味退让，一味善良。对恶的不作为就是对善的最大亵渎。</p><p>很多时候，我们不能建立对自己的一种正确的认知，或者说是没有养成一种正确认知策略。我们往往太在意别人的看法，希望从他人的正面评价中建立对自己的一种认知。我们希望以谦卑的，甚至牺牲部分利益的方式去获得一个“善良”的标签，让自己获得主流文化的一种认可，从而找到一种安全感和归属。而一旦陷入这种认知循环，即使你真的善良，你也可能憋出内伤。<br>善良，不是错，我们仍然应该坚守，这是中华文化传承的根，但是我们应该建立自己正确的认知方式，不需要凭借他人的评价来认识自己。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>我坚持我的善良，但也会自带锋芒。面对别人的得寸进尺，越谦让越心烦，不如以退为进，以守为攻，去妥善化解你所困顿的你所不愿的事。每个人的生活，就只能是你自己的生活，如果强行按照别人的架构去过别人眼中的生活，那么就散失了纯真的自己，好好先生并不是所做的一切如人愿，他也是在有自己的原则中，去用自己的善心帮助那些真真需要帮助的人。别人瞧不起你，并不是你有多么不堪入目，而是他不想花时间去了解你，你应该像石灰，别人越泼冷水，自己越沸腾。请记住你的善良必须要有锋芒，该反击的时候需要反击。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>即使孤身一人，也要热情拥抱生活</title>
    <link href="/king/cef82103.html"/>
    <url>/king/cef82103.html</url>
    
    <content type="html"><![CDATA[<p>并不想和别人争辩什么，也不想去抱怨什么，也不想和任何人去吵架，只是想过一个甜甜的生活，因为争辩得不到什么抱怨也没有拥抱吵架只会让我心烦。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302062139877.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302062141352.jpg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302062141012.jpg"></div></div></div>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>热情</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人生不妨大胆一点</title>
    <link href="/king/fc9ca707.html"/>
    <url>/king/fc9ca707.html</url>
    
    <content type="html"><![CDATA[<p>今年过年回家索性放弃了长做的飞机，直接选购了火车。长达17个小时的火车，特别希望可以遇见一些有趣的事情。</p><p>因为疫情原因回家过年的意愿似乎在今年变得坚定又迫切，索性跟公司辞了长假今年必须回家过个年。由于第一次选择坐火车，没什么经验免不了做一些功课来了解坐火车的注意事项。</p><p>记得第一次想坐车是因为在高中时期答应好友去她的地方一起去吃饭，但当时因为种种原因一直没有敢买票坐车。可能是因为从小到大身边一直有家人陪伴，出门远行难免会有一些担忧。</p><p>毕业后转战北京工作慢慢自己的胆识变得有些大，坐火车似乎不再是一件特别恐惧的事情了。买票刷身份证进站，按着导航牌找到所在站台似乎也不是很难。跟着大家一起排队，然后找座位，感觉就像闭眼就可以完成。后来想想其实所谓的不敢去做的事，只要稍微行动起来就会变的轻松容易。在火车上一路和对面大哥侃大山，作为社恐的我但凡有人起头也可以变得幽默。好在所乘列车可以吸烟，倒是给枯燥的旅程平添些许乐趣。</p><p>火车到站，父母已经早早在出站口等候，几年不见忽然发现老爸似乎有了白头发（当时感觉超级震撼，原以为父母还比较年轻，其实都是50多的人了）。</p><p>车站有两个地方最感人：一个是入口，一个是出口，一个是舍不得你离去，一个是盼着你归来。</p><p>回北京的时候，索性再次选择了火车，由于所乘坐的列车途径站点超级多，这次的北京之旅足足29个小时，最气愤的是这趟列车不能吸烟，作为一个老烟民是无法忍受的。硬座的中铺真的像一个夹心饼干（无法起身只能乖乖的躺着）。</p><hr><p>太困了，放着再写吧，放一些好友拍的精美图片</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202301312327778.jpg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202301312329283.jpeg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202301312329721.jpeg"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202301312330710.jpeg"></div><div class="group-image-wrap"><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202301312328683.jpeg"></div></div></div><blockquote><p>以上图片均来自于好友 Pluto ,商业用途禁止转载。</p></blockquote><p markdown="1" style="    font-weight: bold; ">PS: （2023-02-01更新）更新的内容如下......</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>小猫的语言</title>
    <link href="/king/50a4010a.html"/>
    <url>/king/50a4010a.html</url>
    
    <content type="html"><![CDATA[<p>2023年1月15日 22:59<br>该不会</p><p>2023年1月31日 22:45</p><p>A”?&amp;^</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于婚姻</title>
    <link href="/king/cbceb420.html"/>
    <url>/king/cbceb420.html</url>
    
    <content type="html"><![CDATA[<p>钱钟书先生说：“婚姻是一座围城，城外的人想进去，城里的人想出来。”</p><span id="more"></span><p>婚姻是美好的，也是琐碎的，每个人都有着不同的理解和选择。</p><p>有人勇敢尝试，收获幸福；</p><p>有人遇人不淑，中途分离；</p><p>还有人甘居城外，独自浪漫。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>小王子</title>
    <link href="/king/4540cbee.html"/>
    <url>/king/4540cbee.html</url>
    
    <content type="html"><![CDATA[<p>1、当人情绪低落时候，喜欢看日落。</p><p>When people are in a low mood, they like to watch sunset.</p><p>2、星星真美，因为有一朵看不见的花。</p><p>The stars are beautiful because there is a flower that can’t be seen.</p><p>3、一直朝前走，也走不了多远。</p><p>I can’t go far until I go forward.</p><p>4、当他抬头仰望繁星时，便会心满意足。</p><p>When he looks up at the stars, he will be satisfied.</p><p>5、即使在有人的地方，我们依然孤单。</p><p>Even in places where there are people, we are still alone.</p><p>6、你们很美，但你们是空虚的。</p><p>You are beautiful, but you are empty.</p><p>7、可怕的不是长大，是遗忘。</p><p>It’s not growing up, it’s forgetting.</p><p>8、你知道，悲伤的人会爱上日落的。</p><p>You know, sad people will fall in love with sunset.</p><p>9、夜充满了威胁，邪风一吹，立刻腐烂。</p><p>Night is full of threats, evil wind blows, immediately decay.</p><p>10、每个人，都有一片属于自己的星空。</p><p>Everyone, has a star of their own.</p><p>11、我该从行动，而非言语来判别是非。</p><p>I should judge right and wrong from action, not words.</p><p>12、对旅人而言，星星是向导。</p><p>For travelers, stars are guides.</p><p>13、能快乐旅行的，一定是轻装旅行的人。</p><p>Those who can travel happily must be light-weight travelers.</p><p>14、有一朵玫瑰，我想，她把我驯服了。</p><p>There is a rose, I think, she tamed me.</p><p>15、人难过的时候，总是爱看日落。</p><p>When people are sad, they always love to watch sunset.</p><p>16、我不需要你，你也同样用不着我。</p><p>I don’t need you, and you don’t need me either.</p><p>17、一切都会好起来的，你知道的。</p><p>Everything will be fine, you know.</p><p>18、当一个人伤心，他会喜欢日落。</p><p>When a person is sad, he will like sunset.</p><p>19、时间越临近，我就越来越快乐。</p><p>The closer time comes, the happier I am.</p><p>20、大人们都是这个样子，以衣冠取人。</p><p>The big people are all like this, taking people with their clothes.</p><p>21、在沙漠上，真有点孤独。</p><p>It’s a little lonely in the desert.</p><p>22、真正重要的东西，肉眼是看不到的。</p><p>What really matters is invisible to the naked eye.</p><p>23、最重要的东西，是肉眼看不见的。</p><p>The most important thing is invisible to the naked eye.</p><p>24、忘记朋友是可悲的，不是谁都有朋友。</p><p>It’s sad to forget friends, not everyone has friends.</p><p>25、路一旦打通，不会没有人走。</p><p>Once the road is opened, no one will go.</p><p>26、对我那位商人来说，它们就是财富。</p><p>For my businessman, they are wealth.</p><p>27、当我们开始追寻，我们就已经在失去。</p><p>When we start to pursue, we are already losing.</p><p>28、最大的问题不是长大，而是遗忘。</p><p>The biggest problem is not to grow up, but to forget.</p><p>29、我太年轻了，甚至不懂怎么去爱她。</p><p>I’m too young to even understand how to love her.</p><p>30、上场，登上舞台。</p><p>Play, get on the stage.</p><p><img src="https://img2.baidu.com/it/u=3036138966,371898811&fm=253&fmt=auto&app=138&f=JPEG?w=810&h=500"></p><p>1、在我眼里，全世界只有你是独一无二的。</p><p>2、因为是心甘情愿地沉溺，即使死亡也无须被拯救。</p><p>3、人类已经忘记了这个真理，但你不要忘记它。</p><p>4、我与你相见的可能，是这世上的七十亿分之一。</p><p>5、一旦有人将娃娃拿走，他们就会号啕大哭。</p><p>6、你有一头金发，如果你驯养我，那该有多么美好啊！</p><p>7、你知道，当人们感到非常苦闷时，总是喜欢日落的。</p><p>8、如果你想要驯服一个人，就要冒着掉眼泪的危险。</p><p>9、人生，总会有不期而遇的温暖，和生生不息的希望。</p><p>10、这是最难做到的，审判自己比审判别人难得多。</p><p>11、我们都是傻痴痴的小狐狸，徒具一副精明的外表。</p><p>12、我们只有感动，却不知道感动来自何方。</p><p>13、我还是太年轻了，甚至不懂得怎么爱他。</p><p>14、我应该根据她的行为，而不是根据她的话来判断她。</p><p>15、只有用心，才能看清楚。重要的东西是眼睛看不见的。</p><p>16、要对一个人下定论，不应听其言，而应观其行。</p><p>17、只有用心才能体会的，内在的本质是眼睛看不到的。</p><p>18、如果选择被驯养，那就要承担一点哭泣的风险。</p><p>19、你知道当一个人情绪低落的时候，他会格外喜欢看日落。</p><p>20、忘记朋友是一件令人伤心的事情，并不是人人都有朋友的。</p><p>21、因为你为玫瑰花了那么多时间，它才变得那么重要。</p><p>22、我心爱的花在那里，在那颗遥远的星星上。</p><p>23、对学者而言，星星则是一门待解的难题。</p><p>24、如果你想和别人制造羁绊，就必须承受流泪的风险。</p><p>25、如果你要是驯服了我，我的生活就一定会是欢快的。</p><p>26、眼睛是什么也看不见的，一定要用心去看。</p><p>27、如果我想结识蝴蝶，我得忍受两三只毛毛虫。</p><p>28、在沙漠里有些孤独，在人群里也孤独。</p><p>29、你明白，路太远，我无法带着躯体走，太沉重。</p><p>30、如果想要提高英语，我们就不应该害怕犯错误。</p><p>31、事实是，我以前不知道怎么去看待事物！</p><p>32、忘记一个朋友真令人伤心，并非人人都有过朋友。</p><p>33、对我们懂得生活的人来说，数字都是些无关紧要的事。</p><p>34、忘记朋友是可悲的，并不是每个人都会有一个知心朋友。</p><p>35、规律是从经验而来的，在经验以前，决不可能认识规律。</p><p>36、一个人想要耍点小聪明的时候，就会显得有点不真实。</p><p>37、生命中重要的事情，你不能用眼睛看，只能用心灵看。</p><p>38、花总是表里不一，而我太年轻了，不知道该怎样爱护她。</p><p>39、人经过选择，会满意和喜欢生命的机缘。</p><p>40、要想结识蝴蝶，就得先忍受两三只毛毛虫的叮咬。</p><p>41、把心爱的人放在心里，他便永远活在你的心中。</p><p>42、所有的大人都曾经是小孩，虽然，只有少数人记得。</p><p>43、当一个人情绪低落的时候，他会格外喜欢看日落。</p><p>44、你知道，我的花，我是要对她负责的！</p><p>45、虽然你伤了我的心，但我原谅你的所作所为。</p><p>46、她只有四根微不足道的刺，保护自己，抵抗外敌。</p><p>47、人不应该听花说些什么，只要欣赏她们，闻闻花就够了。</p><p>48、你会爱这满天的星星，所有的星星都会是你的朋友。</p><p>49、夜晚，我喜欢聆听星星，它们就像五亿个小铃铛一样。</p><p>50、每一个人都有自己的星星，但其中的含义却因人而异。</p><p>51、所有的大人都曾经是小孩，虽然，只有少数的人记得。</p><p>52、在你看了四十四次日落那天，你很难过吗？</p><p>53、你知道吗，人在难过的时候就会爱上日落。</p><p>54、如果你想要制造羁绊，就得承受流泪的风险。</p><p>55、她向我释放她的香气，展示她的美艳。</p><p>56、他走过一个又一个星球，却始终放不下对她的思念。</p><p>57、我对你来说，也是你的世界里的唯一了。</p><p>58、当一个人炫耀他自己的智慧时，往往到会误入歧途。</p><p>59、使沙漠显得美丽的，是它在什么地方藏着一口水井。</p><p>60、看，我的那颗星星，恰好就在头上却距离如此遥远！</p><p>61、所有的大人都是孩子，只要你未曾遗忘。</p><p>62、黑夜是富裕的，充满芳香、沉睡的羔羊、尚无颜色的花朵。</p><p>63、当一个人情绪低落时，他会格外喜欢看日落！</p><p>64、想起你，我会很幸福的，你知道我也看着星星啊。</p><p>65、沙漠之所以美丽，是因为在某个角落藏着一口井。</p><p>66、一旦你驯服了什么，就要对她负责，永远的负责。</p><p>67、沙漠之所以美丽，是因为在它的某个角落隐藏着一口井。</p><p>68、你花费了时间，才让你的花费物超所值。</p><p>69、我应该以她的行为，而不是她的言语来判断她的一切。</p><p>70、生活才不是生命荒唐的编号，生活的意义在于生活本身。</p><p>71、本质的东西是用眼睛看不见的，只能用心去看。</p><p>72、当一个人炫耀他自己的智慧时，往往倒会误入歧途。</p><p>73、总有些人不引人注目，却是出色的信使。</p><p>74、即使快要死了，拥有过一个朋友总是好事。</p><p>75、你，只有你，了解这些星星与众不同的含义。</p><p>76、使生活如此美丽的，是我们藏起来的真诚和童心。</p><p>77、我知道在一个星球上，有那么一个红脸的先生。</p><p>78、我的命令是合理的，所以我有权要别人服从。</p><p>79、原来有一天，向日葵也会想主动放弃太阳。</p><p>80、你什么也不要说，语言是误解的源头。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何做好新冠疫情个人防护</title>
    <link href="/king/7bcc2bc0.html"/>
    <url>/king/7bcc2bc0.html</url>
    
    <content type="html"><![CDATA[<p>当前的新冠肺炎疫情防控形势严峻复杂，全国上下不断加强疫情防控力度。疫情防控中的个人防护显得尤为重要，接下来，让我们一起来了解一下，由中国疾控中心发布的：公众应如何做好新冠疫情的个人防护。</p><ol><li><p>公众日常生活中和出行时应正确佩戴一个一次性使用医用口罩或以上防护级别口罩并做好手卫生、遵守呼吸道礼仪。无需佩戴多个口罩或带呼吸阀的口罩，无需穿防护服。</p></li><li><p>召开会议时，应有效通风换气且社交距离1米以上。不应在人员拥挤、通风不良时仍不佩戴口罩。</p></li><li><p>无疑似/确诊病例时，居家环境清洁应以日常清洁通风为主，无需每日消毒。</p></li><li><p>超市购物缴费时，应间隔一米排队，戴好口罩，首选无接触支付。</p></li><li><p>乘坐轿厢式电梯时，应全程佩戴口罩、间隔站立并遵守呼吸道礼仪。</p></li><li><p>家长陪小朋友玩耍时，应培养孩子手卫生意识，及时纠正儿童吃手和玩具的不良习惯，并定时清洁双手和玩具。</p></li><li><p>乘坐公交车或地铁时，可佩戴手套，减少触摸公共部位，不要触碰口鼻眼。</p></li><li><p>用餐前，应在流动水下用洗手液或肥皂洗手，或用免洗手消毒剂揉搓双手。不应不洗手，直接用手抓取食物。</p></li><li><p>咳嗽打喷嚏时，应用纸巾遮住口鼻，然后将纸巾包好后置于垃圾桶内或采用肘臂遮挡。不应随地吐痰、用手捂或直接对他人咳嗽、打喷嚏。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>《项塔兰》为何如此令人震撼</title>
    <link href="/king/f40d27b8.html"/>
    <url>/king/f40d27b8.html</url>
    
    <content type="html"><![CDATA[<p>有人用“一部令人震撼的书”来评价《项塔兰》，我完全认同。在我看完全书合上书页时，我的第一感受也是“震撼”，这种感觉不只是来源于书中跌宕起伏、光怪陆离的内容，更有对人性的拷问，对终极命题的思索，以及作者在书中呈现出的哲人视角和诗样的语言。<br>有人说过这样的话，现实比艺术更精采。《项塔兰》其实是作者格里高利·大卫·罗伯兹的自传体小说，他一生的经历可谓比小说还精彩。他在本书自述中写道：“就我而言，我这一生的际遇错综复杂，一言难尽。我曾是在海洛因中失去理想的革命分子，在犯罪中失去操守的哲学家，在重型监狱中失去灵魂的人。当我翻过枪塔间的围墙逃出监狱以后，就变成我的祖国澳大利亚的头号通缉要犯。我逃到地球的另一端——印度。在那里加入孟买的黑帮。我干起军火走私、货物走私、制造假钞的勾当，在世界三大洲被关过、被揍过、饿过，还挨过刀子。我还打过仗，冲进枪林弹雨中，结果大难不死。”<br>单就作者如此丰富的经历本身，《项塔兰》都足以提起阅读人的兴趣，而且阅读的过程，真的能让人身陷其中，欲罢不能。可以说，这是我今年读到的最畅快淋漓的一本书，因为格里高利·大卫·罗伯兹讲故事的能力一流，你会身不由己沉浸在悬念丛生、紧扣心弦的故事情节中；而从另一个角度来说，如果仅把它作为一本了解印度的旅游读物，你会感受到孟买这个城市的酸腐和甜腻、自由和狂野；如果你再带着好奇，去一窥黑社会、贫民窟和阿富汗战争的真实一面，也许你会和我一样，在作者的复杂人生经历里、在他的罪恶与救赎中感受到劫后余生的超然。<br>作者在开篇中就写到——“我花了很长的岁月，走过大半个世界，才真正学到什么是爱、什么是命运，以及我们所做的抉择。我被拴在墙上遭受拷打时，才顿悟这个真谛。不知为何，就在我内心发出呐喊之际，我意识到，即使镣铐加身，一身血污，孤立无助，我仍然是自由之身，我可以决定是要痛恨拷打我的人，还是原谅他们。我知道，这听起来似乎算不了什么，但在镣铐加身、痛苦万分的当下，当镣铐是你唯一仅有的，那份自由将带给你无限的希望。是要痛恨，还是要原谅，这抉择足以决定人一生的际遇。”<br>很明显，这不是一本讲述作者曲折冒险逃亡经历的书，而是思考有关爱、命运、抉择、自由等人生命题的书。作者也是后来才明白，在他拿着伪造证件降落孟买那刻起，他的逃亡之路就演变成了救赎之路。<br>起初他以为从澳洲看守最严密的监狱逃脱，偷渡至孟买──尽管潮湿、闷热、熙攘拥挤，但这个城市能让他在人间蒸发。带着假名字、假护照和不可告人的过去，他在印度导游的带领下进入孟买底层社会，和乞丐、妓女、苦修圣者、演员、士兵，以及来自世界各地的逃亡者一起，在这个城市将开启新的人生旅程。他成为了第一个住进贫民窟的白人，凭着一只急救箱，当上了受人尊敬、没有执照但免费为人看病的医生；他爱上了孟买，爱上了这个城市随处可见受贿的警察、主持公道的黑帮、有组织的游民、大剌揽客的妓女、从香烟槟榔到毒品都卖的摊贩，以及人人脸上毫不吝惜的笑容；他学习用印度语、孟拉语和当地人沟通，他还从偏僻村落的老嬷嬷口中，得到“项塔兰”这个名字，印度语意为“和平之人”，那时还没人知道，其实他是个恶名昭著的通缉犯；他邂逅了美丽的卡拉，一个拥有聪明、秘密和湖水绿眼眸的女人，让人在她身上找到天使翅膀的同时，也看见魔鬼的犄角。他视哈德汗为父亲。哈德汗是孟买家喻户晓的黑帮老大、圣人暨哲学家，并在清真寺开讲神学和伦理学，吸引各宗教的学者和学生慕名而来。通过哈德汗，他被黑帮吸收，认真学习各种“专业”，包括如何洗钱、伪造护照、走私黄金、贩卖军火等，甚至加入了宝莱坞电影圈、穆斯林游击队，他还参与了阿富汗与前苏联的战争，在战场中九死一生，侥幸活命。他一路走来渐渐才发现，他在孟买的一切行动，其实都在哈德汗的掌控中，他以为的自由，不过是一步步陷入谜团与阴谋的纠缠中……<br>很难想象命运要怎么引领他作出生命轨迹的巨变，成为一个真正的和平之人。直到多年以后，在他回看自己走过的人生轨迹时，才有所顿悟：在贫民窟里，他跟当地人学会了用摇头晃脑的肢体语言表达善意；他学会了完全不用手机，抛弃现代文明；他学会了像印度人一样不脱衣服洗澡，他也在和村民的劳作中学会了印度人惯有的乐天知命，因为千年以来，人和自然的相处已经留下了最可靠的预示，在这样的经历中，他也第一次感悟到生命之河的宽度。他视为父亲的哈德拜叱咤黑白两道，为人极有原则并有心收买扶持他，从小缺失父爱的他，为逃避警方的追捕，也想给自己找一个保护伞，他投身黑帮门下，虽身处犯罪漩涡，但从未违背内心的原则。他为身陷囹圄的训熊人保释，为无法逃离妓院的少女不惜得罪当地的狠角色周夫人，既使上过战场，他的手上也从未沾染过杀人的鲜血。相反，他是黑帮兄弟的好朋友，是贫民百姓心中的英雄。<br>即使在得知他最爱的人卡拉和他视为父亲的哈德拜都利用了他，甚至于在他二度入狱遭到非人折磨差点死掉时，他仍然选择了原谅。他说：“我接受命运，甚至欢迎命运。我心想，最终我会得到我应得的。不知为什么，那想法让我变得纯净、清澈。我感受到的不是恐惧，而是希望，希望他会活着。我跟他之间完了，我不想再见到他，但看着他骑马进入那白影幢幢的山谷时，我希望他会活着。我祷告，祈求他平安无事，祈求他感受到我的心碎，我爱他。我爱他。”“人无法杀掉爱，甚至，无法用恨杀掉爱。人可以杀掉陷入爱河的心情、被爱填满的感觉，甚至杀掉可爱迷人的特质。人可以把它们全杀掉，或把它们化为麻木、强烈、沉重的遗憾，但无法杀掉爱本身。爱是狂热的追寻，追寻自己以外的真理。一旦真诚而彻底地感受到爱，爱就永远不死。每个爱的行动，每个付出真情的时刻，都是宇宙善的一部分。那是上帝的一部分，或者，那就是我们所谓的上帝，而且它永远不死。”<br>毫无疑问，正是因为，他在一路行进的过程中不断地选择爱、选择原谅、选择放下自己的羞愧和内疚，直面自己的孤单和脆弱，才拯救了他自己。<br>在全书结尾处，作者写下了下面的文字——“我原本一直认为命运是不能改变的，在我们每个人生下来时就命定了，就和星体的运行路线一样永远不变。但这时我猛然理解到，人生比那还奇特、还美。事实是，不管人置身哪种赛局里，不管运气多好或多坏，人都可以靠一个念头或一个爱的作为，彻底改变人生。”<br>格里高利·大卫·罗伯兹曾说：“年轻的时候，我会盲目寻求意义，把一些知识像碎片一样拼凑起来，就像某些鸟喜欢找些闪闪的东西来装点它们的窝。” 而如今的他，抛开所有外界的注意力，和亲人、爱人开始隐居生活，专注于自己想做的事。他出狱后写作的这本厚度近千页的《项塔兰》能够一鸣惊人，并非偶然。你能想象吗，哪怕是在监狱中，他也没有停止写作——“我曾经是作家。在澳大利亚时，我二十出头就在写作了。当我婚姻破裂，失去女儿的监护权，把人生葬送在毒品、犯罪、入狱、逃狱时，我才刚出版第一部作品，正要在文坛扬名立万。即使在逃亡中，写作仍是我每日的习惯，仍是我例行作息的一部分……我从未停止写作，不管人在何处，不管处境如何，我都没改变这习惯。初来孟买那几个月的生活，我之所以能记得这么清楚，就是每当我一独处，就写下我对那些新朋友的看法，还有跟他们交谈的内容。写作是保住我性命的功臣之一，每日将生活点滴行诸文字，天天如此训练，如此化繁为简，有助于我克服羞愧和随之而来的绝望。”<br>格里高利换了很多名字，也从一个身份转换成另一个身份，但作为一个作家的身份他始终没有忘记——“写作是我的第一本能。当我被关在亚瑟路监狱里面，戴着脚镣，被监狱看守折磨，当时我觉得就要把这样的经历写下来，这个念头在血液中充斥，想要去猛咬看守的警棍。作为一个作家，作为一个自由的人，可以把自己写的东西在全世界发表，意识到，这才是我现在内心深处，最热切的渴望。”</p>]]></content>
    
    
    
    <tags>
      
      <tag>小说，读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈《围城》</title>
    <link href="/king/fde7e8f6.html"/>
    <url>/king/fde7e8f6.html</url>
    
    <content type="html"><![CDATA[<p><strong>“没有梦，没有感觉，人生最原始的睡，同时也是死的样品。”</strong></p><p>有的人死了他还活着，有的人活着他已经死了，方鸿渐30岁以后的生活，就符合后一种。</p><p>事业上，方鸿渐自命不凡却一事无成，每份工作，都是在糊里糊涂中就遭了嫌弃。</p><p>爱情上，他茫然被动，不喜欢苏文纨，却没勇气拒绝，倾心唐晓芙，却不会争取。</p><p>朋友提醒他，孙柔嘉心机深，对他煞费苦心，他却觉得“承她瞧得起，应当珍惜她”。</p><p>最后，方鸿渐落入孙柔嘉精心编织的网中，顺水推舟结了婚，种下了他们往后余生，日复一日争吵的因。</p><p>有一句话说：“生命绚烂的人，都是受到某些力量所驱使。”</p><p><strong>而有些人，睡着和醒着，都是在无意义地游荡人间。</strong></p><p>不知所因，不知所终，任由人世洪流裹挟着前行，最终遭受到了生活的重击。</p><p>没有梦，没有想法的一生，就无异于死的样品。</p><p><strong>无论前方道路是平坦宽阔，还是荆棘坎坷，不浑浑噩噩，才能掌控人生。</strong></p><p><strong>“一个人，到了20岁还不狂，这个人是没出息的；到了30岁还狂，也是没出息的。”</strong></p><p>20 岁的方鸿渐，把少年人的丰满理想和仗剑走天涯的劲头，体现得淋漓尽致。</p><p>但这样的性格，保持到了30岁，就成了一种悲哀。</p><p>明明能力不足，却狂妄地不愿承认，只一味找理由开脱。</p><p>心高气傲、自命不凡地做一些对抗现实的傻事，偏执地想证明自己的与众不同。</p><p>最后让自己的处境，一岁不如一岁。</p><p><strong>一个人20岁，如果不狂，就体现不出来年轻人的志气；但到了30岁还狂，往往就要吃很多生活的苦。</strong></p><p>成长的青穗仰头向天，成熟的水稻弯腰向下。</p><p>人都是要随着岁月，慢慢成长的。</p><p>年轻的时候，意气风发是因为对未来充满希望，狂，让年轻人敢于去拼搏探索。</p><p>但随着年纪的增长，我们终要学会在阅历中，认识到自己的浅薄和不足。</p><p>知道世界之大，接受自己也有平凡的一面，踏实做事，才能在人生的处处围城中好好生活。</p><p><strong>“时间对友谊的磨蚀，好比水流过石子，反而把它洗濯得光洁了。”</strong></p><p>方鸿渐刚认识赵辛楣时，两人关系其实一般。</p><p>但当方鸿渐和前岳父闹翻，找不到工作时，赵辛楣却为他介绍了三闾大学教师一职。</p><p>方鸿渐被三闾大学解聘，后来的工作也是赵辛楣推荐而来。</p><p>有人说：<strong>“这世上所有好的感情，都必然经得起时间的考验。”</strong></p><p>有的朋友，会因为你的荣耀得失，来了又去。</p><p>也有的朋友，能经得住岁月的沉淀，不管晴天雨天，都会在你身边。</p><p><strong>路遥知马力，日久见人心。</strong></p><p>时间是一把好筛子，友情中，那些眼睛看不明，耳朵听不到的本质东西，都会在时间面前显现出来。</p><p>假的，蒙尘不见；真的，光洁亮眼。</p><p>朋友好不好，时间会证明。</p><p><strong>“老实说，不管你跟谁结婚，结婚以后，你总会发现你娶的不是原来的人，换了另外一个。”</strong></p><p>结婚是什么？</p><p><strong>结婚是两个陌生的成年人，生活到了一起。</strong></p><p>不管结婚时，是怀着怎样甜蜜的心情说出的“我愿意”。</p><p>婚后的生活，其实都会和想象中的有差距。</p><p>因为结婚是一瞬间，婚姻却是漫长的余生。</p><p>方鸿渐和孙柔嘉结婚前，孙柔嘉认为方鸿渐洒脱不羁，方鸿渐觉得她温柔体贴。</p><p>但这种感觉，在婚后很快就变得面目全非。</p><p>在一段关系开始的时候，激情会激发双方强烈的吸引力，彼此都会释放出自己的优点。</p><p>但随着日子中各种问题出现，大家都不可避免地会释放出自身的缺点。</p><p>曾经你侬我侬的两个人，经过婚姻中的柴米油盐、岁月里的鸡毛蒜皮，各自在对方的眼中，都不是原来的那个人了。</p><p><strong>不会有十全十美的恋人，也没有完美无瑕疵的婚姻。</strong></p><p>所谓对的婚姻，不过是和已经选择的眼前人，彼此理解、包容，在吵吵闹闹中相扶到老。</p><p><strong>“我们对采摘不到的葡萄，不但想象它酸，也很可能想象它是分外地甜。”</strong></p><p>王小波曾说：</p><p>“人生在世，会遇到一些好事，还会遇到一些坏事，好事承担得起，坏事也承受得住，就这样坦坦荡荡做个寻常人也不坏。”</p><p>未来的事情就像薛定谔的猫，没有真正发生的时候，你永远也不会知道结局。</p><p>不如保持一颗平常心，聚焦当下能做的事。</p><p>人这一生，成功失败，都会经历，高低起伏，都是生命的常态。</p><p>混装的巧克力，随意拿起一颗，没人知道会是什么味道。</p><p>正在做的事情，不到最后，谁也不能预知成功失败。</p><p><strong>人生是一场修行，它可能不会如你想的那么好，但也不会如你想的那么糟。</strong></p><p>古人说，山重水复疑无路，柳暗花明又一村。</p><p>人生路上，可能阳光明媚，也可能大雨滂沱。</p><p>未来充满了不确定性，保持一颗平常心，不过分期待，也不过分悲观。</p><p>坦然面对得失，好的事情，才会不期而遇。</p><p><strong>“流言这东西，比流感蔓延的速度更快，比流星所蕴含的能量更巨大，比流氓更具有恶意，比流产更能让人心力憔悴。”</strong></p><p>佛语说：“在世间十种恶业中，口恶是最大的恶。”</p><p>流言是写在水上的字，注定不持久，但是裹挟着恶意，传得飞快，给当事人带来难以想象的伤害。</p><p>那些无中生有的事，大多都是从流言而来。</p><p>世上不会有完全相同的人生，生活各有千秋，事情各有各的缘由。</p><p>不要因为不了解，就轻易地想当然。</p><p>正所谓：流言难尽，乱世如刀。</p><p><strong>有时候，看似柔软的舌头，却可以毁了一个人的一生。</strong></p><p>语言是这个世界上最锋利的兵器。</p><p>管好自己的嘴巴，做一个能止住流言的智者，是人生很重要的一件事。</p><p>有人说，《围城》是读一遍有一遍感觉的书，因为经历得越多，理解得越多。</p><p>故事也许是虚构的，但反映的是人间事实。</p><p><strong>人生的真相，全都藏在文字背后。</strong></p><p>读别人的故事，让我们对自己的人生，有了更多的思考。</p><p>愿看过这篇文章的你，都能在人事复杂中，一边披荆斩棘，一边打破内心的围城。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>职场中的囚笼</title>
    <link href="/king/a2006d34.html"/>
    <url>/king/a2006d34.html</url>
    
    <content type="html"><![CDATA[<p>人生中的大部分时间都是在工作和职场中度过的，但在传统的职场中，很多人会感觉被困在一种“囚笼”之中。这种囚笼，不仅仅是外界的限制和不良因素，更多的是来自于内部的焦虑、虚荣、惰性和思维定势。</p><h2 id="职场中的囚笼如何而来"><a href="#职场中的囚笼如何而来" class="headerlink" title="职场中的囚笼如何而来"></a>职场中的囚笼如何而来</h2><p>第一个囚笼是焦虑带来的。职场是一个竞争激烈的地方，尤其是在当前经济不景气，失业率居高不下的情况下，许多人恐惧失去自己的工作，害怕面临挑战和变化。在这种情况下，人们会不断地保守和重复过去的做法，限制了自己的职业发展和创新能力。</p><p>第二个囚笼则是虚荣心所造成的。许多人在职场中追求高薪、高职位、高地位，渴望比别人更出色，但这种激进的竞争心态会导致长期专注个人而非团队利益，视培养和发展下属为降低自己的竞争力。由于长期缺乏共情、同理心和团队精神，他们最终会发现自己在人际关系中越来越孤立，让自己陷入另一个囚笼中。</p><p>第三个囚笼是惰性所诱导的。职场中，很多人倾向于关注眼前的利益，而忽视长远的职业发展。他们陷入框架思维、不思考未来，不愿意承担风险和尝试新的事物。这种惯性越来越强，使得许多人难以开拓新的思路和找到新的发展机会。</p><p>最后一个囚笼是思维定势所构成的。很多职场人对世界、对工作、对事物都有自己的看法和理解。当环境发生变化时，他们的思维模式却很难跟随、更新和改变。往往只依靠自己的看法和经验去面对新的挑战，导致在新形势下逐渐失去竞争优势。</p><p>以上四个囚笼，是许多职场人所陷入的严重问题。解决这些困境需要从自我管理、自我认知、自我反思等方面入手，建立自我认真思考的习惯和团队精神，拓宽思维空间，跟随时代发展变化，以正确的态度来处理职场困难，才能最终较好地实现职业发展和职场成功。</p><h2 id="面对囚笼该如何冲破逆境"><a href="#面对囚笼该如何冲破逆境" class="headerlink" title="面对囚笼该如何冲破逆境"></a>面对囚笼该如何冲破逆境</h2><p>首先，职场中最容易让我们陷入困境的是失业。尤其是当我们失去工作时，我们可能会感到非常沮丧并丧失信心。此时，我们可能会怀疑自己的价值和职业道路，这很容易让我们陷入一个自我怀疑的连锁反应中，导致我们无法寻找到新的工作机会。</p><p>其次，职场中的劣迹斑斑也让我们处处难以避免。许多人面对着耸人听闻的工作场所欺凌、性骚扰、歧视、贪污等问题而无法抉择，甚至难以对他人发声。这些情况可能会让我们变得越来越孤独，不信任和对生活失去信心，让我们感到陷入了一个没有出路的所谓“囚笼”。</p><p>最后，许多人在职场中也面临着严重的工作压力。工作/生活平衡问题，没有足够的休息时间，工作目标和期限的迫切压力，所有这些问题都可能导致崩溃。在这种情况下，职场“囚笼”表现为难以逃脱的环境和氛围，工作环境缺乏配套措施，让我们不断地深陷困境。</p><p>那么，面对职场中的“囚笼”，我们该如何应对呢？首先，我们必须时刻提醒自己：职场是我们人生中的一部分，但它并不是全部。我们需要有自己的生活目标和兴趣爱好，保持积极的心态，调整自己的心态，并将挫折作为新的开始，寻找新的机会和可能性。其次，我们要有勇气表达自己的声音，保护自己的权益，挺身对抗职场中的不公和不道德行为，但同时也要学会寻求外部支持和资源，合理应对挑战。第三，我们要注重心理健康，与家人和朋友保持联系，建立健康的生活方式，包括运动、社交、娱乐和艺术等，以帮助我们战胜职场中的压力和困境。</p><p>总之，职场中确实存在许多困境，但我们只要学会应对，学会坚持，就不会陷入所谓的“囚笼”中。相信自己，期待最好的结果，你才能在职场中成长并获得成功。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>职场</tag>
      
      <tag>囚笼</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如果生活让人觉得焦躁，那一定是哪里出问题了</title>
    <link href="/king/fc16c803.html"/>
    <url>/king/fc16c803.html</url>
    
    <content type="html"><![CDATA[<p>人总是会有点追求，有了追求达不到这很难受。</p><p>这容易让人产生负面评价。</p><p>现在的社会，追求太单一了，而搞钱这个事情，机缘巧合极强。</p><p>也就是说大部分人可能都达不到自己的追求。</p><p>然后，就会觉得自己是不是哪里不够努力？</p><p>然后会有很多努力的选项提供给你，最后的状态就是，努力本身成了一种负担。</p><p>而一旦如此，努力就变得功利。</p><p>做了要有个结果，起码也要把卡打满。</p><p>不然就觉得自己非常不在状态。</p><p>有个人说的一句话很有意思“没有被爱照亮过的生命，存在本身就是一种羞愧”。</p><p>这话有两层含义。</p><p>一是人要有人爱才行，二是如果没被爱过就容易理不清自己的存在。</p><p>这其实是低水平的自体感。</p><p>因为对自我的认知来源于她人的映射。</p><p>不过这是一种很好的调整状态的方式，因为亲密关系是极其容易建立意义感的。</p><p>而高级的自体感在于，我知道自己很好。</p><p>我自己做的事走在不一定正确，但肯定合理的轨迹上。</p><p>知道什么事情是重要的，知道努力或改变不一定有结果，反正顺势而为。</p><p>不说“尽人事听天命”，但至少不会自怨自艾。</p><p>这种自体感不依赖于外物，就算有外界的眼光去批判，也不会因此而焦躁。</p><p>更不至于自我批判到无所适从。</p><p>就有点类似于梭罗所写的，每个圆心到圆周都可以画出无数条半径。</p><p>人大可以选择其一，或者改变，或者坚守。</p><p>或者坚守后改变。</p><p>把有限的人生，每花一秒在焦躁上面，都是浪费。</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我开始有点喜欢告五人了</title>
    <link href="/king/a8e48d6d.html"/>
    <url>/king/a8e48d6d.html</url>
    
    <content type="html"><![CDATA[<center>    <figure>        <img src="https://d.ifengimg.com/q100/img1.ugc.ifeng.com/newugc/20201222/14/wemedia/5a3377c3260d6fd635dafb6c5c6efcd28d40ae0c_size842_w2000_h2588.jpg" width="200px" height="150px"/>        <img src="https://img1.baidu.com/it/u=3257159689,2752937869&fm=253&fmt=auto&app=138&f=JPEG?w=660&h=421" width="200px" height="150px"/>        <img src="https://res.klook.com/image/upload/v1576127345/admin-markdown/buypgi0vrfo5omdjqin5.jpg" width="200px" height="150px"/>    </figure></center><center>    <figure>        <img src="https://img2.baidu.com/it/u=3974650856,354637334&fm=253&fmt=auto&app=138&f=JPEG?w=675&h=500" width="200px" height="150px"/>        <img src="https://img2.baidu.com/it/u=1780908297,1532504565&fm=253&fmt=auto&app=138&f=JPEG?w=802&h=500" width="200px" height="150px"/>        <img src="https://img2.baidu.com/it/u=1851682952,3529276881&fm=253&fmt=auto&app=120&f=JPEG?w=667&h=500" width="200px" height="150px"/>    </figure></center>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Stream常用技巧</title>
    <link href="/king/ccf67fbd.html"/>
    <url>/king/ccf67fbd.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、查询方法"><a href="#一、查询方法" class="headerlink" title="一、查询方法"></a>一、查询方法</h1><h2 id="1-1-forEach"><a href="#1-1-forEach" class="headerlink" title="1.1 forEach()"></a>1.1 forEach()</h2><p>示例:</p><div class="code-wrapper"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foreachTese</span><span class="hljs-params">()</span>&#123;     <span class="hljs-comment">//遍历用户列表</span>     System.out.println(<span class="hljs-string">&quot;---------------输出方法一-----------------&quot;</span>);     users.forEach(item -&gt; System.out.println(item));     System.out.println(<span class="hljs-string">&quot;---------------输出方法二-----------------&quot;</span>);     users.forEach(System.out::println); &#125;</code></pre></div><p>输出：</p><div class="code-wrapper"><pre><code class="hljs routeros">---------------输出方法一-----------------User(<span class="hljs-attribute">id</span>=81975, <span class="hljs-attribute">name</span>=张帅, <span class="hljs-attribute">gender</span>=男, <span class="hljs-attribute">age</span>=55, <span class="hljs-attribute">department</span>=人事部, <span class="hljs-attribute">salary</span>=4170.00)User(<span class="hljs-attribute">id</span>=87030, <span class="hljs-attribute">name</span>=李杰, <span class="hljs-attribute">gender</span>=男, <span class="hljs-attribute">age</span>=59, <span class="hljs-attribute">department</span>=人事部, <span class="hljs-attribute">salary</span>=3960.00)User(<span class="hljs-attribute">id</span>=20693, <span class="hljs-attribute">name</span>=乔姗姗, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=32, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=4450.00)User(<span class="hljs-attribute">id</span>=36827, <span class="hljs-attribute">name</span>=刘亚飞, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=33, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=2420.00)User(<span class="hljs-attribute">id</span>=30706, <span class="hljs-attribute">name</span>=杜十娘, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=23, <span class="hljs-attribute">department</span>=客服部, <span class="hljs-attribute">salary</span>=4450.00)User(<span class="hljs-attribute">id</span>=36827, <span class="hljs-attribute">name</span>=刘鹏飞, <span class="hljs-attribute">gender</span>=男, <span class="hljs-attribute">age</span>=20, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=2420.00)User(<span class="hljs-attribute">id</span>=30706, <span class="hljs-attribute">name</span>=杜十娘, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=18, <span class="hljs-attribute">department</span>=客服部, <span class="hljs-attribute">salary</span>=4450.00)---------------输出方法二-----------------User(<span class="hljs-attribute">id</span>=81975, <span class="hljs-attribute">name</span>=张帅, <span class="hljs-attribute">gender</span>=男, <span class="hljs-attribute">age</span>=55, <span class="hljs-attribute">department</span>=人事部, <span class="hljs-attribute">salary</span>=4170.00)User(<span class="hljs-attribute">id</span>=87030, <span class="hljs-attribute">name</span>=李杰, <span class="hljs-attribute">gender</span>=男, <span class="hljs-attribute">age</span>=59, <span class="hljs-attribute">department</span>=人事部, <span class="hljs-attribute">salary</span>=3960.00)User(<span class="hljs-attribute">id</span>=20693, <span class="hljs-attribute">name</span>=乔姗姗, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=32, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=4450.00)User(<span class="hljs-attribute">id</span>=36827, <span class="hljs-attribute">name</span>=刘亚飞, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=33, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=2420.00)User(<span class="hljs-attribute">id</span>=30706, <span class="hljs-attribute">name</span>=杜十娘, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=23, <span class="hljs-attribute">department</span>=客服部, <span class="hljs-attribute">salary</span>=4450.00)User(<span class="hljs-attribute">id</span>=36827, <span class="hljs-attribute">name</span>=刘鹏飞, <span class="hljs-attribute">gender</span>=男, <span class="hljs-attribute">age</span>=20, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=2420.00)User(<span class="hljs-attribute">id</span>=30706, <span class="hljs-attribute">name</span>=杜十娘, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=18, <span class="hljs-attribute">department</span>=客服部, <span class="hljs-attribute">salary</span>=4450.00)</code></pre></div><h2 id="1-2-filter-T-gt-boolean"><a href="#1-2-filter-T-gt-boolean" class="headerlink" title="1.2 filter(T -&gt; boolean)"></a>1.2 filter(T -&gt; boolean)</h2><p>示例:获取用户年龄大于20岁的用户列表。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">filterTest</span><span class="hljs-params">()</span>&#123;    <span class="hljs-comment">//筛选出大于20岁的用户</span>     List&lt;User&gt; collect = users.stream().filter(item -&gt; item.getAge() &gt; <span class="hljs-number">20</span>).collect(Collectors.toList());     collect.forEach(System.out::println); &#125;</code></pre></div><p>输出:</p><div class="code-wrapper"><pre><code class="hljs java">User(id=<span class="hljs-number">81975</span>, name=张帅, gender=男, age=<span class="hljs-number">55</span>, department=人事部, salary=<span class="hljs-number">4170.00</span>)User(id=<span class="hljs-number">87030</span>, name=李杰, gender=男, age=<span class="hljs-number">59</span>, department=人事部, salary=<span class="hljs-number">3960.00</span>)User(id=<span class="hljs-number">20693</span>, name=乔姗姗, gender=女, age=<span class="hljs-number">32</span>, department=研发部, salary=<span class="hljs-number">4450.00</span>)User(id=<span class="hljs-number">36827</span>, name=刘亚飞, gender=女, age=<span class="hljs-number">33</span>, department=研发部, salary=<span class="hljs-number">2420.00</span>)User(id=<span class="hljs-number">30706</span>, name=杜十娘, gender=女, age=<span class="hljs-number">23</span>, department=客服部, salary=<span class="hljs-number">4450.00</span>)</code></pre></div><h2 id="1-3-findAny-和-findFirst"><a href="#1-3-findAny-和-findFirst" class="headerlink" title="1.3 findAny() 和 findFirst()"></a>1.3 findAny() 和 findFirst()</h2><h4 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h4><p>示例：查询一个姓刘的用户</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findAnyTest</span><span class="hljs-params">()</span>&#123;        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> users.stream().filter(item -&gt; item.getName().startsWith(<span class="hljs-string">&quot;刘&quot;</span>)).findFirst().orElse(<span class="hljs-literal">null</span>);        System.out.println(user);    &#125;</code></pre></div><p>输出:</p><div class="code-wrapper"><pre><code class="hljs routeros">User(<span class="hljs-attribute">id</span>=36827, <span class="hljs-attribute">name</span>=刘亚飞, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=33, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=2420.00)</code></pre></div><h4 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h4><p>示例：查询一个姓刘的用户</p><div class="code-wrapper"><pre><code class="hljs pgsql">@Test   <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> findAnyTest()&#123;        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = users.stream().<span class="hljs-keyword">filter</span>(item -&gt; item.getName().startsWith(&quot;刘&quot;)).findAny().orElse(<span class="hljs-keyword">null</span>);        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>);    &#125;</code></pre></div><p>输出：</p><div class="code-wrapper"><pre><code class="hljs routeros">User(<span class="hljs-attribute">id</span>=36827, <span class="hljs-attribute">name</span>=刘亚飞, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=33, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=2420.00)</code></pre></div><p>注意：findFirst() 和 findAny() 都是获取列表中的第一条数据，但是findAny()操作，返回的元素是不确定的，对于同一个列表多次调用findAny()有可能会返回不同的值。使用findAny()是为了更高效的性能。如果是数据较少，串行地情况下，一般会返回第一个结果，如果是并行（parallelStream并行流）的情况，那就不能确保是第一个。</p><p>例如：使用parallelStream并行流，findAny() 返回的就不一定是第一条数据。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//parallelStream方法能生成并行流，使用findAny返回的不一定是第一条数据</span> <span class="hljs-meta">@Test</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findAnyTest</span><span class="hljs-params">()</span>&#123;         <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> users.parallelStream().filter(item -&gt; item.getName().startsWith(<span class="hljs-string">&quot;刘&quot;</span>)).findAny().orElse(<span class="hljs-literal">null</span>);         System.out.println(user);     &#125;输出:User(id=<span class="hljs-number">36827</span>, name=刘鹏飞, gender=男, age=<span class="hljs-number">20</span>, department=研发部, salary=<span class="hljs-number">2420.00</span>)</code></pre></div><h2 id="1-4-map-T-gt-R-和-flatMap-T-gt-Stream"><a href="#1-4-map-T-gt-R-和-flatMap-T-gt-Stream" class="headerlink" title="1.4 map(T -&gt; R) 和 flatMap(T -&gt; Stream)"></a>1.4 map(T -&gt; R) 和 flatMap(T -&gt; Stream)</h2><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>使用 map() 将流中的每一个元素 T 映射为 R（类似类型转换）。</p><p>使用 flatMap() 将流中的每一个元素 T 映射为一个流，再把每一个流连接成为一个流。</p><p>示例:使用 map() 方法获取用户列表中的名称列。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mapTest</span><span class="hljs-params">()</span>&#123;        List&lt;String&gt; nameList = users.stream().map(User::getName).collect(Collectors.toList());        nameList.forEach(System.out::println);&#125;</code></pre></div><p>输出：</p><div class="code-wrapper"><pre><code class="hljs">张帅李杰乔姗姗刘亚飞肖飞刘鹏飞杜十娘</code></pre></div><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><p>示例:使用 flatMap() 将流中的每一个元素连接成为一个流</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flatMapTest</span><span class="hljs-params">()</span>&#123;        List&lt;String&gt; cityList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();        cityList.add(<span class="hljs-string">&quot;北京；上海；深圳；&quot;</span>);        cityList.add(<span class="hljs-string">&quot;浙江；西安；杭州；&quot;</span>);        <span class="hljs-comment">//分隔城市列表，使用 flatMap() 将流中的每一个元素连接成为一个流。</span>        cityList = cityList.stream()                .map(city -&gt; city.split(<span class="hljs-string">&quot;；&quot;</span>))                .flatMap(Arrays::stream)                .collect(Collectors.toList());        <span class="hljs-comment">//遍历城市列表</span>        cityList.forEach(System.out::println);&#125;</code></pre></div><p>输出：</p><div class="code-wrapper"><pre><code class="hljs">北京上海深圳浙江西安杭州</code></pre></div><h2 id="1-5-distinct"><a href="#1-5-distinct" class="headerlink" title="1.5 distinct()"></a>1.5 distinct()</h2><p>使用 distinct() 方法可以去除重复的数据。</p><p>示例：去除列别中重复的部门数据</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">distinctTest</span><span class="hljs-params">()</span>&#123;       List&lt;String&gt; collect = users.stream().map(User::getDepartment).distinct().collect(Collectors.toList());       collect.forEach(System.out::println);&#125;</code></pre></div><p>输出：</p><div class="code-wrapper"><pre><code class="hljs">人事部研发部客服部</code></pre></div><h2 id="1-6-limit-long-n-和-skip-long-n"><a href="#1-6-limit-long-n-和-skip-long-n" class="headerlink" title="1.6 limit(long n) 和 skip(long n)"></a>1.6 limit(long n) 和 skip(long n)</h2><p>limit(long n) 方法用于返回前n条数据；skip(long n) 方法用于跳过前n条数据。</p><p>示例：跳过第一条数据，取三位员工的信息</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">limitAndSkip</span><span class="hljs-params">()</span>&#123;        <span class="hljs-comment">//跳过第一条数据，取前三位员工</span>        List&lt;User&gt; collect = users.stream().skip(<span class="hljs-number">1</span>).limit(<span class="hljs-number">3</span>).collect(Collectors.toList());        collect.forEach(System.out::println);&#125;</code></pre></div><p>输出：</p><div class="code-wrapper"><pre><code class="hljs routeros">User(<span class="hljs-attribute">id</span>=87030, <span class="hljs-attribute">name</span>=李杰, <span class="hljs-attribute">gender</span>=男, <span class="hljs-attribute">age</span>=59, <span class="hljs-attribute">department</span>=人事部, <span class="hljs-attribute">salary</span>=3960.00)User(<span class="hljs-attribute">id</span>=20693, <span class="hljs-attribute">name</span>=乔姗姗, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=32, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=4450.00)User(<span class="hljs-attribute">id</span>=36827, <span class="hljs-attribute">name</span>=刘亚飞, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=33, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=2420.00)</code></pre></div><h1 id="二、判断方法"><a href="#二、判断方法" class="headerlink" title="二、判断方法"></a>二、判断方法</h1><h2 id="2-1-anyMatch-T-gt-boolean"><a href="#2-1-anyMatch-T-gt-boolean" class="headerlink" title="2.1 anyMatch(T -&gt; boolean)"></a>2.1 anyMatch(T -&gt; boolean)</h2><p>使用 anyMatch(T -&gt; boolean) 判断流中是否有一个元素匹配给定的 T -&gt; boolean 条件。</p><p>示例：查看员工列表中是否包含名叫刘亚飞的员工</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">anyMatchTest</span><span class="hljs-params">()</span>&#123;        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> users.stream().anyMatch(item -&gt; item.getName().equals(<span class="hljs-string">&quot;刘亚飞&quot;</span>));        System.out.println(flag);&#125;</code></pre></div><p>输出：</p><div class="code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-literal">true</span></code></pre></div><h2 id="2-2-allMatch-T-gt-boolean"><a href="#2-2-allMatch-T-gt-boolean" class="headerlink" title="2.2 allMatch(T -&gt; boolean)"></a>2.2 allMatch(T -&gt; boolean)</h2><p>使用 allMatch(T -&gt; boolean) 判断流中是否所有元素都匹配给定的 T -&gt; boolean 条件。</p><p>示例：判断员工薪水是否都大于5000</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">allMatchTest</span><span class="hljs-params">()</span>&#123;    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> users.stream().allMatch(item -&gt; item.getSalary().compareTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">5000</span>)) &gt; <span class="hljs-number">0</span>);    System.out.println(flag);&#125;</code></pre></div><p>输出：</p><div class="code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-literal">false</span></code></pre></div><h2 id="2-3-noneMatch-T-gt-boolean"><a href="#2-3-noneMatch-T-gt-boolean" class="headerlink" title="2.3 noneMatch(T -&gt; boolean)"></a>2.3 noneMatch(T -&gt; boolean)</h2><p>使用 noneMatch(T -&gt; boolean) 流中是否没有元素匹配给定的 T -&gt; boolean 条件。</p><p>示例：判断员工中没有童工</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">noneMatchTest</span><span class="hljs-params">()</span>&#123;       <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> users.stream().noneMatch(item -&gt; item.getAge() &lt; <span class="hljs-number">18</span>);       System.out.println(flag); &#125;</code></pre></div><p>输出：</p><div class="code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-literal">true</span></code></pre></div><p>ps:该公司合法经营未使用童工</p><h1 id="三、统计方法"><a href="#三、统计方法" class="headerlink" title="三、统计方法"></a>三、统计方法</h1><h2 id="3-1-reduce-T-T-gt-T-和-reduce-T-T-T-gt-T"><a href="#3-1-reduce-T-T-gt-T-和-reduce-T-T-T-gt-T" class="headerlink" title="3.1 reduce((T, T) -&gt; T) 和 reduce(T, (T, T) -&gt; T)"></a>3.1 reduce((T, T) -&gt; T) 和 reduce(T, (T, T) -&gt; T)</h2><p>使用 reduce((T, T) -&gt; T) 和 reduce(T, (T, T) -&gt; T) 用于组合流中的元素，如求和，求积，求最大值等。</p><p>示例：求出最低薪水、最高薪水以及薪水总和</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduceTest</span><span class="hljs-params">()</span>&#123;    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">minSalary</span> <span class="hljs-operator">=</span> users.stream().map(User::getSalary).reduce(BigDecimal::min).get();    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">maxSalary</span> <span class="hljs-operator">=</span> users.stream().map(User::getSalary).reduce(BigDecimal::max).get();    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">sumSalary</span> <span class="hljs-operator">=</span> users.stream().map(User::getSalary).reduce(BigDecimal::add).get();    System.out.println(<span class="hljs-string">&quot;minSalary = &quot;</span> + minSalary);    System.out.println(<span class="hljs-string">&quot;maxSalary = &quot;</span> + maxSalary);    System.out.println(<span class="hljs-string">&quot;sumSalary = &quot;</span> + sumSalary);&#125;</code></pre></div><p>输出：</p><div class="code-wrapper"><pre><code class="hljs abnf"><span class="hljs-attribute">minSalary</span> <span class="hljs-operator">=</span> <span class="hljs-number">2420.00</span><span class="hljs-attribute">maxSalary</span> <span class="hljs-operator">=</span> <span class="hljs-number">4450.00</span><span class="hljs-attribute">sumSalary</span> <span class="hljs-operator">=</span> <span class="hljs-number">26320.00</span></code></pre></div><h2 id="3-2-mapToInt-T-gt-int-、mapToDouble-T-gt-double-、mapToLong-T-gt-long"><a href="#3-2-mapToInt-T-gt-int-、mapToDouble-T-gt-double-、mapToLong-T-gt-long" class="headerlink" title="3.2 mapToInt(T -&gt; int) 、mapToDouble(T -&gt; double) 、mapToLong(T -&gt; long)"></a>3.2 mapToInt(T -&gt; int) 、mapToDouble(T -&gt; double) 、mapToLong(T -&gt; long)</h2><p>int sumVal = userList.stream().map(User::getAge).reduce(0,Integer::sum)；计算元素总和的方法其中暗含了装箱成本，map(User::getAge) 方法过后流变成了 Stream 类型，而每个 Integer 都要拆箱成一个原始类型再进行 sum 方法求和，这样大大影响了效率。针对这个问题 Java 8 有良心地引入了数值流 IntStream, DoubleStream, LongStream，这种流中的元素都是原始数据类型，分别是 int，double，long。3.3 counting() 和 count()</p><h2 id="3-3-counting-和-count"><a href="#3-3-counting-和-count" class="headerlink" title="3.3 counting() 和 count()"></a>3.3 counting() 和 count()</h2><p> 使用 counting() 和 count() 可以对列表数据进行统计。</p><h2 id="3-4-summingInt-、summingLong-、summingDouble"><a href="#3-4-summingInt-、summingLong-、summingDouble" class="headerlink" title="3.4 summingInt()、summingLong()、summingDouble()"></a>3.4 summingInt()、summingLong()、summingDouble()</h2><p>用于计算总和，需要一个函数参数。</p><h2 id="3-5-averagingInt-、averagingLong-、averagingDouble"><a href="#3-5-averagingInt-、averagingLong-、averagingDouble" class="headerlink" title="3.5 averagingInt()、averagingLong()、averagingDouble()"></a>3.5 averagingInt()、averagingLong()、averagingDouble()</h2><p>用于计算平均值。</p><h2 id="3-6-summarizingInt-、summarizingLong-、summarizingDouble"><a href="#3-6-summarizingInt-、summarizingLong-、summarizingDouble" class="headerlink" title="3.6 summarizingInt()、summarizingLong()、summarizingDouble()"></a>3.6 summarizingInt()、summarizingLong()、summarizingDouble()</h2><p>这三个方法比较特殊，比如 summarizingInt 会返回 IntSummaryStatistics 类型。</p><h2 id="3-7-BigDecimal类型的统计"><a href="#3-7-BigDecimal类型的统计" class="headerlink" title="3.7 BigDecimal类型的统计"></a>3.7 BigDecimal类型的统计</h2><p>对于资金相关的字段，通常会使用BigDecimal数据类型。</p><h1 id="四、排序方法"><a href="#四、排序方法" class="headerlink" title="四、排序方法"></a>四、排序方法</h1><h2 id="4-1-sorted-sorted-T-T-gt-int"><a href="#4-1-sorted-sorted-T-T-gt-int" class="headerlink" title="4.1 sorted() / sorted((T, T) -&gt; int)"></a>4.1 sorted() / sorted((T, T) -&gt; int)</h2><p>如果流中的元素的类实现了 Comparable 接口，即有自己的排序规则，那么可以直接调用 sorted() 方法对元素进行排序，如 Stream。反之, 需要调用 sorted((T, T) -&gt; int) 实现 Comparator 接口。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//根据日期进行升序排序</span>List&lt;Student&gt; studentsSortAsce = studentList.stream().sorted(Comparator.comparing(Student::getCreateTime)).collect(Collectors.toList());<span class="hljs-comment">//根据日期进行降序排序</span>List&lt;Student&gt; studentsSortDesc = studentList.stream().sorted(Comparator.comparing(Student::getCreateTime).reversed()).collect(Collectors.toList());</code></pre></div><h1 id="五、分组方法"><a href="#五、分组方法" class="headerlink" title="五、分组方法"></a>五、分组方法</h1><h2 id="5-1-groupingBy"><a href="#5-1-groupingBy" class="headerlink" title="5.1 groupingBy"></a>5.1 groupingBy</h2><p>使用 groupingBy() 将数据进行分组，最终返回一个 Map 类型。</p><p>示例：根据部门对用户列表进行分组。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">groupByTest</span><span class="hljs-params">()</span>&#123;    Map &lt; String, List &lt; User &gt;&gt; listMap = users.stream().collect(Collectors.groupingBy(User::getDepartment));    listMap.forEach((key, Value) - &gt;    &#123;        System.out.println(key);        Value.forEach(System.out::println);        System.out.println(<span class="hljs-string">&quot;----------------------------------------------------------------------------&quot;</span>);    &#125;);&#125;</code></pre></div><p>输出：</p><div class="code-wrapper"><pre><code class="hljs routeros">研发部User(<span class="hljs-attribute">id</span>=20693, <span class="hljs-attribute">name</span>=乔姗姗, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=32, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=4450.00)User(<span class="hljs-attribute">id</span>=36827, <span class="hljs-attribute">name</span>=刘亚飞, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=33, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=2420.00)User(<span class="hljs-attribute">id</span>=36827, <span class="hljs-attribute">name</span>=刘鹏飞, <span class="hljs-attribute">gender</span>=男, <span class="hljs-attribute">age</span>=20, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=2420.00)----------------------------------------------------------------------------人事部User(<span class="hljs-attribute">id</span>=81975, <span class="hljs-attribute">name</span>=张帅, <span class="hljs-attribute">gender</span>=男, <span class="hljs-attribute">age</span>=55, <span class="hljs-attribute">department</span>=人事部, <span class="hljs-attribute">salary</span>=4170.00)User(<span class="hljs-attribute">id</span>=87030, <span class="hljs-attribute">name</span>=李杰, <span class="hljs-attribute">gender</span>=男, <span class="hljs-attribute">age</span>=59, <span class="hljs-attribute">department</span>=人事部, <span class="hljs-attribute">salary</span>=3960.00)----------------------------------------------------------------------------客服部User(<span class="hljs-attribute">id</span>=30706, <span class="hljs-attribute">name</span>=肖飞, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=23, <span class="hljs-attribute">department</span>=客服部, <span class="hljs-attribute">salary</span>=4450.00)User(<span class="hljs-attribute">id</span>=30706, <span class="hljs-attribute">name</span>=杜十娘, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=18, <span class="hljs-attribute">department</span>=客服部, <span class="hljs-attribute">salary</span>=4450.00)----------------------------------------------------------------------------</code></pre></div><h2 id="5-2-多级分组"><a href="#5-2-多级分组" class="headerlink" title="5.2 多级分组"></a>5.2 多级分组</h2><p>groupingBy 可以接受一个第二参数实现多级分组。</p><p>示例：根据部门和性别对用户进行分组</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">groupByTest1</span><span class="hljs-params">()</span>&#123;    Map &lt; String, Map &lt; String, List &lt; User &gt;&gt;&gt; collect = users.stream().collect(Collectors.groupingBy(User::getDepartment, Collectors.groupingBy(User::getGender)));    collect.forEach((key, map) - &gt;    &#123;        System.out.println(key + <span class="hljs-string">&quot;:&quot;</span>);        map.forEach((key2, user) - &gt;        &#123;            System.out.println(key2);            user.forEach(System.out::println);        &#125;);        System.out.println(<span class="hljs-string">&quot;--------------------------------------------------------------&quot;</span>);    &#125;);&#125;</code></pre></div><p>输出：</p><div class="code-wrapper"><pre><code class="hljs routeros">研发部:女User(<span class="hljs-attribute">id</span>=20693, <span class="hljs-attribute">name</span>=乔姗姗, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=32, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=4450.00)User(<span class="hljs-attribute">id</span>=36827, <span class="hljs-attribute">name</span>=刘亚飞, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=33, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=2420.00)男User(<span class="hljs-attribute">id</span>=36827, <span class="hljs-attribute">name</span>=刘鹏飞, <span class="hljs-attribute">gender</span>=男, <span class="hljs-attribute">age</span>=20, <span class="hljs-attribute">department</span>=研发部, <span class="hljs-attribute">salary</span>=2420.00)--------------------------------------------------------------人事部:男User(<span class="hljs-attribute">id</span>=81975, <span class="hljs-attribute">name</span>=张帅, <span class="hljs-attribute">gender</span>=男, <span class="hljs-attribute">age</span>=55, <span class="hljs-attribute">department</span>=人事部, <span class="hljs-attribute">salary</span>=4170.00)User(<span class="hljs-attribute">id</span>=87030, <span class="hljs-attribute">name</span>=李杰, <span class="hljs-attribute">gender</span>=男, <span class="hljs-attribute">age</span>=59, <span class="hljs-attribute">department</span>=人事部, <span class="hljs-attribute">salary</span>=3960.00)--------------------------------------------------------------客服部:女User(<span class="hljs-attribute">id</span>=30706, <span class="hljs-attribute">name</span>=肖飞, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=23, <span class="hljs-attribute">department</span>=客服部, <span class="hljs-attribute">salary</span>=4450.00)User(<span class="hljs-attribute">id</span>=30706, <span class="hljs-attribute">name</span>=杜十娘, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">age</span>=18, <span class="hljs-attribute">department</span>=客服部, <span class="hljs-attribute">salary</span>=4450.00)--------------------------------------------------------------</code></pre></div><h2 id="5-3-分组汇总"><a href="#5-3-分组汇总" class="headerlink" title="5.3 分组汇总"></a>5.3 分组汇总</h2><h1 id="六、示例"><a href="#六、示例" class="headerlink" title="六、示例"></a>六、示例</h1><p>Stream操作分类<br>Stream的操作可以分为两大类：中间操作、终结操作</p><p>中间操作可分为：</p><p>无状态（Stateless）操作：指元素的处理不受之前元素的影响<br>有状态（Stateful）操作：指该操作只有拿到所有元素之后才能继续下去<br>终结操作可分为：</p><p>短路（Short-circuiting）操作：指遇到某些符合条件的元素就可以得到最终结果<br>非短路（Unshort-circuiting）操作：指必须处理完所有元素才能得到最终结果<br>Stream结合具体操作，大致可分为如下图所示：</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l5MzM5NDUyNjg5,size_16,color_FFFFFF,t_70.png" alt="img"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>【1】<a href="https://blog.csdn.net/yy339452689/article/details/110956119">https://blog.csdn.net/yy339452689/article/details/110956119</a></p><p>【2】<a href="https://blog.csdn.net/wangshiqi666/article/details/129378095">https://blog.csdn.net/wangshiqi666/article/details/129378095</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Stream</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="/king/26960e5d.html"/>
    <url>/king/26960e5d.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="一-什么是Redis"><a href="#一-什么是Redis" class="headerlink" title="(一)什么是Redis"></a>(一)什么是Redis</h3><p>Redis(Remote Dictionary Server) 是一个使用 C 语言编写的，开源的（BSD许可）高性能非关系型（NoSQL）的键值对数据库。</p><p>Redis 可以存储键和五种不同类型的值之间的映射。键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。</p><p>与传统数据库不同的是 Redis 的数据是存在内存中的，所以读写速度非常快，因此 redis 被广泛应用于缓存方向，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。</p><p>另外，Redis 也经常用来做分布式锁。除此之外，Redis 支持事务 、持久化、LUA脚本、LRU驱动事件、多种集群方案。</p><h3 id="二-Redis优缺点"><a href="#二-Redis优缺点" class="headerlink" title="(二)Redis优缺点"></a>(二)Redis优缺点</h3><p>优点</p><ul><li>读写性能优异， Redis能读的速度是110000次/s，写的速度是81000次/s。</li><li>支持数据持久化，支持AOF和RDB两种持久化方式。</li><li>支持事务，Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。</li><li>数据结构丰富，除了支持string类型的value外还支持hash、set、zset、list等数据结构。</li><li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。</li></ul><p>缺点</p><ul><li>数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</li><li>Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。</li><li>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。</li><li>Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li></ul><h3 id="三-为什么要用-Redis-为什么要用缓存"><a href="#三-为什么要用-Redis-为什么要用缓存" class="headerlink" title="(三)为什么要用 Redis /为什么要用缓存"></a>(三)为什么要用 Redis /为什么要用缓存</h3><p>主要从“高性能”和“高并发”这两点来看待这个问题。</p><p><strong>高性能：</strong></p><p>假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。</p><p>操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302101630596.png" alt="img"></p><p><strong>高并发：</strong></p><p>直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302101630478.png" alt="img"></p><h2 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h2><table><thead><tr><th align="center">数据类型</th><th>可以存储的值</th><th>操作</th><th>应用场景</th></tr></thead><tbody><tr><td align="center">String</td><td>字符串、整数或者浮点数</td><td>对整个字符串或者字符串的其中一部分执行操作 对整数和浮点数执行自增或者自减操作</td><td>做简单的键值对缓存</td></tr><tr><td align="center">List</td><td>列表</td><td>从两端压入或者弹出元素 对单个或者多个元素进行修剪， 只保留一个范围内的元素</td><td>存储一些列表型的数据结构，类似粉丝列表、文章的评论列表之类的数据</td></tr><tr><td align="center">Set</td><td>无序集合</td><td>添加、获取、移除单个元素 检查一个元素是否存在于集合中 计算交集、并集、差集 从集合里面随机获取元素</td><td>交集、并集、差集的操作，比如交集，可以把两个人的粉丝列表整一个交集</td></tr><tr><td align="center">Hash</td><td>包含键值对的无序散列表</td><td>添加、获取、移除单个键值对 获取所有键值对 检查某个键是否存在</td><td>结构化的数据，比如一个对象</td></tr><tr><td align="center">ZSET</td><td>有序集合</td><td>添加、获取、删除元素 根据分值范围或者成员来获取元素 计算一个键的排名</td><td>去重但可以排序，如获取排名前几名的用户</td></tr></tbody></table><h2 id="三、Redis的应用场景"><a href="#三、Redis的应用场景" class="headerlink" title="三、Redis的应用场景"></a>三、Redis的应用场景</h2><p><strong>计数器</strong></p><p>​        可以对 String 进行自增自减运算，从而实现计数器功能。Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</p><p><strong>缓存</strong></p><p>​        将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</p><p><strong>会话缓存</strong></p><p>​        可以使用 Redis 来统一存储多台应用服务器的会话信息。当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。</p><p><strong>全页缓存（FPC）</strong></p><p>​        除基本的会话token之外，Redis还提供很简便的FPC平台。以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。此外，对WordPress的用户来说，Pantheon有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</p><p><strong>查找表</strong></p><p>​        例如 DNS 记录就很适合使用 Redis 进行存储。查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</p><p><strong>消息队列(发布/订阅功能)</strong></p><p>​        List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息。不过最好使用 Kafka、RabbitMQ 等消息中间件。</p><p><strong>分布式锁实现</strong></p><p>​        在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</p><p><strong>其它</strong></p><p>​        Set 可以实现交集、并集等操作，从而实现共同好友等功能。ZSet 可以实现有序性操作，从而实现排行榜等功能。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302101632204.png" alt="img"></p><h2 id="四、持久化"><a href="#四、持久化" class="headerlink" title="四、持久化"></a>四、持久化</h2><h3 id="一-什么是持久化"><a href="#一-什么是持久化" class="headerlink" title="(一)什么是持久化"></a>(一)什么是持久化</h3><p>持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。</p><h3 id="二-Redis-的持久化机制是什么？各自的优缺点？"><a href="#二-Redis-的持久化机制是什么？各自的优缺点？" class="headerlink" title="(二)Redis 的持久化机制是什么？各自的优缺点？"></a>(二)Redis 的持久化机制是什么？各自的优缺点？</h3><p>Redis 提供两种持久化机制 <strong>RDB</strong>（默认） 和 <strong>AOF</strong> 机制:</p><h4 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1.RDB"></a>1.RDB</h4><p>1.RDB：是Redis DataBase缩写快照</p><p>​    RDB是Redis默认的持久化方式。按照一定的时间将内存的数据以快照的形式保存到硬盘中，对应产生的数据文件为dump.rdb。通过配置文件中的save参数来定义快照的周期。</p><p>RDB持久化可以手动执行也可以根据配置定期执行，它的作用是将某个时间点上的数据库状态保存到RDB文件中，RDB文件是一个压缩的二进制文件，通过它可以还原某个时刻数据库的状态。由于RDB文件是保存在硬盘上的，所以即使redis崩溃或者退出，只要RDB文件存在，就可以用它来恢复还原数据库的状态。</p><p>可以通过SAVE或者BGSAVE来生成RDB文件。</p><p>SAVE命令会阻塞redis进程，直到RDB文件生成完毕，在进程阻塞期间，redis不能处理任何命令请求，这显然是不合适的。</p><p>BGSAVE则是会fork出一个子进程，然后由子进程去负责生成RDB文件，父进程还可以继续处理命令请求，不会阻塞进程。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302101633696.png" alt="img"></p><p><strong>优点：</strong></p><ul><li>1、只有一个文件 dump.rdb，方便持久化。</li><li>2、容灾性好，一个文件可以保存到安全的磁盘。</li><li>3、性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO 最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能</li><li>4.相对于数据集大时，比 AOF 的启动效率更高。</li></ul><p><strong>缺点：</strong></p><p>数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候。</p><h4 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2.AOF"></a>2.AOF</h4><p>AOF持久化(即Append Only File持久化)，则是将Redis执行的每次写命令记录到单独的日志文件中，当重启Redis会重新将持久化的日志中文件恢复数据。</p><p>当两种方式同时开启时，数据恢复Redis会优先选择AOF恢复。</p><p>AOF和RDB不同，AOF是通过保存redis服务器所执行的写命令来记录数据库状态的。</p><p>AOF通过追加、写入、同步三个步骤来实现持久化机制。</p><p>​    1.当AOF持久化处于激活状态，服务器执行完写命令之后，写命令将会被追加append到aof_buf缓冲区的末尾</p><p>​    2.在服务器每结束一个事件循环之前，将会调用flushAppendOnlyFile函数决定是否要将aof_buf的内容保存到AOF文件中，可以通过配置appendfsync来决定。</p><p>always ##aof_buf内容写入并同步到AOF文件</p><p>everysec ##将aof_buf中内容写入到AOF文件，如果上次同步AOF文件时间距离现在超过1秒，则再次对AOF文件进行同步</p><p>no ##将aof_buf内容写入AOF文件，但是并不对AOF文件进行同步，同步时间由操作系统决定</p><p>如果不设置，默认选项将会是everysec，因为always来说虽然最安全（只会丢失一次事件循环的写命令），但是性能较差，而everysec模式只不过会可能丢失1秒钟的数据，而no模式的效率和everysec相仿，但是会丢失上次同步AOF文件之后的所有写命令数据。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302101633783.png" alt="img"></p><p><strong>优点：</strong></p><ul><li>1、数据安全，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次 命令操作就记录到 aof 文件中一次。</li><li>2、通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。</li><li>3、AOF 机制的 rewrite 模式。AOF 文件没被 rewrite 之前（文件过大时会对命令 进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）)</li></ul><p><strong>缺点：</strong></p><ul><li>1、AOF 文件比 RDB 文件大，且恢复速度慢。</li><li>2、数据集大的时候，比 rdb 启动效率低。</li></ul><p>优缺点是什么？</p><ul><li>AOF文件比RDB更新频率高，优先使用AOF还原数据。</li><li>AOF比RDB更安全也更大</li><li>RDB性能比AOF好</li><li>如果两个都配了优先加载AOF</li></ul><h4 id="3-如何选择合适的持久化方式"><a href="#3-如何选择合适的持久化方式" class="headerlink" title="3.如何选择合适的持久化方式"></a>3.如何选择合适的持久化方式</h4><ul><li>一般来说， 如果想达到足以媲美PostgreSQL的数据安全性，你应该同时使用两种持久化功能。在这种情况下，当 Redis 重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</li><li>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失，那么你可以只使用RDB持久化。</li><li>有很多用户都只使用AOF持久化，但并不推荐这种方式，因为定时生成RDB快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比AOF恢复的速度要快，除此之外，使用RDB还可以避免AOF程序的bug。</li><li>如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式。</li></ul><h2 id="五、过期键的删除策略"><a href="#五、过期键的删除策略" class="headerlink" title="五、过期键的删除策略"></a>五、过期键的删除策略</h2><h3 id="Redis的过期键的删除策略"><a href="#Redis的过期键的删除策略" class="headerlink" title="Redis的过期键的删除策略"></a>Redis的过期键的删除策略</h3><p>我们都知道，Redis是key-value数据库，我们可以设置Redis中缓存的key的过期时间。Redis的过期策略就是指当Redis中缓存的key过期了，Redis如何处理。</p><p>过期策略通常有以下三种：</p><ul><li>定时过期：每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即清除。该策略可以立即清除过期的数据，对内存很友好；但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量。</li><li>惰性过期：只有当访问一个key时，才会判断该key是否已过期，过期则清除。该策略可以最大化地节省CPU资源，却对内存非常不友好。极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。<br><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302101635749.png" alt="img"></li><li>定期过期：每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。(expires字典会保存所有设置了过期时间的key的过期时间数据，其中，key是指向键空间中的某个键的指针，value是该键的毫秒精度的UNIX时间戳表示的过期时间。键空间是指该Redis集群中保存的所有键。)</li></ul><p>Redis中同时使用了<strong>惰性过期</strong>和<strong>定期过期</strong>两种过期策略。</p><h2 id="六、Redis的内存淘汰策略"><a href="#六、Redis的内存淘汰策略" class="headerlink" title="六、Redis的内存淘汰策略"></a>六、Redis的内存淘汰策略</h2><p>假设redis每次定期随机查询key的时候没有删掉，这些key也没有做查询的话，就会导致这些key一直保存在redis里面无法被删除，这时候就会走到redis的内存淘汰机制。</p><p><strong>全局的键空间选择性移除</strong></p><ul><li><strong>noeviction</strong>：当内存不足以容纳新写入数据时，新写入操作会报错。</li><li><strong>allkeys-lru</strong>：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。(这个是最常用的)</li><li><strong>allkeys-random</strong>：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。</li></ul><p><strong>设置过期时间的键空间选择性移除</strong></p><ul><li><strong>volatile-lru</strong>：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。</li><li><strong>volatile-random</strong>：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。</li><li><strong>volatile-ttl</strong>：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。</li></ul><p><strong>总结</strong></p><p>​        Redis的内存淘汰策略的选取并不会影响过期的key的处理。内存淘汰策略用于处理内存不足时的需要申请额外空间的数据；过期策略用于处理过期的缓存数据。</p><h2 id="七、缓存异常"><a href="#七、缓存异常" class="headerlink" title="七、缓存异常"></a>七、缓存异常</h2><h3 id="一-缓存雪崩"><a href="#一-缓存雪崩" class="headerlink" title="(一)缓存雪崩"></a>(一)缓存雪崩</h3><p><strong>缓存雪崩</strong>是指缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉。雪崩和击穿、热key的问题不太一样的是，它是指大规模的缓存都过期失效了。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302101637632.png" alt="img"></p><p><strong>解决方案</strong></p><ol><li>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</li><li>一般并发量不是特别多的时候，使用最多的解决方案是加锁排队。</li><li>给每一个缓存数据增加相应的缓存标记，记录缓存的是否失效，如果缓存标记失效，则更新数据缓存。</li></ol><h3 id="二-缓存穿透"><a href="#二-缓存穿透" class="headerlink" title="(二)缓存穿透"></a>(二)缓存穿透</h3><p><strong>缓存穿透</strong>是指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302101637840.png" alt="img"></p><p><strong>解决方案</strong></p><ol><li>接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截；</li><li>从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击</li><li>采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力<br>布隆过滤器的原理是在你存入数据的时候，会通过散列函数将它映射为一个位数组中的K个点，同时把他们置为1。这样当用户再次来查询A，而A在布隆过滤器值为0，直接返回，就不会产生击穿请求打到DB了。<br>显然，使用布隆过滤器之后会有一个问题就是误判，因为它本身是一个数组，可能会有多个值落到同一个位置，那么理论上来说只要我们的数组长度够长，误判的概率就会越低，这种问题就根据实际情况来就好了。</li></ol><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302101637859.png" alt="img"></p><p><strong>附加</strong>：</p><p>对于空间的利用到达了一种极致，那就是Bitmap和布隆过滤器(Bloom Filter)。</p><p>Bitmap： 典型的就是哈希表</p><p>缺点是，Bitmap对于每个元素只能记录1bit信息，如果还想完成额外的功能，恐怕只能靠牺牲更多的空间、时间来完成了。</p><p>布隆过滤器（推荐）</p><p>就是引入了k(k&gt;1)k(k&gt;1)个相互独立的哈希函数，保证在给定的空间、误判率下，完成元素判重的过程。</p><p>它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p><p>Bloom-Filter算法的核心思想就是利用多个不同的Hash函数来解决“冲突”。</p><p>Hash存在一个冲突（碰撞）的问题，用同一个Hash得到的两个URL的值有可能相同。为了减少冲突，我们可以多引入几个Hash，如果通过其中的一个Hash值我们得出某元素不在集合中，那么该元素肯定不在集合中。只有在所有的Hash函数告诉我们该元素在集合中时，才能确定该元素存在于集合中。这便是Bloom-Filter的基本思想。</p><p>Bloom-Filter一般用于在大数据量的集合中判定某元素是否存在。</p><h3 id="三-缓存击穿"><a href="#三-缓存击穿" class="headerlink" title="(三)缓存击穿"></a>(三)缓存击穿</h3><p><strong>缓存击穿</strong>是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。和缓存雪崩不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p><p><strong>解决方案</strong></p><ol><li>设置热点数据永远不过期。</li><li>加互斥锁，互斥锁</li></ol><h3 id="四-缓存预热"><a href="#四-缓存预热" class="headerlink" title="(四)缓存预热"></a>(四)缓存预热</h3><p><strong>缓存预热</strong>就是系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</p><p><strong>解决方案</strong></p><ol><li>直接写个缓存刷新页面，上线时手工操作一下；</li><li>数据量不大，可以在项目启动的时候自动进行加载；</li><li>定时刷新缓存；</li></ol><h3 id="五-缓存降级"><a href="#五-缓存降级" class="headerlink" title="(五)缓存降级"></a>(五)缓存降级</h3><p>当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。</p><p><strong>缓存降级</strong>的最终目的是保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。</p><p>在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：</p><ol><li>一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；</li><li>警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；</li><li>错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；</li><li>严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。</li></ol><p>服务降级的目的，是为了防止Redis服务故障，导致数据库跟着一起发生雪崩问题。因此，对于不重要的缓存数据，可以采取服务降级策略，例如一个比较常见的做法就是，Redis出现问题，不去数据库查询，而是直接返回默认值给用户。</p><h3 id="六-热点数据和冷数据"><a href="#六-热点数据和冷数据" class="headerlink" title="(六)热点数据和冷数据"></a>(六)热点数据和冷数据</h3><p>热点数据，缓存才有价值</p><p>对于冷数据而言，大部分数据可能还没有再次访问到就已经被挤出内存，不仅占用内存，而且价值不大。频繁修改的数据，看情况考虑使用缓存</p><p>对于热点数据，比如我们的某IM产品，生日祝福模块，当天的寿星列表，缓存以后可能读取数十万次。再举个例子，某导航产品，我们将导航信息，缓存以后可能读取数百万次。</p><p>数据更新前至少读取两次，缓存才有意义。这个是最基本的策略，如果缓存还没有起作用就失效了，那就没有太大价值了。</p><p>那存不存在，修改频率很高，但是又不得不考虑缓存的场景呢？有！比如，这个读取接口对数据库的压力很大，但是又是热点数据，这个时候就需要考虑通过缓存手段，减少数据库的压力，比如我们的某助手产品的，点赞数，收藏数，分享数等是非常典型的热点数据，但是又不断变化，此时就需要将数据同步保存到Redis缓存，减少数据库压力。</p><h3 id="七-缓存热点key"><a href="#七-缓存热点key" class="headerlink" title="(七)缓存热点key"></a>(七)缓存热点key</h3><p>缓存中的一个Key(比如一个促销商品)，在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302101636857.png" alt="img"></p><p><strong>解决方案</strong></p><p>1.对缓存查询加锁，如果KEY不存在，就加锁，然后查DB入缓存，然后解锁；其他进程如果发现有锁就等待，然后等解锁后返回数据或者进入DB查询</p><p>2.提前把热key打散到不同的服务器，降低压力</p><h2 id="八、实现Redis的高可用"><a href="#八、实现Redis的高可用" class="headerlink" title="八、实现Redis的高可用"></a>八、实现Redis的高可用</h2><p>要想实现高可用，一台机器肯定是不够的，而redis要保证高可用，有2个可选方案。</p><h3 id="一-主从架构"><a href="#一-主从架构" class="headerlink" title="(一)主从架构"></a>(一)主从架构</h3><p>主从模式是最简单的实现高可用的方案，核心就是主从同步。主从同步的原理如下：</p><ol><li>slave发送sync命令到master</li><li>master收到sync之后，执行bgsave，生成RDB全量文件</li><li>master把slave的写命令记录到缓存</li><li>bgsave执行完毕之后，发送RDB文件到slave，slave执行</li><li>master发送缓存中的写命令到slave，slave执行</li></ol><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302101638248.png" alt="img"></p><p>这里我写的这个命令是sync，但是在redis2.8版本之后已经使用psync来替代sync了，原因是sync命令非常消耗系统资源，而psync的效率更高。</p><h3 id="二-哨兵"><a href="#二-哨兵" class="headerlink" title="(二)哨兵"></a>(二)哨兵</h3><p>基于主从方案的缺点还是很明显的，假设master宕机，那么就不能写入数据，那么slave也就失去了作用，整个架构就不可用了，除非你手动切换，主要原因就是因为没有自动故障转移机制。而哨兵(sentinel)的功能比单纯的主从架构全面的多了，它具备自动故障转移、集群监控、消息通知等功能。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302101638387.png" alt="img"></p><p>哨兵可以同时监视多个主从服务器，并且在被监视的master下线时，自动将某个slave提升为master，然后由新的master继续接收命令。整个过程如下：</p><ol><li>初始化sentinel，将普通的redis代码替换成sentinel专用代码</li><li>初始化masters字典和服务器信息，服务器信息主要保存ip:port，并记录实例的地址和ID</li><li>创建和master的两个连接，命令连接和订阅连接，并且订阅sentinel:hello频道</li><li>每隔10秒向master发送info命令，获取master和它下面所有slave的当前信息</li><li>当发现master有新的slave之后，sentinel和新的slave同样建立两个连接，同时每个10秒发送info命令，更新master信息</li><li>sentinel每隔1秒向所有服务器发送ping命令，如果某台服务器在配置的响应时间内连续返回无效回复，将会被标记为下线状态</li><li>选举出领头sentinel，领头sentinel需要半数以上的sentinel同意</li><li>领头sentinel从已下线的的master所有slave中挑选一个，将其转换为master</li><li>让所有的slave改为从新的master复制数据</li><li>将原来的master设置为新的master的从服务器，当原来master重新回复连接时，就变成了新master的从服务器</li></ol><p>sentinel会每隔1秒向所有实例（包括主从服务器和其他sentinel）发送ping命令，并且根据回复判断是否已经下线，这种方式叫做主观下线。当判断为主观下线时，就会向其他监视的sentinel询问，如果超过半数的投票认为已经是下线状态，则会标记为客观下线状态，同时触发故障转移。</p><h2 id="九、Redis集群原理"><a href="#九、Redis集群原理" class="headerlink" title="九、Redis集群原理"></a>九、Redis集群原理</h2><p>如果说依靠哨兵可以实现redis的高可用，如果还想在支持高并发同时容纳海量的数据，那就需要redis集群。redis集群是redis提供的分布式数据存储方案，集群通过数据分片sharding来进行数据的共享，同时提供复制和故障转移的功能。</p><h3 id="一-节点"><a href="#一-节点" class="headerlink" title="(一)节点"></a>(一)节点</h3><p>一个redis集群由多个节点node组成，而多个node之间通过cluster meet命令来进行连接，节点的握手过程：</p><ol><li>节点A收到客户端的cluster meet命令</li><li>A根据收到的IP地址和端口号，向B发送一条meet消息</li><li>节点B收到meet消息返回pong</li><li>A知道B收到了meet消息，返回一条ping消息，握手成功</li><li>最后，节点A将会通过gossip协议把节点B的信息传播给集群中的其他节点，其他节点也将和B进行握手</li></ol><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302101638556.png" alt="img"></p><h3 id="二-槽slot"><a href="#二-槽slot" class="headerlink" title="(二)槽slot"></a>(二)槽slot</h3><p>​        redis通过集群分片的形式来保存数据，整个集群数据库被分为16384个slot，集群中的每个节点可以处理0-16384个slot，当数据库16384个slot都有节点在处理时，集群处于上线状态，反之只要有一个slot没有得到处理都会处理下线状态。通过cluster addslots命令可以将slot指派给对应节点处理。</p><p>slot是一个位数组，数组的长度是16384/8=2048，而数组的每一位用1表示被节点处理，0表示不处理，如图所示的话表示A节点处理0-7的slot。</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302101639676.png" alt="img"></p><p>当客户端向节点发送命令，如果刚好找到slot属于当前节点，那么节点就执行命令，反之，则会返回一个MOVED命令到客户端指引客户端转向正确的节点。（MOVED过程是自动的）</p><p><img src="https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202302101639222.png" alt="img"></p><p>如果增加或者移出节点，对于slot的重新分配也是非常方便的，redis提供了工具帮助实现slot的迁移，整个过程是完全在线的，不需要停止服务。</p><h3 id="三-故障转移"><a href="#三-故障转移" class="headerlink" title="(三)故障转移"></a>(三)故障转移</h3><p>如果节点A向节点B发送ping消息，节点B没有在规定的时间内响应pong，那么节点A会标记节点B为pfail疑似下线状态，同时把B的状态通过消息的形式发送给其他节点，如果超过半数以上的节点都标记B为pfail状态，B就会被标记为fail下线状态，此时将会发生故障转移，优先从复制数据较多的从节点选择一个成为主节点，并且接管下线节点的slot，整个过程和哨兵非常类似，都是基于Raft协议做选举。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vuepress搭建个人博客教程</title>
    <link href="/king/26960e5d.html"/>
    <url>/king/26960e5d.html</url>
    
    <content type="html"><![CDATA[<!-- more --><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="code-wrapper"><pre><code class="hljs sh">npm install vuepress-theme-reco --save-dev<span class="hljs-comment"># or</span>yarn add vuepress-theme-reco</code></pre></div><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><div class="code-wrapper"><pre><code class="hljs sh">// .vuepress/config.jsmodule.exports = &#123;  theme: <span class="hljs-string">&#x27;reco&#x27;</span>&#125;</code></pre></div><h2 id="本地引用"><a href="#本地引用" class="headerlink" title="本地引用"></a>本地引用</h2><ul><li>下载<br>在<a href="https://github.com/vuepress-reco/vuepress-theme-reco%E4%BB%93%E5%BA%93%E4%B8%AD%E4%B8%8B%E8%BD%BD%E5%85%A8%E9%83%A8%E6%96%87%E4%BB%B6">https://github.com/vuepress-reco/vuepress-theme-reco仓库中下载全部文件</a></li><li>使用<br>在.vuepress文件夹下新建theme文件夹，再将packages文件夹下的vuepress-theme-reco文件夹放入theme;<br>修改.vuepress文件夹下config.js<div class="code-wrapper"><pre><code class="hljs livecodeserver"><span class="hljs-string">&quot;theme&quot;</span>: <span class="hljs-built_in">require</span>.<span class="hljs-built_in">resolve</span>(<span class="hljs-string">&quot;./theme/vuepress-theme-reco&quot;</span>),</code></pre></div></li></ul><h2 id="Front-Matter"><a href="#Front-Matter" class="headerlink" title="Front Matter"></a>Front Matter</h2><div class="code-wrapper"><pre><code class="hljs sh">---title: 烤鸭的做法<span class="hljs-built_in">date</span>: <span class="hljs-string">&#x27;2019-08-08 08:00:00&#x27;</span>sidebar: <span class="hljs-string">&#x27;auto&#x27;</span>categories: - 烹饪 - 爱好tags: - 烤 - 鸭子keys: - <span class="hljs-string">&#x27;123456&#x27;</span>publish: <span class="hljs-literal">false</span>---</code></pre></div><p>:::tip<br>Front Matter配置</p><p>title: 文章标题 date: 时间，如(‘2019-08-08 08:00:00’) sidebar: ‘auto’ categories:文章分类，可以有多个</p><p>tags:文章标签,可以有多个</p><p>keys：文章加密密码</p><p>sticky :是否置顶，sort type: 降序，可以按照 1, 2, 3, … 来降低置顶文章的排列优先级</p><p>public:是否发布<br>:::</p><h2 id="优化页面"><a href="#优化页面" class="headerlink" title="优化页面"></a>优化页面</h2><p>1.首页背景全屏显示 修改首页的README.md文件</p><div class="code-wrapper"><pre><code class="hljs css">bgImageStyle: &#123;  <span class="hljs-attribute">height</span>: <span class="hljs-string">&#x27;95vh&#x27;</span>,  background-color: <span class="hljs-string">&#x27;#D9AFD9&#x27;</span>,  background-image: <span class="hljs-string">&#x27;linear-gradient(0deg, #D9AFD9 0%, #97D9E1 100%)&#x27;</span>&#125;</code></pre></div><p>2.添加鼠标点击特效 修改.vuepress/config.js中的head，如下所示:</p><div class="code-wrapper"><pre><code class="hljs javascript">[    <span class="hljs-string">&quot;script&quot;</span>,    &#123;      <span class="hljs-string">&quot;src&quot;</span>: <span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/forthespada/forthespada.github.io@master/plugin/click_heart.js&quot;</span>    &#125;  ]</code></pre></div><p>3.首页添加向下滑动按钮 在主页的README.md文件最下面添加下列代码（此方法转载自<a href="https://blog.csdn.net/qq_41327483/article/details/119103300%E3%80%82%EF%BC%89">https://blog.csdn.net/qq_41327483/article/details/119103300。）</a></p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><span class="language-css"><span class="hljs-selector-class">.anchor-down</span> &#123;</span><span class="language-css">  <span class="hljs-attribute">display</span>: block;</span><span class="language-css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">12rem</span> auto <span class="hljs-number">0</span>;</span><span class="language-css">  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">45px</span>;</span><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;</span><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><span class="language-css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">34px</span>;</span><span class="language-css">  <span class="hljs-attribute">text-align</span>: center;</span><span class="language-css">  <span class="hljs-attribute">animation</span>: bounce-in <span class="hljs-number">5s</span> <span class="hljs-number">3s</span> infinite;</span><span class="language-css">  <span class="hljs-attribute">position</span>: absolute;</span><span class="language-css">  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><span class="language-css">  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">30%</span>;</span><span class="language-css">  <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">10px</span>;</span><span class="language-css">  <span class="hljs-attribute">cursor</span>: pointer;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@-webkit-keyframes</span> bounce-in&#123;</span><span class="language-css">  <span class="hljs-number">0%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>)&#125;</span><span class="language-css">  <span class="hljs-number">20%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>)&#125;</span><span class="language-css">  <span class="hljs-number">50%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateY</span>(-<span class="hljs-number">20px</span>)&#125;</span><span class="language-css">  <span class="hljs-number">80%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>)&#125;</span><span class="language-css">  <span class="hljs-selector-tag">to</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>)&#125;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-class">.anchor-down</span><span class="hljs-selector-pseudo">::before</span> &#123;</span><span class="language-css">  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;</span><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;</span><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><span class="language-css">  <span class="hljs-attribute">display</span>: block;</span><span class="language-css">  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#fff</span>;</span><span class="language-css">  <span class="hljs-attribute">border-top</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#fff</span>;</span><span class="language-css">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">135deg</span>);</span><span class="language-css">  <span class="hljs-attribute">position</span>: absolute;</span><span class="language-css">  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">10px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-class">.anchor-down</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><span class="language-css">  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;</span><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;</span><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><span class="language-css">  <span class="hljs-attribute">display</span>: block;</span><span class="language-css">  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#fff</span>;</span><span class="language-css">  <span class="hljs-attribute">border-top</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#fff</span>;</span><span class="language-css">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">135deg</span>);</span><span class="language-css">&#125;</span><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><span class="language-javascript">  mounted () &#123;</span><span class="language-javascript">    <span class="hljs-keyword">const</span> ifJanchor = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;JanchorDown&quot;</span>); </span><span class="language-javascript">    ifJanchor &amp;&amp; ifJanchor.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(ifJanchor);</span><span class="language-javascript">    <span class="hljs-keyword">let</span> a = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;a&#x27;</span>);</span><span class="language-javascript">    a.<span class="hljs-property">id</span> = <span class="hljs-string">&#x27;JanchorDown&#x27;</span>;</span><span class="language-javascript">    a.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;anchor-down&#x27;</span>;</span><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;hero&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">append</span>(a);</span><span class="language-javascript">    <span class="hljs-keyword">let</span> targetA = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;JanchorDown&quot;</span>);</span><span class="language-javascript">    targetA.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123; <span class="hljs-comment">// 添加点击事件</span></span><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">scrollFn</span>();</span><span class="language-javascript">    &#125;)</span><span class="language-javascript">  &#125;,</span><span class="language-javascript"></span><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><span class="language-javascript">    <span class="hljs-title function_">scrollFn</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">      <span class="hljs-keyword">const</span> windowH = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;hero&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">clientHeight</span>; <span class="hljs-comment">// 获取窗口高度</span></span><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span> = windowH; <span class="hljs-comment">// 滚动条滚动到指定位置</span></span><span class="language-javascript">    &#125;</span><span class="language-javascript">  &#125;</span><span class="language-javascript">&#125;</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><p>4.首页气泡</p><ul><li>添加依赖<div class="code-wrapper"><pre><code class="hljs sh">npm install vue-canvas-effect -D</code></pre></div></li><li>修改theme/vuepress-theme-reco/components/HomeBlog/index.vue<div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 首页气泡 (在27行添加如下代码)--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;bubbles&quot;</span></span><span class="hljs-tag">             <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;bubbles&quot;</span></span><span class="hljs-tag">             <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></code></pre></div></li><li>添加data<div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//首页气泡</span>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> &#123;            <span class="hljs-attr">recoShow</span>: <span class="hljs-literal">false</span>,            <span class="hljs-attr">currentPage</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">tags</span>: [],            <span class="hljs-attr">bubbles</span>: <span class="hljs-literal">null</span>        &#125;    &#125;,</code></pre></div></li><li>添加mounted<div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;       <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;vue-canvas-effect/src/components/bubbles&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">module</span> =&gt;</span> &#123;           <span class="hljs-variable language_">this</span>.<span class="hljs-property">bubbles</span> = <span class="hljs-variable language_">module</span>.<span class="hljs-property">default</span>       &#125;)       <span class="hljs-variable language_">this</span>.<span class="hljs-property">recoShow</span> = <span class="hljs-literal">true</span>       <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_setPage</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_getStoragePage</span>())   &#125;,</code></pre></div></li></ul><p>5.修改置顶的样式</p><ul><li>修改./vuepress/theme/vuepress-theme-reco/NoteAbstractItem.vue<div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;item.frontmatter.sticky&quot;</span></span><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;settop&quot;</span>&gt;</span>置顶<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">reco-icon</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;item.frontmatter.keys&quot;</span></span><span class="hljs-tag">                       <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;reco-lock&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;item.path&quot;</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre></div></li><li>添加css样式<div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.settop</span> &#123;        <span class="hljs-attribute">position</span>: absolute;        <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;        <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;        <span class="hljs-attribute">background</span>: $accentColor;        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.6rem</span>;        <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateZ</span>(<span class="hljs-number">45deg</span>) <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">55px</span>);        <span class="hljs-attribute">padding</span>: <span class="hljs-number">50px</span> <span class="hljs-number">25px</span> <span class="hljs-number">3px</span>;    &#125;</code></pre></div></li></ul><p>6.修改文章列表title的鼠标hover样式</p><ul><li>修改./vuepress/theme/vuepress-theme-reco/NoteAbstractItem.vue<div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 添加class name 为 hover-underline-animation--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title hover-underline-animation&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">reco-icon</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;item.frontmatter.keys&quot;</span></span><span class="hljs-tag">                       <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;reco-lock&quot;</span> /&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;item.path&quot;</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre></div></li><li>添加css样式<div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.hover-underline-animation</span> &#123;    <span class="hljs-attribute">display</span>: inline-block;    <span class="hljs-attribute">position</span>: relative;    <span class="hljs-attribute">color</span>: $accentColor;&#125;<span class="hljs-selector-class">.hover-underline-animation</span><span class="hljs-selector-pseudo">:after</span> &#123;    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-attribute">position</span>: absolute;    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleX</span>(<span class="hljs-number">0</span>);    <span class="hljs-attribute">height</span>: <span class="hljs-number">2px</span>;    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">background-color</span>: $accentColor;    <span class="hljs-attribute">transform-origin</span>: bottom right;    <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.25s</span> ease-out;&#125;<span class="hljs-selector-class">.hover-underline-animation</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:after</span> &#123;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleX</span>(<span class="hljs-number">1</span>);    <span class="hljs-attribute">transform-origin</span>: bottom left;&#125;</code></pre></div></li></ul><p>7.首页添加每日诗词<br>:::tip<br>今日诗词 API 是一个可以返回一句古诗词名句的接口。它可以通过图片和 JSON 格式调用。今日诗词 API 根据不同地点、时间、节日、季节、天气、景观、城市进行智能推荐。<br>:::</p><ul><li>官方文档地址<br><a href="https://www.jinrishici.com/doc/">https://www.jinrishici.com/doc/</a></li><li>修改.vuepress/theme/vuepress-theme-reco/components/HomeBlog/index.vue文件<div class="code-wrapper"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">ModuleTransition</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;0.08&quot;</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;recoShowModule &amp;&amp; $frontmatter.tagline !== null&quot;</span></span><span class="hljs-tag">                       <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;description&quot;</span>&gt;</span>                        &#123;&#123; $frontmatter.tagline || $description || &#x27;Welcome to your vuePress-theme-reco site&#x27; &#125;&#125;                    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ModuleTransition</span>&gt;</span><span class="hljs-comment">&lt;!-- 加入如下代码即可 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">ModuleTransition</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;0.12&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!-- marquee文字滚动标签</span><span class="hljs-comment">        marquee 参数：</span><span class="hljs-comment">                    BGColor：滚动文本框的背景颜色。</span><span class="hljs-comment">                    direction：滚动方向设置.</span><span class="hljs-comment">                        left - 从右向左。默认值。</span><span class="hljs-comment">                        right - 从左向右。</span><span class="hljs-comment">                        up - 向上。</span><span class="hljs-comment">                        down - 向下</span><span class="hljs-comment">                    scrolldelay： 设置每次滚动时的时间间隔（以毫秒为单位）。默认值为 85。 值越大，滚动速度越慢，通常不设置。</span><span class="hljs-comment">                          注意：除非指定 truespeed 值，否则将忽略任何小于 60 的值，并改为使用 60。</span><span class="hljs-comment">                    scrollamount：一次滚动总的时间量，数字越小滚动越慢。</span><span class="hljs-comment">                    behaviour：滚动的方式设置，三种取值：Scroll（循环滚动） lide（单次滚动）、Alternate（来回滚动）。</span><span class="hljs-comment">                    align：文字的对齐方式设置。可选择Middle(居中)、Bottom(居下)还是Top(居上)。</span><span class="hljs-comment">                    width：滚动文本框的宽度，输入一个数值后从后面的单选框选择in Pixels(按像素)或是in Percent(按百分比)。</span><span class="hljs-comment">                    height：滚动文本框的高度，输入一个数值后从后面的单选框选择in Pixels(按像素)或是in Percent(按百分比)。</span><span class="hljs-comment">                    loop：滚动次数。默认值-1，无限次循环</span><span class="hljs-comment">                    hspace、vspace：前后、上下的空行。</span><span class="hljs-comment">                    onMouseOver=&#x27;this.stop()&#x27; 鼠标放上去则暂停</span><span class="hljs-comment">                    onMouseOut=&#x27;this.start()&#x27; 鼠标移开继续滚动</span><span class="hljs-comment">        --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">marquee</span> <span class="hljs-attr">behavior</span>=<span class="hljs-string">&quot;alternate&quot;</span> <span class="hljs-attr">loop</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">scrollamount</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;今日诗词&quot;</span></span><span class="hljs-tag">                    <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://v2.jinrishici.com/one.svg&quot;</span></span><span class="hljs-tag">                    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;max-width:100%; display: block; margin: 0 auto;&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">marquee</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ModuleTransition</span>&gt;</span></code></pre></div>方式二:</li><li>安装<div class="code-wrapper"><pre><code class="hljs sh">npm -i jinrishici --save</code></pre></div></li><li>使用<br>修改.vuepress/theme/vuepress-theme-reco/components/HomeBlog/index.vue文件<div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- html部分 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">ModuleTransition</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;0.08&quot;</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;recoShowModule &amp;&amp; $frontmatter.tagline !== null&quot;</span></span><span class="hljs-tag">                       <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;description&quot;</span>&gt;</span>                        &#123;&#123; $frontmatter.tagline || $description || &#x27;Welcome to your vuePress-theme-reco site&#x27; &#125;&#125;                    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">ModuleTransition</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">ModuleTransition</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;0.12&quot;</span>&gt;</span>                    <span class="hljs-comment">&lt;!-- &lt;span class=&quot;jinrishici-sentence&quot;&gt;正在加载今日诗词....&lt;/span&gt; --&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">marquee</span> &gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;word&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">marquee</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ModuleTransition</span>&gt;</span><span class="hljs-comment">&lt;!-- javascript部分 --&gt;</span> data() &#123;        return &#123;            word: &#x27;正在加载今日诗词....&#x27;,        &#125;    &#125;,    methods: &#123;        paginationChange(page) &#123;            setTimeout(() =&gt; &#123;                window.scrollTo(0, this.heroHeight)            &#125;, 100)        &#125;,        getPagesByTags(tagInfo) &#123;            this.$router.push(&#123; path: tagInfo.path &#125;)        &#125;,        loadSentence: function () &#123;            jinrishici.load(result =&gt; &#123;                this.word = result.data.content            &#125;, err =&gt; &#123;                console.log(&quot;test&quot;);            &#125;)        &#125;    &#125;,    mounted: function () &#123; this.loadSentence() &#125;</code></pre></div></li></ul><p>8.修改主页背景为随机图片<br>修改.vuepress/theme/vuepress-theme-reco/components/HomeBlog/index.vue</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> url = instance.<span class="hljs-property">$frontmatter</span>.<span class="hljs-property">bgImage</span>            ? instance.$withBase(instance.<span class="hljs-property">$frontmatter</span>.<span class="hljs-property">bgImage</span>)            : <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../../images/bg.jpg&#x27;</span>)<span class="hljs-comment">// 将上面代码修改为以下形式</span><span class="hljs-keyword">const</span> url = instance.<span class="hljs-property">$frontmatter</span>.<span class="hljs-property">bgImage</span>            ? instance.$withBase(instance.<span class="hljs-property">$frontmatter</span>.<span class="hljs-property">bgImage</span>)            : <span class="hljs-string">&#x27;https://picsum.photos/1600/900&#x27;</span></code></pre></div><p>:::warning<br>若使用随机背景图片，README.md文件中bgImageStyle配置如下即可</p><div class="code-wrapper"><pre><code class="hljs css">bgImageStyle: &#123;  <span class="hljs-attribute">height</span>: <span class="hljs-string">&#x27;95vh&#x27;</span>,&#125;</code></pre></div><p>:::<br>9.使用v-view插件对图片进行放大缩小</p><ul><li>安装<div class="code-wrapper"><pre><code class="hljs sh">npm install v-viewer --save</code></pre></div></li><li>使用<br>修改.vuepress/theme/vuepress-theme-reco/enhanceApp.js如下所示<div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/* eslint-disable no-proto */</span><span class="hljs-keyword">import</span> postMixin <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@theme/mixins/posts&#x27;</span><span class="hljs-keyword">import</span> localMixin <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@theme/mixins/locales&#x27;</span><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">Viewer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;v-viewer&#x27;</span><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;viewerjs/dist/viewer.css&#x27;</span><span class="hljs-keyword">import</span> &#123; interceptRouterError, fixRouterError404 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@theme/helpers/other&#x27;</span><span class="hljs-keyword">import</span> &#123; install &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-demi&#x27;</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (&#123;  <span class="hljs-title class_">Vue</span>,  siteData,  isServer,  router&#125;) =&gt; &#123;  <span class="hljs-title function_">install</span>(<span class="hljs-title class_">Vue</span>)  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixin</span>(postMixin)  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixin</span>(localMixin)  <span class="hljs-comment">// if (!isServer) &#123;</span>  <span class="hljs-comment">//   addScriptToHead(&#x27;//kit.fontawesome.com/51b01de608.js&#x27;)</span>  <span class="hljs-comment">//   registerCodeThemeCss(siteData.themeConfig.codeTheme)</span>  <span class="hljs-comment">// &#125;</span>  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Viewer</span>)  <span class="hljs-title class_">Viewer</span>.<span class="hljs-title function_">setDefaults</span>(&#123;    <span class="hljs-title class_">Options</span>: &#123; <span class="hljs-string">&#x27;inline&#x27;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;button&#x27;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;navbar&#x27;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;toolbar&#x27;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;tooltip&#x27;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;movable&#x27;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;zoomable&#x27;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;rotatable&#x27;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;scalable&#x27;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;transition&#x27;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;fullscreen&#x27;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;keyboard&#x27;</span>: <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;data-source&#x27;</span> &#125;  &#125;)  <span class="hljs-title function_">interceptRouterError</span>(router)  <span class="hljs-title function_">fixRouterError404</span>(router)&#125;</code></pre></div>修改.vuepress/theme/vuepress-theme-reco/components/Page.vue如下<div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- session添加v-viewer指令 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;recoShowModule&quot;</span></span><span class="hljs-tag">                     <span class="hljs-attr">v-viewer</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-title&quot;</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>&#123;&#123;$page.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">PageInfo</span> <span class="hljs-attr">:pageInfo</span>=<span class="hljs-string">&quot;$page&quot;</span></span><span class="hljs-tag">                              <span class="hljs-attr">:showAccessNumber</span>=<span class="hljs-string">&quot;showAccessNumber&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">PageInfo</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">Content</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;theme-reco-content&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></code></pre></div>:::warning<br>这里需要关闭vuepress内置的@vuepress/plugin-medium-zoom<div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 只需将 Options 设置成 false 便可禁用该插件</span><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;  <span class="hljs-attr">plugins</span>: [    [<span class="hljs-string">&quot;@vuepress/plugin-medium-zoom&quot;</span>, <span class="hljs-literal">false</span>] <span class="hljs-comment">// disabled.</span>  ]&#125;;</code></pre></div>更新:<br>由于本人是将vuepress-theme-reco主题下载到本地进行修改，所以以上方式并不能关闭vuepress/plugin-medium-zoom插件<br>解决方式:修改.vuepress/theme/vuepress-theme-reco/index.js如下<div class="code-wrapper"><pre><code class="hljs awk">plugins: [   <span class="hljs-string">&#x27;@vuepress-reco/back-to-top&#x27;</span>,   <span class="hljs-string">&#x27;@vuepress-reco/loading-page&#x27;</span>,   <span class="hljs-string">&#x27;@vuepress-reco/pagation&#x27;</span>,   <span class="hljs-string">&#x27;@vuepress-reco/comments&#x27;</span>,   <span class="hljs-string">&#x27;@vuepress/active-header-links&#x27;</span>,   <span class="hljs-regexp">//</span> [<span class="hljs-string">&#x27;@vuepress/medium-zoom&#x27;</span>, &#123;   <span class="hljs-regexp">//</span>   selector: <span class="hljs-string">&#x27;.theme-reco-content :not(a) &gt; img&#x27;</span>   <span class="hljs-regexp">//</span> &#125;],</code></pre></div>只需要将vuepress/medium-zoom插件注释或者删除即可<br>:::</li></ul><h2 id="插件不生效"><a href="#插件不生效" class="headerlink" title="插件不生效"></a>插件不生效</h2><p>在config.js中配置的插件未生效，于是本人根据vuepress加载流程,将插件配置放入了vuepress-theme-reco的index.js中，此时插件生效。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul><li>nginx配置文件<div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">user</span>  nginx;<span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<span class="hljs-attribute">error_log</span>  /var/log/nginx/<span class="hljs-literal">error</span>.log <span class="hljs-literal">warn</span>;<span class="hljs-attribute">pid</span>        /var/run/nginx.pid;<span class="hljs-section">events</span> &#123;    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;&#125;<span class="hljs-section">http</span> &#123;<span class="hljs-comment">#开启gzip压缩加速</span> <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;  <span class="hljs-comment">#低于1kb的资源不压缩</span>  <span class="hljs-attribute">gzip_min_length</span> <span class="hljs-number">1k</span>;    <span class="hljs-comment">#压缩级别【1-9】，越大压缩率越高，同时消耗cpu资源也越多，建议设置在4左右。</span>  <span class="hljs-attribute">gzip_comp_level</span> <span class="hljs-number">4</span>;  <span class="hljs-comment">#需要压缩哪些响应类型的资源，多个空格隔开。不建议压缩图片</span>  <span class="hljs-attribute">gzip_types</span> text/plain application/javascript application/x-javascript text/javascript text/xml text/css application/json;     <span class="hljs-comment">#配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span>  <span class="hljs-attribute">gzip_disable</span> <span class="hljs-string">&quot;MSIE [1-6]\.&quot;</span>;   <span class="hljs-comment">#是否添加“Vary: Accept-Encoding”响应头</span>  <span class="hljs-attribute">gzip_vary</span> <span class="hljs-literal">on</span>;      <span class="hljs-attribute">include</span>       /etc/nginx/mime.types;    <span class="hljs-attribute">default_type</span>  application/octet-stream;    <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span>                      <span class="hljs-string">&#x27;<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span>                      <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;    <span class="hljs-attribute">access_log</span>  /var/log/nginx/access.log  main;    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;    <span class="hljs-comment">#tcp_nopush     on;</span>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<span class="hljs-section">server</span> &#123;<span class="hljs-attribute">listen</span>  <span class="hljs-number">80</span>;<span class="hljs-attribute">server_name</span> blog; <span class="hljs-section">location</span> /blog_nation &#123;<span class="hljs-attribute">root</span> /usr/share/nginx/html/blog_nation/;<span class="hljs-attribute">index</span>  index.html index.htm;&#125;<span class="hljs-attribute">error_page</span> <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> /50x.html;<span class="hljs-section">location</span> = /50x.html &#123;<span class="hljs-attribute">root</span> /usr/share/nginx/html;&#125;&#125;&#125;</code></pre></div>那如何寻找没有添加的 type 呢？我们打开 Chrome 的「开发者工具」，打开自己的网站，对于「Network」中请求自己网站的包，看是否启动 Gzip，如果「Response Headers」显示「Accept-Ranges: bytes」则表示该包没有开启加速，可以将「Content-Type」后面的值填入「gzip_types」并且使用空格隔开。</li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>vuepress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java项目部署</title>
    <link href="/king/ea92c0b9.html"/>
    <url>/king/ea92c0b9.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装Nginx"><a href="#一、安装Nginx" class="headerlink" title="一、安装Nginx"></a>一、安装Nginx</h1><h2 id="一-Docker安装nginx"><a href="#一-Docker安装nginx" class="headerlink" title="(一)Docker安装nginx"></a>(一)Docker安装nginx</h2><h3 id="1-查看镜像版本"><a href="#1-查看镜像版本" class="headerlink" title="1.查看镜像版本"></a>1.查看镜像版本</h3><div class="code-wrapper"><pre><code class="hljs sh">docker  search nginx</code></pre></div><h3 id="2-拉取镜像"><a href="#2-拉取镜像" class="headerlink" title="2.拉取镜像"></a>2.拉取镜像</h3><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull nginx</span></code></pre></div><h3 id="3-查看镜像"><a href="#3-查看镜像" class="headerlink" title="3.查看镜像"></a>3.查看镜像</h3><div class="code-wrapper"><pre><code class="hljs 1c">docker images <span class="hljs-string">| grep nginx</span></code></pre></div><h3 id="4-创建挂载目录"><a href="#4-创建挂载目录" class="headerlink" title="4.创建挂载目录"></a>4.创建挂载目录</h3><div class="code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">mkdir</span> nginx<span class="hljs-keyword">cd</span> nginx<span class="hljs-keyword">mkdir</span> <span class="hljs-keyword">conf</span><span class="hljs-keyword">mkdir</span> wwwroot<span class="hljs-keyword">mkdir</span> logs</code></pre></div><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment">#创建挂载目录</span><span class="hljs-built_in">mkdir</span> -p ./nginx/&#123;conf,html,logs&#125;</code></pre></div><h3 id="5-构建容器并启动"><a href="#5-构建容器并启动" class="headerlink" title="5.构建容器并启动"></a>5.构建容器并启动</h3><div class="code-wrapper"><pre><code class="hljs awk">docker run -d --name=nginx -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> \-v <span class="hljs-regexp">/local/</span>docker<span class="hljs-regexp">/nginx/</span>wwwroot:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html \-v <span class="hljs-regexp">/local/</span>docker<span class="hljs-regexp">/nginx/</span>conf<span class="hljs-regexp">/nginx.conf:/</span>etc<span class="hljs-regexp">/nginx/</span>nginx.conf \-v <span class="hljs-regexp">/local/</span>docker<span class="hljs-regexp">/nginx/</span>logs:<span class="hljs-regexp">/var/</span>log/nginx \nginx</code></pre></div><h2 id="（二）"><a href="#（二）" class="headerlink" title="（二）"></a>（二）</h2><h3 id="1-安装依赖包"><a href="#1-安装依赖包" class="headerlink" title="1.安装依赖包"></a>1.安装依赖包</h3><div class="code-wrapper"><pre><code class="hljs nsis">sudo yum -y install gcc <span class="hljs-literal">zlib</span> <span class="hljs-literal">zlib</span>-devel pcre-devel openssl openssl-devel</code></pre></div><h3 id="2-下载并解压安装包"><a href="#2-下载并解压安装包" class="headerlink" title="2.下载并解压安装包"></a>2.下载并解压安装包</h3><div class="code-wrapper"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">//</span>下载tar包sudo wget  http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/download/</span>nginx-<span class="hljs-number">1.21</span>.<span class="hljs-number">4</span>.tar.gzsudo tar -xvf nginx-<span class="hljs-number">1.21</span>.<span class="hljs-number">4</span>.tar.gz</code></pre></div><p><a href="https://www.cnblogs.com/gezp/p/14967445.html">https://www.cnblogs.com/gezp/p/14967445.html</a></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment"># 检查配置文件</span>sudo <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx  -t<span class="hljs-comment">#启动</span>sudo <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx<span class="hljs-comment"># 重启加载配置</span>sudo <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -s reload</code></pre></div><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><div class="code-wrapper"><pre><code class="hljs sh">user  nginx;worker_processes  1;error_log  /var/log/nginx/error.log warn;pid        /var/run/nginx.pid;events &#123;    worker_connections  1024;&#125;http &#123;<span class="hljs-comment">#博客服务器，多个可以实现负载均衡</span>    upstream sob-blog&#123;   server 172.23.152.88:8082 weight=1;    &#125;     include       /etc/nginx/mime.types;    default_type  application/octet-stream;    log_format  main  <span class="hljs-string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span>                      <span class="hljs-string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span>                      <span class="hljs-string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;    access_log  /var/log/nginx/access.log  main;    sendfile        on;    <span class="hljs-comment">#tcp_nopush     on;</span>    keepalive_timeout  65;    <span class="hljs-comment">#gzip  on;</span>   server &#123;listen       80;server_name  localhost;<span class="hljs-comment">#charset koi8-r;</span><span class="hljs-comment">#access_log  /var/log/nginx/host.access.log  main;</span>index index.html index.htm index.php;<span class="hljs-comment">#用户相关的请求，转到sob-blog</span>location ^~/user/ &#123;            proxy_pass   http://sob-blog;<span class="hljs-comment">#以下是一些反向代理的配置可删除</span>proxy_redirect             off; <span class="hljs-comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span>proxy_set_header           Host <span class="hljs-variable">$host</span>;proxy_set_header    Cookie <span class="hljs-variable">$http_cookie</span>;proxy_set_header           X-Real-IP <span class="hljs-variable">$remote_addr</span>; proxy_set_header           X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;proxy_set_header           HTTP_X_FORWARDED_FOR <span class="hljs-variable">$remote_addr</span>;proxy_set_header           X-Forwarded-Server <span class="hljs-variable">$host</span>;        &#125;        location ^~/admin/ &#123;           proxy_pass   http://sob-blog;<span class="hljs-comment">#以下是一些反向代理的配置可删除</span>proxy_redirect             off; <span class="hljs-comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span>proxy_set_header           Host <span class="hljs-variable">$host</span>;proxy_set_header    Cookie <span class="hljs-variable">$http_cookie</span>;proxy_set_header           X-Real-IP <span class="hljs-variable">$remote_addr</span>; proxy_set_header           X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;proxy_set_header           HTTP_X_FORWARDED_FOR <span class="hljs-variable">$remote_addr</span>;proxy_set_header           X-Forwarded-Server <span class="hljs-variable">$host</span>;        &#125;                location ^~/portal/ &#123;           proxy_pass   http://sob-blog;<span class="hljs-comment">#以下是一些反向代理的配置可删除</span>proxy_redirect             off; <span class="hljs-comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span>proxy_set_header           Host <span class="hljs-variable">$host</span>;proxy_set_header    Cookie <span class="hljs-variable">$http_cookie</span>;proxy_set_header           X-Real-IP <span class="hljs-variable">$remote_addr</span>; proxy_set_header           X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;proxy_set_header           HTTP_X_FORWARDED_FOR <span class="hljs-variable">$remote_addr</span>;proxy_set_header           X-Forwarded-Server <span class="hljs-variable">$host</span>;        &#125;<span class="hljs-comment">#其他访问访问根目录wwwroot</span>location / &#123;    root   /usr/share/nginx/html;    index  index.html index.htm;    <span class="hljs-comment">#此处解决刷新页面出现404的问题</span>    try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.html;        &#125;&#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">user  nobody;</span><span class="hljs-meta prompt_"> </span><span class="hljs-meta prompt_">#</span><span class="language-bash">==工作进程数，一般设置为cpu核心数</span>worker_processes  1;<span class="hljs-meta prompt_"> </span><span class="hljs-meta prompt_">#</span><span class="language-bash">error_log  logs/error.log;</span><span class="hljs-meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  notice;</span><span class="hljs-meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  info;</span><span class="hljs-meta prompt_"> </span><span class="hljs-meta prompt_">#</span><span class="language-bash">pid        logs/nginx.pid;</span>  events &#123;     #==最大连接数，一般设置为cpu*2048    worker_connections  1024;&#125;  http &#123;    # 负载均衡配置    upstream web_servers &#123;    server localhost:8082;    &#125;    include       mime.types;    default_type  application/octet-stream;     #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;     #access_log  logs/access.log  main;     sendfile        on;    #tcp_nopush     on;     #keepalive_timeout  0;        #==客户端链接超时时间    keepalive_timeout  65;     #gzip  on;     #当配置多个server节点时，默认server names的缓存区大小就不够了，需要手动设置大一点    server_names_hash_bucket_size 512;     #server表示虚拟主机可以理解为一个站点，可以配置多个server节点搭建多个站点    #每一个请求进来确定使用哪个server由server_name确定    server &#123;        #站点监听端口        listen       80;        #站点访问域名        server_name  localhost;                #编码格式，避免url参数乱码        charset utf-8;         #access_log  logs/host.access.log  main;         #location用来匹配同一域名下多个URI的访问规则        #比如动态资源如何跳转，静态资源如何跳转等        #location后面跟着的/代表匹配规则        location / &#123;            #站点根目录，可以是相对路径，也可以使绝对路径            root   html;            #默认主页            index  index.html index.htm;                        #转发后端站点地址，一般用于做软负载，轮询后端服务器            #proxy_pass http://ip:端口;             #拒绝请求，返回403，一般用于某些目录禁止访问            #deny all;                        #允许请求            #allow all;                        add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;            add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;            add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;            add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;;            #重新定义或者添加发往后端服务器的请求头            #给请求头中添加客户请求主机名            proxy_set_header Host $host;            #给请求头中添加客户端IP            proxy_set_header X-Real-IP $remote_addr;            #将$remote_addr变量值添加在客户端“X-Forwarded-For”请求头的后面，并以逗号分隔。 如果客户端请求未携带“X-Forwarded-For”请求头，$proxy_add_x_forwarded_for变量值将与$remote_addr变量相同              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            #给请求头中添加客户端的Cookie            proxy_set_header Cookie $http_cookie;            #将使用代理服务器的主域名和端口号来替换。如果端口是80，可以不加。            proxy_redirect off;                        #浏览器对 Cookie 有很多限制，如果 Cookie 的 Domain 部分与当前页面的 Domain 不匹配就无法写入。            #所以如果请求 A 域名，服务器 proxy_pass 到 B 域名，然后 B 服务器输出 Domian=B 的 Cookie，            #前端的页面依然停留在 A 域名上，于是浏览器就无法将 Cookie 写入。            　　         #不仅是域名，浏览器对 Path 也有限制。我们经常会 proxy_pass 到目标服务器的某个 Path 下，            #不把这个 Path 暴露给浏览器。这时候如果目标服务器的 Cookie 写死了 Path 也会出现 Cookie 无法写入的问题。                        #设置“Set-Cookie”响应头中的domain属性的替换文本，其值可以为一个字符串、正则表达式的模式或一个引用的变量            #转发后端服务器如果需要Cookie则需要将cookie domain也进行转换，否则前端域名与后端域名不一致cookie就会无法存取　　　　　　  #配置规则：proxy_cookie_domain serverDomain(后端服务器域) nginxDomain(nginx服务器域)            proxy_cookie_domain localhost .testcaigou800.com;                        #取消当前配置级别的所有proxy_cookie_domain指令            #proxy_cookie_domain off;            #与后端服务器建立连接的超时时间。一般不可能大于75秒；            proxy_connect_timeout 30;        &#125;        #用户相关的请求，转到sob-bloglocation ^~/user/ &#123;            proxy_pass   http://web_servers;<span class="hljs-meta prompt_">#</span><span class="language-bash">以下是一些反向代理的配置可删除</span>proxy_redirect             off; <span class="hljs-meta prompt_">#</span><span class="language-bash">后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span>proxy_set_header           Host $host;proxy_set_header    Cookie $http_cookie;proxy_set_header           X-Real-IP $remote_addr; proxy_set_header           X-Forwarded-For $proxy_add_x_forwarded_for;proxy_set_header           HTTP_X_FORWARDED_FOR $remote_addr;proxy_set_header           X-Forwarded-Server $host;        &#125;        location ^~/admin/ &#123;            proxy_pass   http://web_servers;<span class="hljs-meta prompt_">#</span><span class="language-bash">以下是一些反向代理的配置可删除</span>proxy_redirect             off; <span class="hljs-meta prompt_">#</span><span class="language-bash">后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span>proxy_set_header           Host $host;proxy_set_header    Cookie $http_cookie;proxy_set_header           X-Real-IP $remote_addr; proxy_set_header           X-Forwarded-For $proxy_add_x_forwarded_for;proxy_set_header           HTTP_X_FORWARDED_FOR $remote_addr;proxy_set_header           X-Forwarded-Server $host;        &#125;                location ^~/portal/ &#123;           proxy_pass   http://web_servers;<span class="hljs-meta prompt_">#</span><span class="language-bash">以下是一些反向代理的配置可删除</span>proxy_redirect             off; <span class="hljs-meta prompt_">#</span><span class="language-bash">后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span>proxy_set_header           Host $host;proxy_set_header    Cookie $http_cookie;proxy_set_header           X-Real-IP $remote_addr; proxy_set_header           X-Forwarded-For $proxy_add_x_forwarded_for;proxy_set_header           HTTP_X_FORWARDED_FOR $remote_addr;proxy_set_header           X-Forwarded-Server $host;        &#125;         #error_page  404              /404.html;         # redirect server error pages to the static page /50x.html        #        error_page   500 502 503 504  /50x.html;        location = /50x.html &#123;            root   html;        &#125;     &#125;</code></pre></div><h1 id="linux服务器上jar包启动及关闭方式"><a href="#linux服务器上jar包启动及关闭方式" class="headerlink" title="linux服务器上jar包启动及关闭方式"></a>linux服务器上jar包启动及关闭方式</h1><h2 id="1、直接启动"><a href="#1、直接启动" class="headerlink" title="1、直接启动"></a>1、直接启动</h2><div class="code-wrapper"><pre><code class="hljs shell">java -jar chapter.jar</code></pre></div><blockquote><p>这种启动方式有个缺点：启动好了之后就不能动了，不能ctrl+c退出，也不能关闭终端，一旦退出或者关闭终端，程序就会关闭。</p></blockquote><h2 id="2-后台启动"><a href="#2-后台启动" class="headerlink" title="2.后台启动"></a>2.后台启动</h2><div class="code-wrapper"><pre><code class="hljs shell">java -jar chapter.jar &amp;</code></pre></div><blockquote><p>&amp;符号就代表后台启动，这种启动方式日志仍然输入到终端控制台中，但是ctrl+c不会关闭程序，退出终端，程序会关闭</p></blockquote><h2 id="3-nohup启动"><a href="#3-nohup启动" class="headerlink" title="3.nohup启动"></a>3.nohup启动</h2><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">nohup</span> java -jar chapter.jar &amp;</code></pre></div><blockquote><p>这种方式会生成一个nohup.out来记录日志，所以日志不会直接输出到终端，而且这种方式启动，ctrl+c或者关闭终端，程序都不会结束</p></blockquote><h2 id="4、指定日志文件"><a href="#4、指定日志文件" class="headerlink" title="4、指定日志文件"></a>4、指定日志文件</h2><p>nohup启动的日志输出文件nohup.out是自动生成的，但是我们更希望自己指定日志输出文件，用以下命令：</p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">nohup</span> java -jar chapter.jar &gt; logs.log &amp;</code></pre></div><blockquote><p>此命令会将日志重定向到当前的logs.log文件中，但是只会输出标准输出。这种方式启动，ctrl+c或者关闭终端，程序都不会结束</p></blockquote><h2 id="5、重定向错误输出（推荐）"><a href="#5、重定向错误输出（推荐）" class="headerlink" title="5、重定向错误输出（推荐）"></a>5、重定向错误输出（推荐）</h2><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">nohup</span> java -jar chapter.jar &gt; logs.log 2&gt;&amp;1 &amp;</code></pre></div><blockquote><p>这条命令不懂的可以去了解一下shell脚本，我简单解释一下：<br> Linux下1表示标准输出，2表示错误输出<br>“&gt;logs.log”表示标准输出重定向到logs.log中，默认是标准输出，省略1,不省略的话可以写成1&gt;logs.log;<br>“2&gt;&amp;1”表示错误输出也重定向到logs.log中，其中&amp;1表示前面的logs.log文件，不加&amp;，写成2&gt;1的话就表示把错误输出到1这个文件而不是前面标准输出的文件logs.log，所以&amp;要加上；<br>最后一个&amp;表示以后台方式启动程序。<br>这种方式启动，ctrl+c或者关闭终端，程序都不会结束。</p></blockquote><h2 id="6、以系统服务启动（更推荐）"><a href="#6、以系统服务启动（更推荐）" class="headerlink" title="6、以系统服务启动（更推荐）"></a>6、以系统服务启动（更推荐）</h2><p>​     以系统服务启动，实际上就是自己注册一个系统服务，然后系统服务的功能就是启动此jar包，所以我们就可以通过启动自定义系统服务控制jar包的启动了，这种方式有很多好处，最显而易见的就是系统服务的启动、停止、查看状态、开机自启动等命令能直接管理到jar包进程。</p><ol><li>创建自定义系统服务(只介绍CentOS7下的方式)<br>在/etc/systemd/system目录下创建一个xxx.service文件，xxx就是自定义的服务名称。<br>在文件中写入以下内容：</li></ol><div class="code-wrapper"><pre><code class="hljs sh">[Unit]Description=chapterAfter=syslog.target[Service]ExecStart=/usr/software/jdk1.8.0_221/bin/java -jar /usr/programme/serviceJarTest/chapter.jar[Install]WantedBy=multi-user.target</code></pre></div><blockquote><p>内容解释：<br>[Unit]说明<br>Description:服务的描述<br>After:设置在某个服务启动后启动</p><p>[Service]服务参数配置<br>ExecStart服务运行执行的命令</p><p>[Install]服务安装的相关设置，可设置为多用户</p><p>根据需要，自己修改description和ExecStart的内容即可（ExecStart后面的java命令需要全路径，写java -jar 会启动不了）</p></blockquote><p>​    2. 启动系统服务</p><div class="code-wrapper"><pre><code class="hljs sh">systemctl start 服务名</code></pre></div><div class="code-wrapper"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start xxx  <span class="hljs-comment">#启动服务</span><span class="hljs-params">system</span>ctl status xxx  <span class="hljs-comment">#查看服务状态</span><span class="hljs-params">system</span>ctl stop xxx  <span class="hljs-comment">#停止服务</span><span class="hljs-params">system</span>ctl enable xxx  <span class="hljs-comment">#设置服务开机自启动</span><span class="hljs-params">system</span>ctl disable xxx  <span class="hljs-comment">#取消服务开机自启动</span><span class="hljs-params">system</span>ctl restart xxx  <span class="hljs-comment">#重启服务</span></code></pre></div><h2 id="7、关闭jar包程序"><a href="#7、关闭jar包程序" class="headerlink" title="7、关闭jar包程序"></a>7、关闭jar包程序</h2><ul><li>如果是第一种方式启动，ctrl+c就可以直接关闭</li></ul><ul><li>如果是第二种方式启动，关闭终端就可以关闭程序</li></ul><ul><li>如果是第三四五种方式启动，可以用kill进程的方式结束进程：<br>查看java进程：</li></ul><div class="code-wrapper"><pre><code class="hljs sh">ps -ef | grep java<span class="hljs-comment">#或者</span> ps -ef|grep Blog-0.0.1-SNAPSHOT.jar</code></pre></div><div class="code-wrapper"><pre><code class="hljs sh">//关闭进程<span class="hljs-comment">#24204为查询出来的进程号</span><span class="hljs-built_in">kill</span> -s 9 24204</code></pre></div><h1 id="8-启动"><a href="#8-启动" class="headerlink" title="8.启动"></a>8.启动</h1><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">nohup</span> java -Djasypt.encryptor.password=578bee5369c35ad48751dd979ea4681e -Xms512m -Xmx512m -XX:MaxMetaspaceSize=128m  -XX:MaxNewSize=256m -jar  Blog-0.0.1-SNAPSHOT.jar  &gt; logs.log 2&gt;&amp;1 &amp;</code></pre></div><p>知识点:<br>JDK8之后把-XX:PermSize 和-XX:MaxPermGen移除了，取而代之的是</p><div class="code-wrapper"><pre><code class="hljs sh">-XX:MetaspaceSize=128m （元空间默认大小）-XX:MaxMetaspaceSize=128m （元空间最大大小）</code></pre></div><p>参数介绍:<br>-XX:MetaspaceSize=128m （元空间默认大小）<br>-XX:MaxMetaspaceSize=128m （元空间最大大小）<br>-Xms1024m （堆最大大小）<br>-Xmx1024m （堆默认大小）<br>-Xmn256m （新生代大小）<br>-Xss256k （棧最大深度大小）<br>-XX:SurvivorRatio=8 （新生代分区比例 8:2）<br>-XX:+UseConcMarkSweepGC （指定使用的垃圾收集器，这里使用CMS收集器）<br>-XX:+PrintGCDetails （打印详细的GC日志）</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>无所事事的自己</title>
    <link href="/king/dc7a1e70.html"/>
    <url>/king/dc7a1e70.html</url>
    
    <content type="html"><![CDATA[<p>无所事事、碌碌无为，并不是慢生活，而是消极地活着。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>过自己想要的生活</title>
    <link href="/king/30efca60.html"/>
    <url>/king/30efca60.html</url>
    
    <content type="html"><![CDATA[<p>每个人都有权力过自己想要的生活，喜欢想喜欢的人，做自己想做的事，不辜负自己也不辜负别人。</p><p>余生，过自己想要的生活，</p><p>在能力范围内，选择喜欢的方式，</p><p>活着有太多的身不由己了，</p><p>可以选择的时候，别委屈自己，</p><p>每一个人都有属于自己的人生，</p><p>生活，没必要模仿别人的节奏，</p><p>幸福和快乐，向来是源于内心，</p><p>你有你的美好，他自有他的精彩。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker使用手册</title>
    <link href="/king/7c29175f.html"/>
    <url>/king/7c29175f.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、Docker简介"><a href="#一、Docker简介" class="headerlink" title="一、Docker简介"></a>一、Docker简介</h1><blockquote><p>Docker 是基于Go语言实现的开源容器项目。利用操作系统本身已有的机制和特性，可以实现远超传统虚拟机的轻量级虚拟化（通俗解释：Docker内嵌极小型系统，例如Linux只有5M多，windows也是）。它是内核级的虚拟化。期望达到使项目运行环境“一次封装，到处运行的目的”。</p></blockquote><blockquote><p>在Docker里面可以设置使用Windows还是Linux系统，默认是用Linux系统，基于Ubuntu的，只有5M多，包含了最基本功能。<br>利用docker创建的运行环境叫做docker容器，容器是通过docker镜像创建的，docker镜像文件可以放在私有仓库中也可以放在共有仓库中。<br>官网地址：<a href="https://www.docker.com/">https://www.docker.com</a><br>DockerFile指令</p></blockquote><div class="code-wrapper"><pre><code class="hljs DockerFile"><span class="hljs-keyword">FROM</span><span class="hljs-comment"># 基础镜像，依赖于谁</span><span class="hljs-keyword">MAINTAINER</span><span class="hljs-comment"># 作者：姓名+邮箱</span><span class="hljs-keyword">RUN</span><span class="language-bash"><span class="hljs-comment"># 镜像构建的时候需要运行的命令</span></span><span class="hljs-keyword">ADD</span><span class="language-bash"><span class="hljs-comment"># 添加，可以添加其他镜像</span></span><span class="hljs-keyword">WORKDIR</span><span class="language-bash"><span class="hljs-comment"># 镜像的工作目录</span></span><span class="hljs-keyword">VOLUME</span><span class="language-bash"><span class="hljs-comment"># 挂载的目录</span></span><span class="hljs-keyword">EXPOSE</span><span class="hljs-comment"># 暴露的端口</span><span class="hljs-keyword">CMD</span><span class="language-bash"><span class="hljs-comment"># 指定这个容器启动的时候需要运行的命令，最后一个才会生效</span></span><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"><span class="hljs-comment"># 指定这个容器启动的时候需要运行的命令，可以追加</span></span><span class="hljs-keyword">ONBUILD</span><span class="hljs-comment"># 当dockerfile被构建的时候触发的指令</span><span class="hljs-keyword">COPY</span><span class="language-bash"><span class="hljs-comment"># 类似ADD，讲文件拷贝到镜像中</span></span><span class="hljs-keyword">ENV</span><span class="hljs-comment"># 构建的时候设置环境变量</span><span class="hljs-keyword">ARG</span><span class="hljs-comment"># 创建镜像过程中使用的变量</span><span class="hljs-keyword">LABEL</span><span class="language-bash"><span class="hljs-comment"># 为生成的镜像添加元数据标签信息</span></span><span class="hljs-keyword">STOPSIGNAL</span><span class="hljs-comment"># 退出的信号值</span><span class="hljs-keyword">HEALTHCHECK</span><span class="language-bash"><span class="hljs-comment"># 配置所启动容器如何进行健康检查</span></span><span class="hljs-keyword">SHELL</span><span class="language-bash"><span class="hljs-comment"># 指定默认shell类型</span></span></code></pre></div><h1 id="二、Linux系统中Docker-安装与启动"><a href="#二、Linux系统中Docker-安装与启动" class="headerlink" title="二、Linux系统中Docker 安装与启动"></a>二、Linux系统中Docker 安装与启动</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><h3 id="1-1-下载docker-ce-repo"><a href="#1-1-下载docker-ce-repo" class="headerlink" title="1.1.下载docker-ce repo"></a>1.1.下载docker-ce repo</h3><div class="code-wrapper"><pre><code class="hljs awk">curl https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos<span class="hljs-regexp">/docker-ce.repo -o /</span>etc<span class="hljs-regexp">/yum.repos.d/</span>docker-ce.repo</code></pre></div><h3 id="1-2-安装依赖"><a href="#1-2-安装依赖" class="headerlink" title="1.2. 安装依赖"></a>1.2. 安装依赖</h3><div class="code-wrapper"><pre><code class="hljs awk">yum install -y https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>fedora<span class="hljs-regexp">/30/</span>x86_64<span class="hljs-regexp">/stable/</span>Packages/containerd.io-<span class="hljs-number">1.2</span>.<span class="hljs-number">6</span>-<span class="hljs-number">3.3</span>.fc30.x86_64.rpm</code></pre></div><h3 id="1-3-安装docker-ce"><a href="#1-3-安装docker-ce" class="headerlink" title="1.3. 安装docker-ce"></a>1.3. 安装docker-ce</h3><div class="code-wrapper"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y docker-ce</code></pre></div><h2 id="2-启动"><a href="#2-启动" class="headerlink" title="2.启动"></a>2.启动</h2><h3 id="2-1-启动命令"><a href="#2-1-启动命令" class="headerlink" title="2.1. 启动命令"></a>2.1. 启动命令</h3><div class="code-wrapper"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> docker</code></pre></div><h3 id="2-2-查看Docker状态"><a href="#2-2-查看Docker状态" class="headerlink" title="2.2. 查看Docker状态"></a>2.2. 查看Docker状态</h3><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> <span class="hljs-literal">info</span></code></pre></div><p>结果如下:</p><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211003144315752.png" alt="image-20211003144315752"></p><h2 id="3-镜像加速器配置"><a href="#3-镜像加速器配置" class="headerlink" title="3.镜像加速器配置"></a>3.镜像加速器配置</h2><p>默认情况下Docker从Docker Hub上下载镜像资源，但速度很慢，可以通过配置国内的镜像加速器来解决。</p><h3 id="3-1-使用阿里云镜像"><a href="#3-1-使用阿里云镜像" class="headerlink" title="3.1. 使用阿里云镜像"></a>3.1. 使用阿里云镜像</h3><p>网址：<a href="https://www.aliyun.com/">https://www.aliyun.com/</a></p><h3 id="3-2-进入容器镜像服务"><a href="#3-2-进入容器镜像服务" class="headerlink" title="3.2. 进入容器镜像服务"></a>3.2. 进入容器镜像服务</h3><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/wps57F3.tmp.jpg" alt="img"></p><h3 id="3-3-进入管理控制台"><a href="#3-3-进入管理控制台" class="headerlink" title="3.3.  进入管理控制台"></a>3.3.  进入管理控制台</h3><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/wpsA606.tmp.jpg" alt="img"></p><h3 id="3-4-进入镜像加速器"><a href="#3-4-进入镜像加速器" class="headerlink" title="3.4. 进入镜像加速器"></a>3.4. 进入镜像加速器</h3><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/wps5050.tmp.jpg" alt="img"></p><h3 id="3-5-选择对应的OS并配置"><a href="#3-5-选择对应的OS并配置" class="headerlink" title="3.5. 选择对应的OS并配置"></a>3.5. 选择对应的OS并配置</h3><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/wpsDEF5.tmp.jpg" alt="img"></p><h3 id="3-6-验证镜像加速器是否配置成功"><a href="#3-6-验证镜像加速器是否配置成功" class="headerlink" title="3.6. 验证镜像加速器是否配置成功"></a>3.6. 验证镜像加速器是否配置成功</h3><p>通过docker info命令验证镜像加速器配置，结果如下：</p><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211003145815941.png" alt="image-20211003145815941"></p><h1 id="三、安装redis"><a href="#三、安装redis" class="headerlink" title="三、安装redis"></a>三、安装redis</h1><h2 id="1-获取redis镜像"><a href="#1-获取redis镜像" class="headerlink" title="1.获取redis镜像"></a>1.获取redis镜像</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull redis:<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5</span></code></pre></div><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211003150145019.png" alt="image-20211003150145019"></p><h2 id="2-查看本地镜像"><a href="#2-查看本地镜像" class="headerlink" title="2.查看本地镜像"></a>2.查看本地镜像</h2><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span></code></pre></div><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211003150246436.png" alt="image-20211003150246436"></p><h3 id="3-从官网获取redis-config配置文件"><a href="#3-从官网获取redis-config配置文件" class="headerlink" title="3.从官网获取redis.config配置文件"></a>3.从官网获取redis.config配置文件</h3><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment"># 进入文件夹</span>cd <span class="hljs-regexp">/local/</span>dockerwget http:<span class="hljs-regexp">//</span>download.redis.io<span class="hljs-regexp">/redis-stable/</span>redis.conf   <span class="hljs-regexp">//</span>下载redis配置文件vim redis.conf  <span class="hljs-regexp">//</span>修改配置文件</code></pre></div><blockquote><p>1.注释bind 127.0.0.1。这里限制redis只能本地访问，注释掉之后使redis可以外部访问；<br>2.protected-mode yes 修改为 protected-mode no。默认yes，开启保护模式，限制仅本地访问，改为no之后使redis可以外部访问；<br>3.daemonize no 。默认no，当前界面将进入redis的命令行界面，exit强制退出或者关闭连接工具(putty,xshell等)都会导致redis进程退出。 改为yes意为以守护进程方式启动，该模式下，redis会在后台运行，并将进程pid号写入至redis.conf选项pidfile设置的文件中，此时redis将一直运行，除非手动kill该进程，如果改为yes会使以配置文件方式启动redis的方式失败。<br>4.requirepass pwd。这里的pwd是自己设置的密码，可以不开启，不开启表示无需密码即可连接。<br>5.databases 16。默认数据库个数16，可以不修改。<br>6.appendonly no。默认 no，表示不开启aof方式持久化，改为appendonly yes表示开启aof，可以不修改该配置。</p></blockquote><p>文件夹如下:</p><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211003183929810.png" alt="image-20211003183929810"></p><h3 id="4-启动redis"><a href="#4-启动redis" class="headerlink" title="4. 启动redis"></a>4. 启动redis</h3><div class="code-wrapper"><pre><code class="hljs awk">docker run \--name redis \-p <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span> \--restart unless-stopped \-v <span class="hljs-regexp">/local/</span>docker<span class="hljs-regexp">/redis/</span>data:/data \-v <span class="hljs-regexp">/local/</span>docker<span class="hljs-regexp">/redis/</span>conf<span class="hljs-regexp">/redis.conf:/</span>etc<span class="hljs-regexp">/redis/</span>redis.conf \-d redis redis-server <span class="hljs-regexp">/etc/</span>redis/redis.conf \</code></pre></div><h3 id="5-查看redis运行是否成功"><a href="#5-查看redis运行是否成功" class="headerlink" title="5. 查看redis运行是否成功"></a>5. 查看redis运行是否成功</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#查看redis容器运行</span>docker ps |grep redis <span class="hljs-comment">#进入redis容器中</span>docker <span class="hljs-built_in">exec</span> -it redis /bin/bash<span class="hljs-comment">#使用redis客户端</span>redis-cli<span class="hljs-comment">#设置密码</span>config <span class="hljs-built_in">set</span> requirepass 123456</code></pre></div><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211003220721877.png" alt="image-20211003220721877"></p><h1 id="四、安装mysql"><a href="#四、安装mysql" class="headerlink" title="四、安装mysql"></a>四、安装mysql</h1><h2 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1. 拉取镜像"></a>1. 拉取镜像</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull mysql:<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">16</span></code></pre></div><h2 id="2-创建数据目录和配置文件"><a href="#2-创建数据目录和配置文件" class="headerlink" title="2. 创建数据目录和配置文件"></a>2. 创建数据目录和配置文件</h2><div class="code-wrapper"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@king</span> docker]<span class="hljs-meta"># mkdir -p mysql</span>[root<span class="hljs-symbol">@king</span> docker]<span class="hljs-meta"># cd mysql/</span>[root<span class="hljs-symbol">@king</span> mysql]<span class="hljs-meta"># mkdir data</span>[root<span class="hljs-symbol">@king</span> mysql]<span class="hljs-meta"># mkdir conf</span>[root<span class="hljs-symbol">@king</span> mysql]<span class="hljs-meta"># chmod -R 755 /local/docker/mysql</span>[root<span class="hljs-symbol">@king</span> mysql]<span class="hljs-meta"># cd conf/</span>[root<span class="hljs-symbol">@king</span> conf]<span class="hljs-meta"># vim my.cnf</span></code></pre></div><p>添加以下内容到上述创建的配置文件中</p><div class="code-wrapper"><pre><code class="hljs shell">[client]<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">socket = /usr/mysql/mysqld.sock</span>default-character-set = utf8mb4[mysqld]<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">pid-file        = /var/run/mysqld/mysqld.pid</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">socket          = /var/run/mysqld/mysqld.sock</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">datadir         = /var/lib/mysql</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">socket = /usr/mysql/mysqld.sock</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">pid-file = /usr/mysql/mysqld.pid</span>datadir = /local/docker/mysql/datacharacter_set_server = utf8mb4collation_server = utf8mb4_binsecure-file-priv= NULL<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic-links=0<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">Custom config should go here</span>!includedir /etc/mysql/conf.d/</code></pre></div><h2 id="3-启动创建容器"><a href="#3-启动创建容器" class="headerlink" title="3.启动创建容器"></a>3.启动创建容器</h2><div class="code-wrapper"><pre><code class="hljs awk">docker run --restart=unless-stopped -d --name mysql \-v <span class="hljs-regexp">/local/</span>docker<span class="hljs-regexp">/mysql/</span>conf<span class="hljs-regexp">/my.cnf:/</span>etc<span class="hljs-regexp">/mysql/my</span>.cnf \-v <span class="hljs-regexp">/local/</span>docker<span class="hljs-regexp">/mysql/</span>data:<span class="hljs-regexp">/var/</span>lib/mysql -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> -e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> mysql:<span class="hljs-number">8.0</span>.<span class="hljs-number">16</span></code></pre></div><p>查看容器启动情况</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> <span class="hljs-literal">info</span></code></pre></div><h2 id="4-修改mysql密码以及可访问主机"><a href="#4-修改mysql密码以及可访问主机" class="headerlink" title="4.修改mysql密码以及可访问主机"></a>4.修改mysql密码以及可访问主机</h2><ul><li>进入mysql容器内部</li></ul><div class="code-wrapper"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@king</span> conf]<span class="hljs-meta"># docker exec -it mysql /bin/bash</span></code></pre></div><ul><li><p>连接mysql</p><div class="code-wrapper"><pre><code class="hljs css">mysql -uroot -<span class="hljs-selector-tag">p</span></code></pre></div></li><li><p>使用mysql库</p><div class="code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-keyword">use</span> mysql</code></pre></div></li><li><p>修改访问主机以及密码等，设置为所有主机可访问</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;</code></pre></div></li><li><p>刷新</p><div class="code-wrapper"><pre><code class="hljs arduino">flush privileges</code></pre></div></li></ul><h1 id="五、安装JDK8"><a href="#五、安装JDK8" class="headerlink" title="五、安装JDK8"></a>五、安装JDK8</h1><h2 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h2><div class="code-wrapper"><pre><code class="hljs shell">yum install java-1.8.0-openjdk* -y</code></pre></div><p>执行过这条命令无需配置，直接可以使用。</p><h2 id="1-上传文件"><a href="#1-上传文件" class="headerlink" title="1.上传文件"></a>1.上传文件</h2><p>将jdk文件上传到/local/upload</p><h2 id="2-解压压缩包"><a href="#2-解压压缩包" class="headerlink" title="2.解压压缩包"></a>2.解压压缩包</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> zxf jdk-<span class="hljs-number">8</span>u311-linux-x64.tar.gz</code></pre></div><h2 id="3-移动文件"><a href="#3-移动文件" class="headerlink" title="3.移动文件"></a>3.移动文件</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">mv</span> jdk1.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>_311 /local/soft/jdk</code></pre></div><h2 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4.配置环境变量"></a>4.配置环境变量</h2><blockquote><p>在linux中/etc/profile此文件为环境变量配置文件。</p></blockquote><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment">#export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL</span><span class="hljs-built_in">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/local/soft/jdk<span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$JAVA_HOME</span>/bin:$PATH</code></pre></div><div class="code-wrapper"><pre><code class="hljs vim">#进入etc文件夹并且编译<span class="hljs-keyword">profile</span>文件<span class="hljs-keyword">cd</span> /etc &amp;&amp; <span class="hljs-keyword">vim</span> <span class="hljs-keyword">profile</span></code></pre></div><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211004113003179.png" alt="image-20211004113003179"></p><h2 id="5-解析文件"><a href="#5-解析文件" class="headerlink" title="5.解析文件"></a>5.解析文件</h2><blockquote><p>不解析，必须通过重启才能生效。只要解析不需要重启了</p></blockquote><div class="code-wrapper"><pre><code class="hljs gradle"><span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile</code></pre></div><h2 id="6-查看配置是否成功"><a href="#6-查看配置是否成功" class="headerlink" title="6.查看配置是否成功"></a>6.查看配置是否成功</h2><div class="code-wrapper"><pre><code class="hljs applescript">java -<span class="hljs-built_in">version</span></code></pre></div><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211004113221989.png" alt="image-20211004113221989"></p><h1 id="六、安装solr"><a href="#六、安装solr" class="headerlink" title="六、安装solr"></a>六、安装solr</h1><h2 id="1-上传文件-1"><a href="#1-上传文件-1" class="headerlink" title="1.上传文件"></a>1.上传文件</h2><blockquote><p>上传压缩包solr-8.2.0.tgz到/local/upload中。</p></blockquote><h2 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h2><div class="code-wrapper"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@king</span> upload]<span class="hljs-meta"># tar zxf solr-8.2.0.tgz </span></code></pre></div><h2 id="3-移动文件-1"><a href="#3-移动文件-1" class="headerlink" title="3.移动文件"></a>3.移动文件</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">mv</span> solr-<span class="hljs-number">8</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span> /local/soft/solr</code></pre></div><h2 id="4-Solr常用目录简介"><a href="#4-Solr常用目录简介" class="headerlink" title="4.Solr常用目录简介"></a>4.Solr常用目录简介</h2><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211004113700431.png" alt="image-20211004113700431"></p><blockquote><p>bin目录：可执行文件所在目录。<br>dist目录：Solr对外提供的核心、扩展、插件等代码jar文件。<br>server目录：Solr搜索应用服务器核心目录。<br>server/solr：Solr的索引库所在位置<br>server/solr-webapp：Solr的WAR核心应用<br>server/etc：Solr的核心配置</p></blockquote><h2 id="5-修改启动参数"><a href="#5-修改启动参数" class="headerlink" title="5.修改启动参数"></a>5.修改启动参数</h2><blockquote><p>修改启动参数，否则启动时报警告。提示设置SOLR_ULIMIT_CHECKS=false</p></blockquote><div class="code-wrapper"><pre><code class="hljs vim">[root@king solr]# <span class="hljs-keyword">cd</span> bin &amp;&amp; <span class="hljs-keyword">vim</span> solr.in.<span class="hljs-keyword">sh</span></code></pre></div><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/wps1976.tmp.jpg" alt="img"></p><h2 id="6-启动solr"><a href="#6-启动solr" class="headerlink" title="6.启动solr"></a>6.启动solr</h2><blockquote><p>Solr内嵌Jetty，直接启动即可。默认监听8983端口。<br>Solr默认不推荐root账户启动，如果是root账户启动需要添加-force参数。</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">./solr start -force</code></pre></div><p>启动成功如下图所示:</p><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211004114327791.png" alt="image-20211004114327791"></p><p>==注意:阿里云服务器8983端口放行==</p><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211004114629744.png" alt="image-20211004114629744"></p><h2 id="7-可视化管理界面"><a href="#7-可视化管理界面" class="headerlink" title="7.可视化管理界面"></a>7.可视化管理界面</h2><blockquote><p>在浏览器输入ip:8983就可以打开solr可视化管理页面了</p></blockquote><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211004114856090.png" alt="image-20211004114856090"></p><p>左侧有5个菜单。分别是：<br>（1）Dashboard：面板显示Solr的总体信息。<br>（2）Logging：日志<br>（3）Core Admin：Solr的核心。类似于数据的Database<br>（4）Java Perperties：所有Java相关属性。<br>（5）Thread Dump：线程相关信息。<br>（6）如果有Core，将显示在此处。</p><h2 id="8-创建核心-索引库"><a href="#8-创建核心-索引库" class="headerlink" title="8.创建核心(索引库)"></a>8.创建核心(索引库)</h2><p>==Solr安装完成后默认是没有核心的。需要手动配置。==</p><p><strong>需要在solr/server/solr下新建文件夹，并给定配置文件，否则无法建立。</strong></p><h3 id="8-1-新建目录"><a href="#8-1-新建目录" class="headerlink" title="8.1 新建目录"></a>8.1 新建目录</h3><p>在 /local/soft/solr/server/solr中新建自定义名称目录。这里我创建了名为blog的目录</p><div class="code-wrapper"><pre><code class="hljs autoit"><span class="hljs-meta">#进入对应文件夹</span>[root<span class="hljs-symbol">@king</span> ~]<span class="hljs-meta"># cd /local/soft/solr/server/solr</span><span class="hljs-meta">#创建blog文件夹</span>[root<span class="hljs-symbol">@king</span> solr]<span class="hljs-meta"># mkdir blog</span></code></pre></div><h3 id="8-2-复制配置文件"><a href="#8-2-复制配置文件" class="headerlink" title="8.2 复制配置文件"></a>8.2 复制配置文件</h3><blockquote><p>在configsets里面包含了_default和sample_techproducts_configs。里面都是配置文件示例。_default属于默认配置，较纯净。sample_techproducts_configs是带有了一些配置示例。</p></blockquote><div class="code-wrapper"><pre><code class="hljs gradle">[root@king solr]# cp -r configsets<span class="hljs-regexp">/_default/</span>conf<span class="hljs-regexp">/ blog/</span></code></pre></div><h3 id="8-3-创建-core"><a href="#8-3-创建-core" class="headerlink" title="8.3 创建 core"></a>8.3 创建 core</h3><p>在可视化管理界面填写如下信息</p><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211004174045581.png" alt="image-20211004174045581"></p><p>最后点击Add Core按钮创建</p><p>创建成功结果如下：</p><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211004174415937.png" alt="image-20211004174415937"></p><h2 id="9-安装中文分词器"><a href="#9-安装中文分词器" class="headerlink" title="9.安装中文分词器"></a>9.安装中文分词器</h2><h3 id="9-1上传文件"><a href="#9-1上传文件" class="headerlink" title="9.1上传文件"></a>9.1上传文件</h3><p>上传ik-analyzer-8.2.0.jar到/local/upload文件夹下</p><h3 id="9-2复制文件"><a href="#9-2复制文件" class="headerlink" title="9.2复制文件"></a>9.2复制文件</h3><p>将ik-analyzer-8.2.0.jar文件复制/local/soft/solr/server/solr-webapp/webapp/WEB-INF/lib文件夹下</p><div class="code-wrapper"><pre><code class="hljs shell">[root@king upload]# cp ik-analyzer-8.2.0.jar /local/soft/solr/server/solr-webapp/webapp/WEB-INF/lib/</code></pre></div><h3 id="9-3修改配置文件"><a href="#9-3修改配置文件" class="headerlink" title="9.3修改配置文件"></a>9.3修改配置文件</h3><h4 id="修改managed-schema文件"><a href="#修改managed-schema文件" class="headerlink" title="修改managed-schema文件"></a>修改managed-schema文件</h4><div class="code-wrapper"><pre><code class="hljs shell">[root@king /]# vim /local/soft/solr/server/solr/blog/conf/managed-schema</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell">&lt;fieldType name=&quot;text_zh_cn&quot; class=&quot;solr.TextField&quot;&gt;            &lt;analyzer&gt;                    &lt;tokenizer class=&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot; useSmart=&quot;false&quot; conf=&quot;ik.conf&quot;/&gt;                    &lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&gt;            &lt;/analyzer&gt;            &lt;analyzer type=&quot;query&quot;&gt;                    &lt;tokenizer class=&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot; useSmart=&quot;true&quot; conf=&quot;ik.conf&quot;/&gt;                    &lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&gt;            &lt;/analyzer&gt;&lt;/fieldType&gt;&lt;!--自定义字段，类似于设计数据表一样--&gt;&lt;!--ID--&gt;&lt;!--ID 已经在前面有了--&gt;&lt;!--浏览量--&gt;&lt;field name=&quot;blog_view_count&quot; type=&quot;pint&quot; indexed=&quot;true&quot; stored=&quot;true&quot; required=&quot;true&quot; multiValued=&quot;false&quot; /&gt;&lt;!--标题--&gt;&lt;field name=&quot;blog_title&quot; type=&quot;text_zh_cn&quot; indexed=&quot;true&quot; stored=&quot;true&quot; required=&quot;true&quot; multiValued=&quot;false&quot; /&gt;&lt;!--主题--&gt;&lt;field name=&quot;blog_summary&quot; type=&quot;text_zh_cn&quot; indexed=&quot;true&quot; stored=&quot;true&quot; required=&quot;true&quot; multiValued=&quot;false&quot; /&gt;&lt;!--创建时间--&gt;&lt;field name=&quot;blog_create_time&quot; type=&quot;pdate&quot; indexed=&quot;true&quot; stored=&quot;true&quot; required=&quot;true&quot; multiValued=&quot;false&quot; /&gt;&lt;!--标签--&gt;&lt;field name=&quot;blog_labels&quot; type=&quot;pstring&quot; indexed=&quot;true&quot; stored=&quot;true&quot; required=&quot;true&quot; multiValued=&quot;false&quot; /&gt;&lt;!--文章链接--&gt;&lt;field name=&quot;blog_url&quot; type=&quot;pstring&quot; indexed=&quot;true&quot; stored=&quot;true&quot; required=&quot;true&quot; multiValued=&quot;false&quot; /&gt;&lt;!--分类ID--&gt;&lt;field name=&quot;blog_category_id&quot; type=&quot;pstring&quot; indexed=&quot;true&quot; stored=&quot;true&quot; required=&quot;true&quot; multiValued=&quot;false&quot; /&gt;&lt;!--搜索item--&gt;&lt;field name=&quot;search_item&quot; type=&quot;text_zh_cn&quot; indexed=&quot;true&quot; stored=&quot;true&quot; required=&quot;true&quot; multiValued=&quot;true&quot; /&gt;&lt;copyField source=&quot;blog_title&quot; dest=&quot;search_item&quot;/&gt;&lt;copyField source=&quot;blog_summary&quot; dest=&quot;search_item&quot;/&gt;&lt;copyField source=&quot;blog_labels&quot; dest=&quot;search_item&quot;/&gt;</code></pre></div><blockquote><p>排版：Esc 退出编辑状态下：gg=G</p></blockquote><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211004220435973.png" alt="image-20211004220435973"></p><h3 id="9-4-重启"><a href="#9-4-重启" class="headerlink" title="9.4 重启"></a>9.4 重启</h3><div class="code-wrapper"><pre><code class="hljs awk">[root@king <span class="hljs-regexp">/]# cd /</span>local<span class="hljs-regexp">/soft/</span>solr<span class="hljs-regexp">/bin/</span>[root@king bin]<span class="hljs-comment"># ./solr stop -all</span>[root@king bin]<span class="hljs-comment"># ./solr start -force</span></code></pre></div><h3 id="9-5-验证"><a href="#9-5-验证" class="headerlink" title="9.5 验证"></a>9.5 验证</h3><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211004225457462.png" alt="image-20211004225457462"></p><p><img src="https://upload-images.jianshu.io/upload_images/10139744-19785d5c0484474c.jpg" alt="img"></p><p>图片来源于:<a href="https://upload-images.jianshu.io/upload_images/10139744-19785d5c0484474c.jpg">https://upload-images.jianshu.io/upload_images/10139744-19785d5c0484474c.jpg</a></p><h3 id="9-6-删除全部数据"><a href="#9-6-删除全部数据" class="headerlink" title="9.6 删除全部数据"></a>9.6 删除全部数据</h3><blockquote><p>1)documents type 选择 XML<br>2)documents 输入下面语句</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">query</span>&gt;</span>*:*<span class="hljs-tag">&lt;/<span class="hljs-name">query</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">commit</span>/&gt;</span></code></pre></div></blockquote><h3 id="10-使用DockerFile构建solr镜像"><a href="#10-使用DockerFile构建solr镜像" class="headerlink" title="10 使用DockerFile构建solr镜像"></a>10 使用DockerFile构建solr镜像</h3><h4 id="10-1-创建solr目录"><a href="#10-1-创建solr目录" class="headerlink" title="10.1 创建solr目录"></a>10.1 创建solr目录</h4><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> solr</code></pre></div><h4 id="10-2-新建docker-compose-yml文件"><a href="#10-2-新建docker-compose-yml文件" class="headerlink" title="10.2 新建docker-compose.yml文件"></a>10.2 新建docker-compose.yml文件</h4><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.1&#x27;</span><span class="hljs-attr">services:</span>  <span class="hljs-attr">solr:</span>    <span class="hljs-attr">build:</span> <span class="hljs-string">solrWithIKAnalyzer</span>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">blog_solr</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">8983</span><span class="hljs-string">:8983</span></code></pre></div><h4 id="10-3-将solrWithIKAnalyzer文件夹下的内容全部放入solr文件夹下"><a href="#10-3-将solrWithIKAnalyzer文件夹下的内容全部放入solr文件夹下" class="headerlink" title="10.3 将solrWithIKAnalyzer文件夹下的内容全部放入solr文件夹下"></a>10.3 将solrWithIKAnalyzer文件夹下的内容全部放入solr文件夹下</h4><p>solrWithIKAnalyzer文件夹结构如下</p><p><img src="https://gitee.com/jinguoguang/images/raw/master/img/20220106095732.png" alt="image-20220106095731927"></p><h4 id="10-4-solrWithIKAnalyzer目录下新建Dockerfile文件"><a href="#10-4-solrWithIKAnalyzer目录下新建Dockerfile文件" class="headerlink" title="10.4  solrWithIKAnalyzer目录下新建Dockerfile文件"></a>10.4  solrWithIKAnalyzer目录下新建Dockerfile文件</h4><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment">#新建Dockerfile文件</span>vim Dockerfile<span class="hljs-comment">#填写如下内容</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-keyword">MAINTAINER</span> king<span class="hljs-comment"># 创建 Core，切换目录</span><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/solr/server/solr</span><span class="hljs-comment"># 创建目录</span><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> blog_core</span><span class="hljs-comment"># 切换目录</span><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/solr/server/solr/blog_core</span><span class="hljs-comment"># 把这个Core名称添加到配置文件中，这样在前端就可以看到了</span><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;name=blog_core&#x27;</span> &gt; core.properties</span><span class="hljs-comment"># 从模版中复制一份出来配置文件出来</span><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cp</span> -r /opt/solr/server/solr/configsets/sample_techproducts_configs/conf/ .</span><span class="hljs-comment"># 进入到容器的lib文件夹</span><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/solr/server/solr-webapp/webapp/WEB-INF/lib</span><span class="hljs-comment"># 中文分词器</span><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cp</span> -r /opt/solr/contrib/analysis-extras/lucene-libs/lucene-analyzers-smartcn-5.5.5.jar .</span><span class="hljs-comment"># 复制两个jar包进去</span><span class="hljs-keyword">ADD</span><span class="language-bash"> ik-analyzer-solr5-5.x.jar .</span><span class="hljs-keyword">ADD</span><span class="language-bash"> solr-analyzer-ik-5.1.0.jar .</span><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/solr/server/solr-webapp/webapp/WEB-INF</span><span class="hljs-comment"># 复制字典</span><span class="hljs-keyword">ADD</span><span class="language-bash"> ext.dic .</span><span class="hljs-keyword">ADD</span><span class="language-bash"> stopword.dic .</span><span class="hljs-comment"># 配置扩展字典的配置文件</span><span class="hljs-keyword">ADD</span><span class="language-bash"> IKAnalyzer.cfg.xml .</span><span class="hljs-comment"># 增加分词配置</span><span class="hljs-keyword">COPY</span><span class="language-bash"> managed-schema /opt/solr/server/solr/blog_core/conf</span><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/solr</span></code></pre></div><h4 id="10-5-在solrWithIKAnalyzer目录下构建"><a href="#10-5-在solrWithIKAnalyzer目录下构建" class="headerlink" title="10.5 在solrWithIKAnalyzer目录下构建"></a>10.5 在solrWithIKAnalyzer目录下构建</h4><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> build -t blog_solr:<span class="hljs-number">1</span>.<span class="hljs-number">0</span> .<span class="hljs-comment">#注意后面有个小点不要忽视</span></code></pre></div><h4 id="10-6-在solr目录下使用docker-compose启动容器"><a href="#10-6-在solr目录下使用docker-compose启动容器" class="headerlink" title="10.6 在solr目录下使用docker-compose启动容器"></a>10.6 在solr目录下使用docker-compose启动容器</h4><blockquote><p>Docker Compose是一个用来定义和运行复杂应用的Docker工具。一个使用Docker容器的应用，通常由多个容器组成。使用Docker Compose不再需要使用shell脚本来启动容器。<br>Compose 通过一个配置文件来管理多个Docker容器，在配置文件中，所有的容器通过services来定义，然后使用docker-compose脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器，非常适合组合使用多个容器进行开发的场景。</p></blockquote><h5 id="安装docker-composr"><a href="#安装docker-composr" class="headerlink" title="安装docker-composr"></a>安装docker-composr</h5><ul><li>从github上下载docker-compose二进制文件安装</li></ul> <div class="code-wrapper"><pre><code class="hljs sh">sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`<span class="hljs-built_in">uname</span> -s`-`<span class="hljs-built_in">uname</span> -m` -o /usr/local/bin/docker-compose</code></pre></div><p>  若是github访问太慢，也可以用daocloud下载</p><div class="code-wrapper"><pre><code class="hljs sh">sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`<span class="hljs-built_in">uname</span> -s`-`<span class="hljs-built_in">uname</span> -m` -o /usr/local/bin/docker-compose</code></pre></div><ul><li>添加可执行权限</li></ul> <div class="code-wrapper"><pre><code class="hljs sh">sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose</code></pre></div><ul><li><p>测试安装结果</p><div class="code-wrapper"><pre><code class="hljs sh">docker-compose --version</code></pre></div></li></ul><div class="code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-comment">#以后台的方式运行容器。不会在终端上打印运行日志</span>docker-compose up -d<span class="hljs-comment"># 停止运行的容器，但不会删除它们。</span>docker-compose <span class="hljs-literal">stop</span><span class="hljs-comment">#停止运行的容器，并且会删除已停止的容器以及已创建的所有网络</span>docker-compose down</code></pre></div><h1 id="七、minio服务器安装"><a href="#七、minio服务器安装" class="headerlink" title="七、minio服务器安装"></a>七、minio服务器安装</h1><h2 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1.安装"></a>1.安装</h2><h3 id="1-1拉取镜像"><a href="#1-1拉取镜像" class="headerlink" title="1.1拉取镜像"></a>1.1拉取镜像</h3><div class="code-wrapper"><pre><code class="hljs powershell">docker pull minio/minio</code></pre></div><h3 id="1-2创建并启动容器"><a href="#1-2创建并启动容器" class="headerlink" title="1.2创建并启动容器"></a>1.2创建并启动容器</h3><div class="code-wrapper"><pre><code class="hljs powershell">docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">-p</span> <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span> <span class="hljs-literal">-p</span> <span class="hljs-number">50000</span>:<span class="hljs-number">50000</span> <span class="hljs-literal">--name</span> minio \<span class="hljs-literal">-e</span> <span class="hljs-string">&quot;MINIO_ACCESS_KEY=admin&quot;</span> \<span class="hljs-literal">-e</span> <span class="hljs-string">&quot;MINIO_SECRET_KEY=admin123456&quot;</span> \<span class="hljs-literal">-v</span> /local/docker/minio/<span class="hljs-keyword">data</span>:/<span class="hljs-keyword">data</span> \<span class="hljs-literal">-v</span> /local/d/minio/config:/root/.minio \minio/minio server <span class="hljs-literal">--console-address</span> <span class="hljs-string">&quot;:50000&quot;</span> /<span class="hljs-keyword">data</span></code></pre></div><h3 id="1-3配置阿里云服务器安全组"><a href="#1-3配置阿里云服务器安全组" class="headerlink" title="1.3配置阿里云服务器安全组"></a>1.3配置阿里云服务器安全组</h3><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211020210958366.png" alt="image-20211020210958366"></p><h2 id="2-登录minio服务器管理控制台"><a href="#2-登录minio服务器管理控制台" class="headerlink" title="2.登录minio服务器管理控制台"></a>2.登录minio服务器管理控制台</h2><h3 id="2-1创建游客用户"><a href="#2-1创建游客用户" class="headerlink" title="2.1创建游客用户"></a>2.1创建游客用户</h3><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211020211208054.png" alt="image-20211020211208054"></p><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211020211340198.png" alt="image-20211020211340198"></p><blockquote><p>将权限设置为只读</p></blockquote><h3 id="2-3创建Bucket"><a href="#2-3创建Bucket" class="headerlink" title="2.3创建Bucket"></a>2.3创建Bucket</h3><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211020211507476.png" alt="image-20211020211507476"></p><h3 id="2-4设置Bucket权限为readwrite"><a href="#2-4设置Bucket权限为readwrite" class="headerlink" title="2.4设置Bucket权限为readwrite"></a>2.4设置Bucket权限为readwrite</h3><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211020211701191.png" alt="image-20211020211701191"></p><p><img src="https://gitee.com/ambitions-king/picture/raw/master/img/image-20211020211729145.png" alt="image-20211020211729145"></p><h1 id="八、MongoDB服务安装"><a href="#八、MongoDB服务安装" class="headerlink" title="八、MongoDB服务安装"></a>八、MongoDB服务安装</h1><h2 id="1-拉取镜像-1"><a href="#1-拉取镜像-1" class="headerlink" title="1.拉取镜像"></a>1.拉取镜像</h2><div class="code-wrapper"><pre><code class="hljs sh">docker pull mongo</code></pre></div><h2 id="2-创建目录"><a href="#2-创建目录" class="headerlink" title="2.创建目录"></a>2.创建目录</h2><div class="code-wrapper"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/local/</span>docker<span class="hljs-regexp">/mongo/</span>data</code></pre></div><h2 id="3-修改目录权限"><a href="#3-修改目录权限" class="headerlink" title="3.修改目录权限"></a>3.修改目录权限</h2><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> 777/local/docker/mongo/data</code></pre></div><h2 id="4-构建并启动容器"><a href="#4-构建并启动容器" class="headerlink" title="4.构建并启动容器"></a>4.构建并启动容器</h2><div class="code-wrapper"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -d --name mongodb -v /local/docker/mongo/data:/data/db -p 27017:27017 -e <span class="hljs-attribute">MONGO_INITDB_ROOT_USERNAME</span>=admin -e <span class="hljs-attribute">MONGO_INITDB_ROOT_PASSWORD</span>=admin <span class="hljs-attribute">--privileged</span>=<span class="hljs-literal">true</span> mongo:latest</code></pre></div><blockquote><p>参数说明<br>-d 后台运行容器</p><p>–name mongodb 运行容器名</p><p>-v /mydata/mongodb/datadb:/data/db 挂载目录</p><p>-p 27017:27017：将27017映射到外部端口27017 将容器的27017端口映射到主机的27017端口，27017是和宿主机的通信接口，所有docker内部容器的连接使用27017接口，集群配置需连接容器内部27017端口，故最好保持前后端口一致</p><p>-e MONGO_INITDB_ROOT_USERNAME=admin 指定用户名</p><p>-e MONGO_INITDB_ROOT_PASSWORD=admin 指定密码</p><p>–privileged=true 使得容器内的root拥有真正的root权限。否则，container内的root只是外部的一个普通用户权限</p></blockquote><h2 id="5-查看mongodb日志"><a href="#5-查看mongodb日志" class="headerlink" title="5.查看mongodb日志"></a>5.查看mongodb日志</h2><div class="code-wrapper"><pre><code class="hljs sh">docker logs mongodb</code></pre></div><h2 id="6-mongodb随-docker-自启动"><a href="#6-mongodb随-docker-自启动" class="headerlink" title="6.mongodb随 docker 自启动"></a>6.mongodb随 docker 自启动</h2><div class="code-wrapper"><pre><code class="hljs sh">docker update mongodb --restart=always</code></pre></div><p>注意：这里的 mongodb是容器的名字，不是镜像的名字。</p><h2 id="7-启动-停止-重启"><a href="#7-启动-停止-重启" class="headerlink" title="7. 启动|停止|重启"></a>7. 启动|停止|重启</h2><div class="code-wrapper"><pre><code class="hljs sh">docker start mongodbdocker stop mongodbdocker restart mongodb</code></pre></div><p>注意：这里的 mongodb 是容器的名字，不是镜像的名字。</p><h2 id="8-进入mongodb-optional"><a href="#8-进入mongodb-optional" class="headerlink" title="8.进入mongodb (optional)"></a>8.进入mongodb (optional)</h2><div class="code-wrapper"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it mongodb /bin/bash</code></pre></div><h1 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h1><div class="code-wrapper"><pre><code class="hljs sh">批量启动容器docker container start $(docker container <span class="hljs-built_in">ls</span> -a -q) 或 docker start $(docker container <span class="hljs-built_in">ls</span> -a -q) 批量停止容器docker container stop $(docker container <span class="hljs-built_in">ls</span> -a -q) 或 docker stop $(docker container <span class="hljs-built_in">ls</span> -a -q) 批量重启容器docker container restart $(docker container <span class="hljs-built_in">ls</span> -a -q) 或 docker restart $(docker container <span class="hljs-built_in">ls</span> -a -q) 批量删除容器docker container <span class="hljs-built_in">rm</span> $(docker container <span class="hljs-built_in">ls</span> -a -q) 或 docker <span class="hljs-built_in">rm</span> <span class="hljs-variable">$&#123;docker container ls -a -q&#125;</span>批量杀死容器docker container <span class="hljs-built_in">kill</span> $(docker container <span class="hljs-built_in">ls</span> -a -q) 或 docker <span class="hljs-built_in">kill</span> <span class="hljs-variable">$&#123;docker container ls -a -q&#125;</span>docker查询所有进程docker ps -adocker查询正常运行的进程docker ps容器重新命名docker rename 原容器名称 新容器名称举例: docker rename blissful_hoover solr</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Docker</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
