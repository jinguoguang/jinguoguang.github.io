import{_ as s,c as a,a as e,o as t}from"./app-U8EwA-zE.js";const n={};function h(l,i){return t(),a("div",null,i[0]||(i[0]=[e(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>Go语言提供了丰富且强大的数据类型，这些类型可以分为基本类型和复合类型两大类。下面是Go语言中数据类型的详细介绍：</p><table><thead><tr><th>序号</th><th>类型和描述</th></tr></thead><tbody><tr><td>1</td><td><strong>布尔型</strong><br>布尔型的值只可以是常量 <code>true</code> 或者 <code>false</code>。一个简单的例子：<code>var b bool = true</code>。</td></tr><tr><td>2</td><td><strong>数字类型</strong><br>整型 <code>int</code> 和浮点型 <code>float32</code>、<code>float64</code>，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td></tr><tr><td>3</td><td><strong>字符串类型:</strong><br>字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td></tr><tr><td>4</td><td><strong>派生类型:</strong><br>包括：<br> (a) <strong>指针类型</strong>（Pointer）<br> (b) <strong>数组类型</strong><br>(c) <strong>结构化类型</strong>(struct)<br>(d) <strong>Channel 类型</strong><br>(e) <strong>函数类型</strong><br>(f) <strong>切片类型</strong><br>(g) <strong>接口类型</strong>（interface）<br>(h) <strong>Map 类型</strong></td></tr></tbody></table><p>这个表格列出了Go语言中的一些主要数据类型及其简要描述。</p><h2 id="一、基本数据类型" tabindex="-1"><a class="header-anchor" href="#一、基本数据类型"><span>一、基本数据类型</span></a></h2><h3 id="_1-1-数字类型" tabindex="-1"><a class="header-anchor" href="#_1-1-数字类型"><span>1.1 数字类型</span></a></h3><ul><li><strong>整数类型</strong><ul><li>有符号整数：<code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code></li><li>无符号整数：<code>uint8</code> (别名 <code>byte</code>), <code>uint16</code>, <code>uint32</code>, <code>uint64</code>, <code>uintptr</code> (用于存储指针)</li></ul></li><li><strong>浮点数类型</strong><ul><li><code>float32</code>, <code>float64</code></li></ul></li><li><strong>复数类型</strong><ul><li><code>complex64</code> (32位实部和虚部)</li><li><code>complex128</code> (64位实部和虚部，为默认类型)</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>go 1.9版本对于数字类型，无需定义int及float32、float64，系统会自动识别。</p></div><h3 id="_1-2-布尔类型" tabindex="-1"><a class="header-anchor" href="#_1-2-布尔类型"><span>1.2 布尔类型</span></a></h3><ul><li><code>bool</code> 只能是 <code>true</code> 或 <code>false</code>，默认为 false。</li></ul><h3 id="_1-3-字符串类型" tabindex="-1"><a class="header-anchor" href="#_1-3-字符串类型"><span>1.3 字符串类型</span></a></h3><ul><li><code>string</code> 表示一系列字符，使用UTF-8编码</li></ul><h3 id="_1-4-空类型" tabindex="-1"><a class="header-anchor" href="#_1-4-空类型"><span>1.4 空类型</span></a></h3><ul><li><code>interface{}</code> 代表任何类型</li><li><code>error</code> 是一个预定义的接口类型，通常用于错误处理</li></ul><h2 id="二、复合数据类型" tabindex="-1"><a class="header-anchor" href="#二、复合数据类型"><span>二、复合数据类型</span></a></h2><h3 id="_2-1-数组" tabindex="-1"><a class="header-anchor" href="#_2-1-数组"><span>2.1 数组</span></a></h3><ul><li><p>定长集合，所有元素类型相同</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> arr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 定义一个包含5个整数的数组</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_2-2-切片" tabindex="-1"><a class="header-anchor" href="#_2-2-切片"><span>2.2 切片</span></a></h3><ul><li><p>动态数组，可以改变长度</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">slice</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 定义一个整数切片</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_2-3-结构体" tabindex="-1"><a class="header-anchor" href="#_2-3-结构体"><span>2.3 结构体</span></a></h3><ul><li><p>用户自定义的数据类型，可以包含不同类型的字段</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Person</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> struct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    Name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> string</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    Age</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  int</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-4-指针" tabindex="-1"><a class="header-anchor" href="#_2-4-指针"><span>2.4 指针</span></a></h3><ul><li><p>存储变量的内存地址</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> p</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *int</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 定义一个指向整数的指针</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_2-5-函数" tabindex="-1"><a class="header-anchor" href="#_2-5-函数"><span>2.5 函数</span></a></h3><ul><li><p>可以作为值使用，可以赋值给变量或传递给其他函数</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">func</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 定义一个函数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_2-6-映射-map" tabindex="-1"><a class="header-anchor" href="#_2-6-映射-map"><span>2.6 映射（Map）</span></a></h3><ul><li><p>键值对的集合，键必须是可比较的类型</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">m</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">one</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">two</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 定义一个映射</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_2-7-通道-channel" tabindex="-1"><a class="header-anchor" href="#_2-7-通道-channel"><span>2.7 通道（Channel）</span></a></h3><ul><li><p>用于goroutine之间的通信</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> make</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">chan</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 创建一个整数通道</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_2-8-接口-interface" tabindex="-1"><a class="header-anchor" href="#_2-8-接口-interface"><span>2.8 接口（Interface）</span></a></h3><ul><li><p>定义方法的集合，任何实现了接口中所有方法的类型都自动实现了该接口</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Writer</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> interface</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    Write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">byte</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="三、特殊类型" tabindex="-1"><a class="header-anchor" href="#三、特殊类型"><span>三、特殊类型</span></a></h3><ul><li><strong>nil</strong> 是所有引用类型（指针、切片、映射、通道、函数和接口）的零值，表示没有值或空引用。</li></ul><p>以上数据类型可以组合使用，创建出复杂的数据结构和功能丰富的应用程序。Go语言的设计鼓励简洁和高效，因此其数据类型系统虽然强大但并不复杂。</p>`,34)]))}const r=s(n,[["render",h]]),k=JSON.parse('{"path":"/learn-go/yl40vohc/","title":"Go语言学习-数据类型","lang":"zh-CN","frontmatter":{"title":"Go语言学习-数据类型","createTime":"2024/10/25 10:00:16","excerpt":"数据类型的出现是为了把数据分成所需内存大小不同的数据，编程的时候需要用大数据的时候才需要申请大内存，就可以充分利用内存。","permalink":"/learn-go/yl40vohc/","description":"前言 Go语言提供了丰富且强大的数据类型，这些类型可以分为基本类型和复合类型两大类。下面是Go语言中数据类型的详细介绍： 这个表格列出了Go语言中的一些主要数据类型及其简要描述。 一、基本数据类型 1.1 数字类型 整数类型 有符号整数：int8, int16, int32, int64 无符号整数：uint8 (别名 byte), uint16, u...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go语言学习-数据类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-08T08:28:50.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://www.zibbo.xyz/learn-go/yl40vohc/"}],["meta",{"property":"og:site_name","content":"程序员飞鱼"}],["meta",{"property":"og:title","content":"Go语言学习-数据类型"}],["meta",{"property":"og:description","content":"前言 Go语言提供了丰富且强大的数据类型，这些类型可以分为基本类型和复合类型两大类。下面是Go语言中数据类型的详细介绍： 这个表格列出了Go语言中的一些主要数据类型及其简要描述。 一、基本数据类型 1.1 数字类型 整数类型 有符号整数：int8, int16, int32, int64 无符号整数：uint8 (别名 byte), uint16, u..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-08T08:28:50.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-08T08:28:50.000Z"}]]},"readingTime":{"minutes":3.03,"words":910},"git":{"updatedTime":1746692930000,"contributors":[{"name":"jinguoguang","username":"","email":"1264651321@qq.com","commits":4,"avatar":"https://gravatar.com/avatar/7919acd278b3b51446815c1d3fdc82c39b58b863964693935e4f898f57ff5139?d=retro"}]},"autoDesc":true,"filePathRelative":"notes/Go学习简记/3.Go语言学习-数据类型.md","headers":[]}');export{r as comp,k as data};
