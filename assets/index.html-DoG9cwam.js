import{_ as i,c as a,a as n,o as e}from"./app-BJZc2kWG.js";const l={};function t(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="版本管理-git-基础" tabindex="-1"><a class="header-anchor" href="#版本管理-git-基础"><span>版本管理，Git 基础</span></a></h1><p>在学习版本管理之前，我们先认识一下什么是版本管理。那么我们首先需要了解什么是版本吧。</p><p>顺着这个思路，我们首先要知道，怎么去定一个版本，以及版本的格式是什么样的，它是不是遵循某种规范等等。这些问题在下面都会有详细的说明。</p><p>首先我们要了解语义化版本：</p><h2 id="语义化版本" tabindex="-1"><a class="header-anchor" href="#语义化版本"><span>语义化版本</span></a></h2><p>语义化版本是一个版本号的规范，他由 npm 的创始人提出，目的是为了解决版本号的混乱问题。其规范我们在下面详细说明。</p><p>相信在不少开源项目中，你都会看到这样的版本号：</p><ul><li>2.6.0</li><li>2.6.0-beta.1</li><li>2.0.0-rc.8</li><li>2.0.0-alpha.8</li></ul><p>他们都是符合语义化版本格式规范的版本号。那么不同的版本号又代表了什么呢？我们在下面详细说明。</p><h3 id="理解版本格式" tabindex="-1"><a class="header-anchor" href="#理解版本格式"><span>理解版本格式</span></a></h3><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><ul><li>主版本号：当你做了不兼容的 API 修改</li><li>次版本号：当你做了向下兼容的功能性新增</li><li>修订号：当你做了向下兼容的问题修正先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</li></ul><p>对于加在后面的延伸信息，我介绍几个常见的，并且他们之间是有顺序的：</p><ul><li>1.alpha：内部测试版本，可能会存在很多 bug，除非内部测试人员，否则不要使用。</li><li>2.beta：公测版本，消除了严重的错误，但还是存在一些缺陷，需要测试人员进一步测试，如果反馈的问题比较多，就需要再次进行 beta 版本的发布，直到基本上不存在问题。</li><li>3.rc：发行候选版本，基本上不存在问题，除非是重大问题，否则不会对代码进行修改，这个版本就是最终发布的版本。</li><li>4.release</li></ul><h3 id="发布版本可能遇到的问题" tabindex="-1"><a class="header-anchor" href="#发布版本可能遇到的问题"><span>发布版本可能遇到的问题</span></a></h3><p>以下问题及解答来自<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener noreferrer">语义化官方</a>：</p><p><strong>在 0.y.z 初始开发阶段，我该如何进行版本控制？</strong></p><p>最简单的做法是以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号。</p><p><strong>对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？</strong></p><p>这是开发的责任感和前瞻性的问题。不兼容的改变不应该轻易被加入到有许多依赖代码的软件中。升级所付出的代价可能是巨大的。要递增主版本号来发行不兼容的改版，意味着你必须为这些改变所带来的影响深思熟虑，并且评估所涉及的成本及效益比。</p><p><strong>如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）</strong></p><p>自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住， 语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。</p><p><strong>我该如何处理即将弃用的功能？</strong></p><p>弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。当你弃用部份公共 API 时，你应该做两件事：</p><p>（1）更新你的文档让使用者知道这个改变，</p><p>（2）在适当的时机将弃用的功能透过新的次版本号发布。</p><p>在新的主版本完全移除弃用功能前，至少要有一个次版本包含这个弃用信息，这样使用者才能平顺地转移到新版 API。</p><p><strong>“v1.2.3” 是一个语义化版本号吗？</strong></p><p>“v1.2.3” 并不是的一个语义化的版本号。但是，在语义化版本号之前增加前缀 “v” 是用来表示版本号的常用做法。在版本控制系统中，将 “version” 缩写为 “v” 是很常见的。比如：git tag v1.2.3 -m &quot;Release version 1.2.3&quot; 中，“v1.2.3” 表示标签名称，而 “1.2.3” 是语义化版本号。</p><h2 id="版本控制工具-git" tabindex="-1"><a class="header-anchor" href="#版本控制工具-git"><span>版本控制工具 Git</span></a></h2><p>版本控制工具涉及到很多内容，我们分为三个部分来讲解：</p><p>1、首先要知道一些常用的 Git 平台：</p><p>giihub、gitlab、gitee、coding、bitbucket、gitea、gogs、gitcafe、git.oschina、git.</p><p>2.然后要了解一些 git 的基础命令等，这个是重点。</p><p>3.最后是 gitflow 工作流，管理分支的一种方式。</p><h2 id="git-基础" tabindex="-1"><a class="header-anchor" href="#git-基础"><span>git 基础</span></a></h2><p>理解 Git 平台的工作使用流程，以 GitHub 为例:</p><p>我们使用 GitHub 创建一个仓库，https://github.com/new , 填写仓库名称，并编辑仓库的描述，选择公开或私有，然后点击创建仓库。我们会进到一个仓库的页面，默认是在 Code tab 下。</p><h3 id="code-tab" tabindex="-1"><a class="header-anchor" href="#code-tab"><span>Code tab</span></a></h3><p>初始时是没有任何 code 的，我们需要把本地的代码上传到这个仓库中。默认会提示你有两种方式：</p><ul><li><p>…or create a new repository on the command line：在命令行中创建一个新的仓库。</p></li><li><p>…or push an existing repository from the command line：从命令行中推送一个已经存在的仓库。注意：这个仓库是已经存在的，也就是说你本地已经有了这个仓库，只是还没有上传到远程仓库中。</p></li><li><p>…or import code from another repository：从其它仓库导入代码。这种方式是从其它仓库导入代码，例如从 gitlab 中导入代码。相对来说比较少用。</p></li></ul><p>创建提交之后，我们就可以在本地的命令行中使用 git 命令来操作这个仓库了。</p><h3 id="issues-tab" tabindex="-1"><a class="header-anchor" href="#issues-tab"><span>Issues tab</span></a></h3><p>Issues 是用来记录项目的问题的，可以用来记录 bug，或者是一些新的需求等。我们或者仓库中的其它成员都可以点击 New issue 来创建一个新的 issue，填写 issue 的标题和内容，然后点击 Submit new issue 来提交 issue。</p><h3 id="pull-requests-tab" tabindex="-1"><a class="header-anchor" href="#pull-requests-tab"><span>Pull requests tab</span></a></h3><p>当设置了仓库权限，将分支保护设置为需要 review 时，我们在提交代码时，就需要先创建一个 pull request，然后再由仓库的管理员来 review 代码，如果代码没有问题，就可以合并到主分支中。</p><blockquote><p>在工作中我们经常将其称为 pr，即 pull request 的缩写。</p></blockquote><h3 id="projects-tab" tabindex="-1"><a class="header-anchor" href="#projects-tab"><span>Projects tab</span></a></h3><p>Projects 是用来管理项目的，可以创建多个项目，每个项目可以创建多个任务，每个任务可以设置任务的状态，例如 To do、In progress、Done 等。</p><h3 id="security-tab" tabindex="-1"><a class="header-anchor" href="#security-tab"><span>Security tab</span></a></h3><p>Security 是用来管理项目的安全的，可以查看项目的安全警告，例如项目中使用的依赖有安全漏洞等。</p><h3 id="insights-tab" tabindex="-1"><a class="header-anchor" href="#insights-tab"><span>Insights tab</span></a></h3><p>Insights 是用来查看项目的统计信息的，例如项目的活跃程度、贡献者、流量等。</p><h3 id="settings-tab" tabindex="-1"><a class="header-anchor" href="#settings-tab"><span>Settings tab</span></a></h3><p>Settings 是用来管理项目的设置的，例如项目的名称、描述、权限、分支保护、Webhooks 等。</p><p>这这个面板中，我们比较常关注的是 Setting 中的安全设置，可以设置仓库的访问权限，例如公开或私有，以及分支保护，例如是否需要 review，是否需要签名，是否需要强制检查等。如果不进行这些设置的话，仓库中的任何人都可以直接提交代码到主分支中，这样就会导致代码的质量无法保证。</p><p>1、设置仓库的访问权限：</p><p>如果仓库是公开的，任何人都可以访问，如果仓库是私有的，只有仓库的成员才能访问。那么怎么成为仓库的成员呢？我们可以在 Collaborations 里的 Manage access 中添加仓库的成员，添加成员时，可以设置成员的权限，例如只读或者是写入等。</p><p>2、设置分支保护：</p><p>可以在 General 里的 Pull requests 中的 Branch protection rules 中设置分支保护，例如设置主分支的保护，可以设置是否需要 review，是否需要签名，是否需要强制检查等。</p><h2 id="git-基础-1" tabindex="-1"><a class="header-anchor" href="#git-基础-1"><span>git 基础</span></a></h2><p>这里我们要知道的是 git 的工作区、暂存区和版本库的概念，以及我们在使用一些命令时，要知道这些命令是对哪个区域进行操作的。</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/git-command.jpg" alt="" loading="lazy"></p><blockquote><p>图片来自，菜鸟教程网站</p></blockquote><p><strong>工作区</strong></p><p>我们在电脑上能看到的目录就是工作区，工作区里有一个隐藏目录 .git，这个不算工作区，而是 git 的版本库。</p><p><strong>版本库</strong></p><p>工作区有一个隐藏目录 .git，这个不算工作区，而是 git 的版本库。在版本库中主要包括 stage（或者叫 index）暂存区，还有 git 自动创建的第一个分支 master 目录树。</p><p>暂存区中的内容是通过 git add 命令添加的。并且会在我们使用 git commit 命令后提交到当前分支。</p><blockquote><p>注意我们提交后，记录的是快照（文件的变化），而不是整个文件，否则 git 仓库将会非常大</p></blockquote><h2 id="git-命令-常用" tabindex="-1"><a class="header-anchor" href="#git-命令-常用"><span>git 命令（常用）</span></a></h2><p>注意，这里我们只是概况的讲解一下 git 的常用命令，具体的使用我们会结合使用场景在后面一章讲到。</p><h3 id="git-clone" tabindex="-1"><a class="header-anchor" href="#git-clone"><span>git clone</span></a></h3><p>克隆一个远程仓库到本地。需要注意的是 windows 下如果使用 git clone 命令，需要先安装 git 客户端，否则会报错。如果是使用的 ssh 方式，需要先配置好 ssh key。</p><blockquote><p>安装 git 客户端：https://git-scm.com/downloads</p></blockquote><blockquote><p>配置 ssh key：https://help.github.com/en/articles/connecting-to-github-with-ssh</p></blockquote><h3 id="git-init" tabindex="-1"><a class="header-anchor" href="#git-init"><span>git init</span></a></h3><p>初始化一个本地仓库，会在当前目录下生成一个 .git 的隐藏文件夹，这个文件夹是 git 用来跟踪管理版本的。一般只有在创建新仓库的时候才会使用这个命令。</p><h3 id="git-add" tabindex="-1"><a class="header-anchor" href="#git-add"><span>git add</span></a></h3><p>将文件添加到暂存区，可以使用 git add . 来添加当前目录下的所有文件，也可以使用 git add [file] 来添加指定的文件。如果你使用 VSCode 的话，可以在左侧的源代码管理中看到添加的文件。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> README.md</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用 vscode 可以可视化的看到文件的状态，例如修改的文件、添加的文件、删除的文件等。并且我们也可以在这里提交代码，不需要使用命令行。这个我们会在下一章讲，前提是我们需要了解 git 的命令。</p></blockquote><h3 id="git-remote" tabindex="-1"><a class="header-anchor" href="#git-remote"><span>git remote</span></a></h3><p>查看当前仓库的远程仓库信息，如果没有配置远程仓库，会显示为空。也可以使用 git remote add origin [url] 来添加远程仓库、git remote rm origin 删除远程仓库。详细可通过 git remote --help 查看。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git@github.com:chovue/vue3-management-system.git</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 或者删除</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-status" tabindex="-1"><a class="header-anchor" href="#git-status"><span>git status</span></a></h3><p>查看当前仓库的状态，例如修改的文件、添加的文件、删除的文件等。</p><h3 id="git-commit" tabindex="-1"><a class="header-anchor" href="#git-commit"><span>git commit</span></a></h3><p>提交代码，需要先 git add 添加文件到暂存区，然后再使用 git commit -m [message] 来提交代码。如果你使用 VSCode 的话，可以在左侧的源代码管理中看到提交的记录。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">first commit</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="git-push" tabindex="-1"><a class="header-anchor" href="#git-push"><span>git push</span></a></h3><p>将本地仓库的代码推送到远程仓库，需要先 git add 添加文件到暂存区，然后再使用 git commit -m [message] 来提交代码，最后使用 git push origin [branch] 来推送代码到远程仓库。</p><blockquote><p>需要注意的是，如果是第一次推送代码，需要先 git push -u origin [branch]，这样才能将本地仓库的代码推送到远程仓库。</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 第一次推送master分支,并关联本地和远程分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -u</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 之后可以直接推送master分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 强制推送,会覆盖远程分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 推送所有本地分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --all</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 同时推送标签</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --tags</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 删除远程dev分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述列举的是相对常见的一些参数，这里一一解释一下：</p><ul><li><p><code>-u</code> 或 <code>--set-upstream</code> 参数， 是指将本地分支与远程分支关联起来，这样在下次推送代码时，就不需要指定分支了。</p></li><li><p><code>-f</code> 或 <code>--force</code> 参数，表示强制推送，一般不建议使用，因为这样会覆盖远程仓库的代码。</p></li><li><p><code>--all</code>: 推送所有本地分支到远程。</p></li><li><p><code>--tags</code> 参数，一并推送本地创建的标签。</p></li><li><p><code>-d</code> 或 <code>--delete</code>: 删除远程分支。</p></li></ul><h3 id="git-pull" tabindex="-1"><a class="header-anchor" href="#git-pull"><span>git pull</span></a></h3><p>将远程仓库的代码拉取到本地,其实就是 git fetch 和 git merge 的组合。</p><p>pull 常用的参数有:</p><ul><li>-r 或 --rebase: rebase 当前分支到服务器上最新的 commit,与其他开发者的 commit 并发展开。这将会修改历史,并在 pull 之后要做 rebase 之前的 commit。</li><li>--autostash: 会在 rebase 期间自动暂存本地改动(stash),完成 rebase 后还原(stash pop),避免冲突。</li><li>--allow-unrelated-histories: 允许在没有任何共同提交的情况下,合并两个不同的提交历史。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 拉取远程master并rebase到本地</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -r</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 拉取远程master,且在rebase过程中自动stash和pop</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --rebase</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --autostash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 两个独立仓库,允许合并不同的提交历史</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --allow-unrelated-histories</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-checkout" tabindex="-1"><a class="header-anchor" href="#git-checkout"><span>git checkout</span></a></h3><p>切换分支，可以使用 git checkout [branch] 来切换分支，也可以使用 git checkout -b [branch] 来创建并切换分支。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 切换到dev分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 创建并切换到dev分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-brach" tabindex="-1"><a class="header-anchor" href="#git-brach"><span>git brach</span></a></h3><p>查看当前仓库的分支信息，可以使用 git branch -a 来查看所有分支，也可以使用 git branch -r 来查看远程分支，使用 git branch -d [branch] 来删除分支。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看所有分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看远程分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -r</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 删除dev分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-fetch" tabindex="-1"><a class="header-anchor" href="#git-fetch"><span>git fetch</span></a></h3><p>拉取远程仓库的代码，可以使用 git fetch [remote] [branch] 来拉取远程仓库的代码，例如 git fetch origin master 来拉取远程仓库的 master 分支。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 拉取远程master分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fetch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-merge" tabindex="-1"><a class="header-anchor" href="#git-merge"><span>git merge</span></a></h3><p>合并分支，可以使用 git merge [branch] 来合并分支，例如合并 dev 分支到 master 分支，需要先切换到 master 分支，然后再使用 git merge dev 来合并分支。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 切换到master分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 合并dev分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-rebase" tabindex="-1"><a class="header-anchor" href="#git-rebase"><span>git rebase</span></a></h3><p>将本地的提交移到另一个分支上，可以使用 git rebase [branch] 来将当前分支的提交移到指定的分支上，例如将当前分支的提交移到 master 分支上，需要先切换到当前分支，然后再使用 git rebase master 来将当前分支的提交移到 master 分支上。</p><blockquote><p>注意：如果当前分支和 master 分支都有提交，那么当前分支的提交会移到 master 分支的最后面。并且使用 git rebase 之后，当前分支的提交记录会被修改。</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 切换到dev分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 将dev分支的提交移到master分支上</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-cherry-pick" tabindex="-1"><a class="header-anchor" href="#git-cherry-pick"><span>git cherry-pick</span></a></h3><p>将指定的提交合并到当前分支，可以使用 git cherry-pick [commit] 来将指定的提交合并到当前分支，例如将 123456 这次提交合并到当前分支，需要先切换到当前分支，然后再使用 git cherry-pick 123456 来将 123456 这次提交合并到当前分支。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 切换到dev分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 将123456这次提交合并到当前分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cherry-pick</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 123456</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-log" tabindex="-1"><a class="header-anchor" href="#git-log"><span>git log</span></a></h3><p>查看提交记录，可以使用 git log 来查看所有的提交记录，也可以使用 git log --oneline 来查看简洁的提交记录。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看所有提交记录</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看简洁的提交记录</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --oneline</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-diff" tabindex="-1"><a class="header-anchor" href="#git-diff"><span>git diff</span></a></h3><p>查看文件的差异，可以使用 git diff [file] 来查看指定文件的差异，也可以使用 git diff [branch1] [branch2] 来查看两个分支的差异。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看指定文件的差异</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> README.md</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看两个分支的差异</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-reset" tabindex="-1"><a class="header-anchor" href="#git-reset"><span>git reset</span></a></h3><p>回退版本，可以使用 git reset --hard [commit] 来回退到指定的版本。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 回退到指定的版本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --hard</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3628164</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 回退到上一个版本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --hard</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> HEAD^</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 回退到上上一个版本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --hard</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> HEAD^^</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 回退到前100个版本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --hard</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> HEAD~100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-reflog" tabindex="-1"><a class="header-anchor" href="#git-reflog"><span>git reflog</span></a></h3><p>查看命令历史，可以使用 git reflog 来查看所有的命令历史，例如回退到指定的版本，但是又不知道版本号，可以通过 git reflog 来查看所有的命令历史，然后再使用 git reset --hard [commit] 来回退到指定的版本。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看所有的命令历史</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reflog</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-tag" tabindex="-1"><a class="header-anchor" href="#git-tag"><span>git tag</span></a></h3><p>打标签，可以使用 git tag [tag] 来打标签，例如 git tag v1.0.0 来打 v1.0.0 的标签，也可以使用 git tag -a [tag] -m [message] 来打带有说明的标签。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 打v1.0.0标签</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> v1.0.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 打带有说明的标签</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> v1.0.0</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">说明</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-show" tabindex="-1"><a class="header-anchor" href="#git-show"><span>git show</span></a></h3><p>查看标签信息，可以使用 git show [tag] 来查看标签的信息。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看v1.0.0标签的信息</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> show</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> v1.0.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="场景应用" tabindex="-1"><a class="header-anchor" href="#场景应用"><span>场景应用</span></a></h2><h3 id="_1-修复-bug-时的分支管理" tabindex="-1"><a class="header-anchor" href="#_1-修复-bug-时的分支管理"><span>1. 修复 bug 时的分支管理</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 创建bug分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bug-xxx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在bug分支上修复bug,并提交</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fix bug xxx</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 提交修复bug后的代码到远程bug分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bug-xxx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 切换到主分支（主分支受保护则提pr，不进行以下步骤）</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 合并bug分支到主分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bug-xxx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 删除bug分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bug-xxx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-合并其他开发者的代码" tabindex="-1"><a class="header-anchor" href="#_2-合并其他开发者的代码"><span>2. 合并其他开发者的代码</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 获取最新代码</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pull</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 解决合并冲突,然后提交</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 推送到远程仓库</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-暂存未完成的工作" tabindex="-1"><a class="header-anchor" href="#_3-暂存未完成的工作"><span>3. 暂存未完成的工作</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 暂存当前文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 或</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> save</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 此时工作区清空,可以进行其他工作</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 恢复暂存的工作</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看暂存列表</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 详细查看某个暂存</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> show</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stash@{n</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 删除某个暂存</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> drop</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stash@{n</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-添加已有仓库作为远程仓库" tabindex="-1"><a class="header-anchor" href="#_4-添加已有仓库作为远程仓库"><span>4. 添加已有仓库作为远程仓库</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 进入已有本地仓库</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> myproj</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 添加远程仓库</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">UR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">L</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 推送主分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -u</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-回退操作" tabindex="-1"><a class="header-anchor" href="#_5-回退操作"><span>5. 回退操作</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看提交日志</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 切换版本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">commit-i</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">d</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 比较修改</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">commit-i</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">d</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 回退到某个版本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --hard</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">commit-i</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">d</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 恢复被回退的版本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reflog</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">commit-i</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">d</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-其它意外情况" tabindex="-1"><a class="header-anchor" href="#_6-其它意外情况"><span>6.其它意外情况</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 需要其它分支上的部分代码</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cherry-pick</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">commit-i</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">d</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 误删分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reflog</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">commit-i</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">d</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">branch-nam</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 误删文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reflog</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">commit-i</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">d</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">file-nam</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 合并多次提交（git rebase - 变基一个分支上的提交到另一个分支。这会取出提交,然后将其重新放置在另一个分支顶部,从而创造一个直线的项目历史。）</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">commit-i</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">d</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-git-图形界面工具" tabindex="-1"><a class="header-anchor" href="#使用-git-图形界面工具"><span>使用 Git 图形界面工具</span></a></h2><p>对于 git 基础基本掌握的同学来说，使用命令行操作 git 是最方便的，但是对于刚刚接触 git 的同学来说，命令行操作 git 是一件很痛苦的事情，这一章就来介绍 git 图形界面工具吧。</p><h3 id="vscode-源代码管理" tabindex="-1"><a class="header-anchor" href="#vscode-源代码管理"><span>VSCode 源代码管理</span></a></h3><p>这是 VSCode 自带的源代码管理工具，可以在左侧的源代码管理面板中看到，也可以使用快捷键 Ctrl + Shift + G 来打开源代码管理面板。</p><blockquote><p>Git 图形界面工具可以在一定程度上代替 Git 命令行完成部分简单操作,但无法完全替代。</p></blockquote><p>在 VSCode 的 Git 图形界面中,有几个操作起来比命令行更简单易用:</p><ol><li>查看文件状态和变更</li></ol><p>在 VSCode 中可以很直观地看到工作区中的文件状态(新增、修改、删除),可以大致了解这次提交会被包含的更改内容。这比在命令行使用 git status 查看文件状态更加直观。</p><ol start="2"><li>可视化地暂存和取消暂存文件</li></ol><p>可以在 VSCode 界面中直接勾选要暂存的文件,取消勾选即可取消暂存。这比在命令行使用 git add 和 git reset HEAD 要直观很多。</p><ol start="3"><li>可视化地浏览提交日志</li></ol><p>在 VSCode 中可以以可视化的方式浏览提交历史,看提交摘要和具体的文件变化。这比在命令行使用 git log 查看日志要更加直观。</p><ol start="4"><li>切换和创建分支</li></ol><p>在 VSCode 中可以很直观地看到本地分支和远程分支,可以直接在界面中创建、切换和删除分支。这比在命令行直接操作要更加容易上手。</p><ol start="5"><li>快速推送和拉取</li></ol><p>可以直接在 VSCode 中一键完成推送(push)和拉取(pull)操作。无需输入任何 Git 命令,简单易用。</p><ol start="6"><li>可视化地处理合并冲突</li></ol><p>在 VSCode 中可以直接在编辑器中看到合并冲突的文件,并可视化地编辑文件解决冲突。这比解决命令行的合并冲突文件要直观很多。所以,总体来说,VSCode 的 Git 图形界面在查看文件状态、操作暂存区、浏览提交日志、管理分支和快速推拉等方面使用起来更加简单易用。但是,像 rebase、stash 等较复杂的 Git 操作,在 VSCode 中实现起来就不会如此直观了。</p><h3 id="分支管理工具-gitlens" tabindex="-1"><a class="header-anchor" href="#分支管理工具-gitlens"><span>分支管理工具 GitLens</span></a></h3><p>在 VSCode 上,一个广受好评的 Git 分支管理插件是 GitLens。下载安装之后，其现在不会默认显示在侧边栏，我们可以在侧边栏右键选择 gitlen 显示在侧边栏中。其默认在源代码管理侧栏上一起显示所有视图，包括：</p><ul><li>COMMITS：显示当前分支的提交历史</li><li>FILE HISTORY：显示当前文件的提交历史</li><li>BRANCHES：显示本地和远程分支</li><li>REMOTES：显示远程仓库</li><li>STASHES：显示暂存列表</li><li>TAGS：显示标签列表</li><li>CONTRIBUTORS：显示贡献者列表</li><li>SEARCH &amp; COMPARE：显示搜索和比较视图</li></ul><p>它可以实现:</p><ol><li><p>查看所有本地和远程分支,并直接在 VSCode 中创建、切换和删除分支。在 VSCode 的最下方的状态栏中,可以看到当前所在分支的信息。点击分支名称,即可查看分支信息和切换分支（有冲突则弹框报错）。</p></li><li><p>查看各个分支最后一次提交信息,方便比较不同分支的进展。点击下方状态栏的 gitlen 图标,可以查看分支的提交历史构成的图谱。点击某个提交,可以查看该提交的详细信息,包括作者、提交时间、提交摘要、变更文件等。点击某个提交的变更文件,可以查看该文件的具体变更内容。</p></li><li><p>查看文件在不同分支中的最新版本,快速比较不同分支的文件差异。在当前文件（注意需要是有多次提交改动的文件，新增文件无此按钮）右上方的带箭头的小圆球（Open Changes with Previous Revision），以将当前文件修订与先前的提交修订进行比较。</p></li><li><p>在文件中，我们也可以看到当前文件的提交历史，以及当前文件的作者信息。鼠标悬停在某一行代码上，可以看到该行代码的作者信息。</p></li></ol><p>除此之外，还有一些其它功能，这里就不一一介绍了，详细可以在插件的<a href="https://github.com/gitkraken/vscode-gitlens/tree/main" target="_blank" rel="noopener noreferrer">官方文档</a>中查看。</p><h2 id="git-flow" tabindex="-1"><a class="header-anchor" href="#git-flow"><span>git flow</span></a></h2><p>git flow 是一种 Git 分支管理工作流,它定义了一个围绕项目发布的严格分支模型,旨在帮助管理大型项目的开发和维护。git flow 的核心是围绕项目发布定义的一个严格的分支模型。它提供了一些高级命令,帮助我们完成分支的创建、合并等操作。</p><p>其意义在于：</p><ul><li><p>多人协作开发，权限控制</p></li><li><p>避免冲突</p></li><li><p>项目版本管理，方便溯源和回退</p></li></ul><h3 id="持续集成-flow" tabindex="-1"><a class="header-anchor" href="#持续集成-flow"><span>持续集成 flow</span></a></h3><p>团队开发成员经常集成他们的工作,通常每个成员每天至少集成一次,也就是说每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译、发布、自动化测试）来验证,从而尽早地发现集成错误。许多团队发现这种方法可以显著减少集成问题并加快开发速度。</p><p><img src="https://user-images.githubusercontent.com/51811652/236365791-edd0e3d5-9ade-4856-a909-749d0cb72de2.png" alt="image" loading="lazy"></p><p>优点：</p><ul><li><p>适用于持续集成多环境场景，版本相对比较稳定，而且需要小版本的更新迭代的场景。</p></li><li><p>上游分支向下游发展</p></li><li><p>Bug=&gt;New Feature=&gt;master=&gt;pre branch=&gt;target branch</p></li></ul><p>自动化流程工具 CI/CD，检测到代码变更，自动触发构建，自动化测试，自动化部署。</p><h3 id="版本控制-flow" tabindex="-1"><a class="header-anchor" href="#版本控制-flow"><span>版本控制 flow</span></a></h3><p>Vue 和 React 都是采用的这种模型，这种模型适用于版本控制的场景，在 master 分支检出，bug 修复在分支：</p><p>master -&gt; Stable -&gt; new branch -&gt; bug fix -&gt; version</p><p><img src="https://user-images.githubusercontent.com/51811652/236366380-33fe619b-07c6-4370-ab2d-00380a30e70d.png" alt="image" loading="lazy"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本篇文章从 Git 的基本概念开始，介绍了 Git 的基本操作，包括 Git 命令 、Git 的 GUI 插件 GitLens、Git 的工作流 Git Flow 这些内容，这些命令和工具都是需要我们在日常开发中熟练掌握的，这样才能更好的使用 Git 来管理我们的项目。</p><p>另外，在本篇中也引入了团队的协作开发的概念，这些就不在本篇来讲解了，关于团队协作会再出一篇文章来讲解。</p>`,192)]))}const d=i(l,[["render",t]]),k=JSON.parse('{"path":"/article/ucaghxo6/","title":"Git版本管理","lang":"zh-CN","frontmatter":{"title":"Git版本管理","createTime":"2024/03/02 20:01:09","post":true,"author":"king","categories":["软件工具"],"excerpt":"Git（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理","tags":["Git"],"permalink":"/article/ucaghxo6/","description":"版本管理，Git 基础 在学习版本管理之前，我们先认识一下什么是版本管理。那么我们首先需要了解什么是版本吧。 顺着这个思路，我们首先要知道，怎么去定一个版本，以及版本的格式是什么样的，它是不是遵循某种规范等等。这些问题在下面都会有详细的说明。 首先我们要了解语义化版本： 语义化版本 语义化版本是一个版本号的规范，他由 npm 的创始人提出，目的是为了解...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git版本管理\\",\\"image\\":[\\"https://www.runoob.com/wp-content/uploads/2015/02/git-command.jpg\\",\\"https://user-images.githubusercontent.com/51811652/236365791-edd0e3d5-9ade-4856-a909-749d0cb72de2.png\\",\\"https://user-images.githubusercontent.com/51811652/236366380-33fe619b-07c6-4370-ab2d-00380a30e70d.png\\"],\\"dateModified\\":\\"2024-10-18T08:08:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"king\\"}]}"],["meta",{"property":"og:url","content":"https://www.zibbo.xyz/article/ucaghxo6/"}],["meta",{"property":"og:site_name","content":"程序员飞鱼"}],["meta",{"property":"og:title","content":"Git版本管理"}],["meta",{"property":"og:description","content":"版本管理，Git 基础 在学习版本管理之前，我们先认识一下什么是版本管理。那么我们首先需要了解什么是版本吧。 顺着这个思路，我们首先要知道，怎么去定一个版本，以及版本的格式是什么样的，它是不是遵循某种规范等等。这些问题在下面都会有详细的说明。 首先我们要了解语义化版本： 语义化版本 语义化版本是一个版本号的规范，他由 npm 的创始人提出，目的是为了解..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.runoob.com/wp-content/uploads/2015/02/git-command.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-18T08:08:37.000Z"}],["meta",{"property":"article:author","content":"king"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:modified_time","content":"2024-10-18T08:08:37.000Z"}]]},"readingTime":{"minutes":22.22,"words":6667},"git":{"updatedTime":1729238917000,"contributors":[{"name":"jinguoguang","username":"","email":"1264651321@qq.com","commits":3,"avatar":"https://gravatar.com/avatar/7919acd278b3b51446815c1d3fdc82c39b58b863964693935e4f898f57ff5139?d=retro"}]},"autoDesc":true,"filePathRelative":"2.软件工具/Git/Git版本管理.md","headers":[],"categoryList":[{"id":"b554ff","sort":2,"name":"软件工具"},{"id":"40262c","sort":10001,"name":"Git"}]}');export{d as comp,k as data};
