import{_ as s,c as a,a as n,o as t}from"./app-C22y8Wo6.js";const e={};function h(l,i){return t(),a("div",null,i[0]||(i[0]=[n(`<h2 id="一、术语解释" tabindex="-1"><a class="header-anchor" href="#一、术语解释"><span>一、术语解释</span></a></h2><h3 id="aspect-切面" tabindex="-1"><a class="header-anchor" href="#aspect-切面"><span>@Aspect(切面)</span></a></h3><h3 id="pointcut-切点" tabindex="-1"><a class="header-anchor" href="#pointcut-切点"><span>@Pointcut(切点)</span></a></h3><h4 id="_1、aspectj切入点指示符" tabindex="-1"><a class="header-anchor" href="#_1、aspectj切入点指示符"><span>1、AspectJ切入点指示符</span></a></h4><p>切入点指示符用来指示切入点表达式目的，在Spring AOP中目前只有执行方法这一个连接点，Spring AOP支持的AspectJ切入点指示符如下：</p><ul><li><p><strong>execution</strong>：用于匹配方法执行的连接点</p></li><li><p><strong>within</strong>：用于匹配指定类型内的方法执行</p></li><li><p><strong>this</strong>：用于匹配当前AOP代理对象类型的执行方法；注意是AOP代理对象的类型匹配，这样就可能包括引入接口也类型匹配</p></li><li><p><strong>target</strong>：用于匹配当前目标对象类型的执行方法；注意是目标对象的类型匹配，这样就不包括引入接口也类型匹配</p></li><li><p><strong>args</strong>：用于匹配当前执行的方法传入的参数为指定类型的执行方法</p></li><li><p><strong>@within</strong>：用于匹配所以持有指定注解类型内的方法</p></li><li><p><strong>@target</strong>：用于匹配当前目标对象类型的执行方法，其中目标对象持有指定的注解</p></li><li><p><strong>@args</strong>：用于匹配当前执行的方法传入的参数持有指定注解的执行</p></li><li><p><strong>@annotation</strong>：用于匹配当前执行方法持有指定注解的方法</p></li><li><p><strong>bean</strong>：Spring AOP扩展的，AspectJ没有对于指示符，用于匹配特定名称的Bean对象的执行方法</p></li></ul><h4 id="_2、类型匹配语法" tabindex="-1"><a class="header-anchor" href="#_2、类型匹配语法"><span>2、类型匹配语法</span></a></h4><div class="hint-container tip"><p class="hint-container-title">类型匹配语法</p><p>*：匹配任何数量字符；</p><p>..：匹配任何数量字符的重复，如在类型模式中匹配任何数量子包；而在方法参数模式中匹配任何数量参数。</p><p>+：匹配指定类型的子类型；仅能作为后缀放在类型模式后边。</p></div><p>使用示例</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">String</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    匹配String类型；  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">String</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">       匹配java包下的任何“一级子包”下的String类型；  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">如匹配java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">String</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">，但不匹配java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ss</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">String</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">..</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            匹配java包及任何子包下的任何类型</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                   如匹配java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">String</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">、</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">annotation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Annotation</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                   </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ing      匹配任何java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang包下的以ing结尾的类型</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">；  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Number</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  匹配java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang包下的任何Number的自类型</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">；  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                   如匹配java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Integer</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">，也匹配java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">math</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">BigInteger</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="advice-通知" tabindex="-1"><a class="header-anchor" href="#advice-通知"><span>Advice(通知)</span></a></h3><table><thead><tr><th>通知类型</th><th>术语解释</th><th>描述</th></tr></thead><tbody><tr><td>@Before</td><td>前置通知</td><td>用于定义前置通知，在目标方法执行前执行额外的逻辑。前置通知通常用于在方法执行前做一些准备工作，例如参数验证或日志记录。</td></tr><tr><td>@AfterReturning</td><td>后置通知</td><td>用于定义后置通知，在目标方法成功执行后执行额外的逻辑。通常用于处理方法的返回值或执行清理工作。发生异常便不会执行</td></tr><tr><td>@AfterThrowing</td><td>异常通知</td><td>用于定义异常通知，它在目标方法抛出异常时执行额外的逻辑。异常通知通常用于记录异常信息或处理异常情况。</td></tr><tr><td>@After</td><td>最终通知</td><td>用于定义最终通知，它在目标方法执行后（不论是否发生异常）执行额外的逻辑。最终通知通常用于执行清理工作，例如释放资源。</td></tr><tr><td>@Around</td><td>环绕通知</td><td>用于定义环绕通知，它能够完全控制目标方法的执行。环绕通知可以在方法执行前、执行中和执行后执行额外逻辑，它需要显式地调用 ProceedingJoinPoint.proceed() 方法来控制目标方法的执行。</td></tr></tbody></table><h2 id="二、通知参数" tabindex="-1"><a class="header-anchor" href="#二、通知参数"><span>二、通知参数</span></a></h2><p>如果想获取被被通知方法参数并传递给通知方法，该如何实现呢？接下来我们将介绍两种获取通知参数的方式。</p><h3 id="_1-joinpoint-提供访问当前被通知方法的目标对象、代理对象、方法参数等数据" tabindex="-1"><a class="header-anchor" href="#_1-joinpoint-提供访问当前被通知方法的目标对象、代理对象、方法参数等数据"><span>1. JoinPoint: 提供访问当前被通知方法的目标对象、代理对象、方法参数等数据</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">aspectj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> org</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">aspectj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">lang</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">reflect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SourceLocation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> interface</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> JoinPoint</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">         //连接点所在位置的相关信息  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toShortString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     //连接点所在位置的简短相关信息  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toLongString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     //连接点所在位置的全部相关信息  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Object </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getThis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">         //返回AOP代理对象  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Object </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getTarget</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       //返回目标对象  </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getArgs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       //返回被通知方法参数列表  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Signature </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getSignature</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  //返回当前连接点签名  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    SourceLocation </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getSourceLocation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//返回连接点方法所在类文件中的位置  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getKind</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //连接点类型  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    StaticPart </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getStaticPart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //返回连接点静态部分  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用API：</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>getSignature()</code></td><td>获取目标方法的方法名、参数类型、返回类型及Class等信息</td></tr><tr><td><code>getArgs()</code></td><td>获取传入目标方法的参数值</td></tr><tr><td><code>getTarget()</code></td><td>获取被代理的对象</td></tr><tr><td><code>getThis()</code></td><td>获取代理对象</td></tr></tbody></table><h3 id="_2-proceedingjoinpoint-用于环绕通知-使用proceed-方法来执行目标方法" tabindex="-1"><a class="header-anchor" href="#_2-proceedingjoinpoint-用于环绕通知-使用proceed-方法来执行目标方法"><span>2. ProceedingJoinPoint: 用于环绕通知，使用proceed()方法来执行目标方法：</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> interface</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ProceedingJoinPoint</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> JoinPoint</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Object </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">proceed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> throws</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Throwable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  //执行目标方法</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Object </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">proceed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> throws</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Throwable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //传入新的参数执行目标方法</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用API:</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>proceed()</code></td><td>执行目标方法</td></tr><tr><td><code>proceed(Object[] args)</code></td><td>传入新的参数执行目标方法</td></tr></tbody></table><h3 id="_3-joinpoint-staticpart-提供访问连接点的静态部分-如被通知方法签名、连接点类型等" tabindex="-1"><a class="header-anchor" href="#_3-joinpoint-staticpart-提供访问连接点的静态部分-如被通知方法签名、连接点类型等"><span>3. JoinPoint.StaticPart: 提供访问连接点的静态部分，如被通知方法签名、连接点类型等</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> interface</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> StaticPart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Signature </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getSignature</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //返回当前连接点签名  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getKind</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          //连接点类型  </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">               //唯一标识  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">         //连接点所在位置的相关信息  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toShortString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     //连接点所在位置的简短相关信息  </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toLongString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     //连接点所在位置的全部相关信息  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>JoinPoint对象封装了SpringAop中切面方法的信息,在切面方法中添加JoinPoint参数,就可以获取到封装了该方法信息的JoinPoint对象。</li><li>ProceedingJoinPoint对象是JoinPoint的子接口,该对象只能用于@Around的环绕切面方法中。</li></ul></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p>1.<a href="https://blog.csdn.net/lhj520cb/article/details/125820513" target="_blank" rel="noopener noreferrer">SpringAOP(图文详解)</a></p><p>2.<a href="https://blog.csdn.net/weixin_44102992/article/details/128087883" target="_blank" rel="noopener noreferrer">Spring——AOP原理及流程详解</a></p><p>3.<a href="https://blog.csdn.net/qq_52227892/article/details/133876816" target="_blank" rel="noopener noreferrer">Spring AOP + 异步任务实现日志记录（操作日志、异常日志）参考ruoyi</a></p><p>4.<a href="http://t.csdnimg.cn/hfZ7P" target="_blank" rel="noopener noreferrer"></a></p>`,30)]))}const k=s(e,[["render",h],["__file","SpringAop详解.html.vue"]]),r=JSON.parse('{"path":"/7.%E4%B8%AD%E9%97%B4%E4%BB%B6-%E6%A1%86%E6%9E%B6/Spring/SpringAop%E8%AF%A6%E8%A7%A3.html","title":"SpringAop详解","lang":"zh-CN","frontmatter":{"post":true,"title":"SpringAop详解","date":"2024-05-04T00:00:00.000Z","tags":["Spring","源码"],"categories":["中间件、框架"],"cover":"https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202408120929151.png","coveross":"https://cdn.enshimama.com/appbeebee/posts/iphone-pro-15-3d-mockups-free.gif","description":"一、术语解释 @Aspect(切面) @Pointcut(切点) 1、AspectJ切入点指示符 切入点指示符用来指示切入点表达式目的，在Spring AOP中目前只有执行方法这一个连接点，Spring AOP支持的AspectJ切入点指示符如下： execution：用于匹配方法执行的连接点 within：用于匹配指定类型内的方法执行 this：用于...","head":[["meta",{"property":"og:url","content":"https://www.zibbo.xyz/7.%E4%B8%AD%E9%97%B4%E4%BB%B6-%E6%A1%86%E6%9E%B6/Spring/SpringAop%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"程序员飞鱼"}],["meta",{"property":"og:title","content":"SpringAop详解"}],["meta",{"property":"og:description","content":"一、术语解释 @Aspect(切面) @Pointcut(切点) 1、AspectJ切入点指示符 切入点指示符用来指示切入点表达式目的，在Spring AOP中目前只有执行方法这一个连接点，Spring AOP支持的AspectJ切入点指示符如下： execution：用于匹配方法执行的连接点 within：用于匹配指定类型内的方法执行 this：用于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202408120929151.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-30T05:46:47.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202408120929151.png"}],["meta",{"name":"twitter:image:alt","content":"SpringAop详解"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"源码"}],["meta",{"property":"article:published_time","content":"2024-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-30T05:46:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringAop详解\\",\\"image\\":[\\"https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202408120929151.png\\"],\\"datePublished\\":\\"2024-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-30T05:46:47.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":4.93,"words":1479},"git":{"updatedTime":1735537607000,"contributors":[{"name":"jinguoguang","username":"jinguoguang","email":"1264651321@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/7919acd278b3b51446815c1d3fdc82c39b58b863964693935e4f898f57ff5139?d=retro"}]},"autoDesc":true,"filePathRelative":"7.中间件-框架/Spring/SpringAop详解.md","categoryList":[{"id":"e978e9","sort":7,"name":"中间件-框架"},{"id":"28c58f","sort":10004,"name":"Spring"}],"bulletin":false}');export{k as comp,r as data};
