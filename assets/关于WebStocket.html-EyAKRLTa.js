import{_ as n,c as s,a,o as t}from"./app-C22y8Wo6.js";const i="/assets/1719558771859-CSWdGUk6.png",o={};function l(p,e){return t(),s("div",null,e[0]||(e[0]=[a('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>互联网发展的早期，网站上只是一些静态展示页面。用户请求(Request)网站页面，网站回复(Response)页面内容给用户浏览器。因为需求简单，所以也没有很复杂的协议过程。这种形式的Request/Response交互流程如下图所示：</p><p><img src="'+i+`" alt="1719558771859" loading="lazy"></p><p>随着互联网技术的发展，带宽逐步提高，用户数也越来越庞大。对互联网的呈现内容提出了要求，随之出现了动态页面技术，对同一个页面，页面的某些部分对不同的访问用户，呈现的内容不同。相关的实现技术有CGI、ASP、PHP、JSP等。由于访问量的增加，WEB服务器同时处理的用户数也达到了万(10K)以上级别，这就是C10K问题：&quot;<a href="http://www.kegel.com/c10k.html" target="_blank" rel="noopener noreferrer">The C10K problem</a>&quot;。为了缓解服务器压力，每次Request/Response后连接(TCP连接)继续保持，以及对同一个TCP连接，多次复用Request/Response的方法(也称为Pipeline)也提了出来。这就是HTTP/1.1协议中长连接的主要内容。</p><p>伴随移动互联网的发展，大量移动终端和其上的APP应用接入网络，HTML5技术也提了出来，以便支持WEB上的音视频播放、实时游戏、实时聊天等。催生了这样一个需求，当服务器有更新时，需要立即将数据发送给客户端，这就是基于服务器端的推送技术。</p><p>WEBSOCKET之前的解决方法大概这么几种：</p><ul><li><p>1.轮询：客户端设置一个时间间隔，时间到以后，向服务器发送request询问有无新数据，服务器立即返回response，如果有更新则携带更新的数据。</p></li><li><p>2.长连接(long poll): 和轮询相似，但是为阻塞模式的轮询，客户端请求新的数据request, 服务器会阻塞请求，直到有新数据后才返回response给客户端；然后客户端再重复此过程。这两种方式的特点，不断的建立HTTP连接，然后发送请求request，之后服务器等待处理。服务端体现的是一种被动性，同时这种处理方式，非常耗费网络带宽和服务器资源。</p></li></ul><p>服务器向客户端推送更新时，因为被动性，对低延迟的应用体验不好；因为request/response的交互方式，对网络带宽和服务器带来了额外的负担（例如多次请求的HTTP头部， TCP连接复用会导致的Head-of-Line Blocking线头阻塞[2]等）。如果在单一的TCP连接中，使用双向通信（全双工通信）就能很好的解决此问题。这就是WebSocket技术的缘由。</p><h2 id="一、-什么是websocket" tabindex="-1"><a class="header-anchor" href="#一、-什么是websocket"><span>一、 什么是WebSocket</span></a></h2><p>WebSocket是一种在单个TCP连接上提供全双工通信渠道的协议。相较于传统的HTTP协议，WebSocket设计用于实现客户端与服务器之间的长连接，允许双方在连接建立后自由地、实时地交换数据，而无需为每个请求和响应建立新的连接。这一特性使得WebSocket非常适合实时应用，比如在线聊天、协同编辑、游戏、金融交易、实时数据分析等场景。</p><p>WebSocket的主要特点包括：</p><ul><li>持久连接：WebSocket建立的是一个持久的连接，一旦握手成功，连接将保持打开状态，直到客户端或服务器显式关闭。这与HTTP的短连接模式（每个请求-响应后关闭连接）形成对比。</li><li>全双工通信：在WebSocket连接中，数据可以双向自由流动，即服务器和客户端都可以随时主动发送数据，而不像HTTP那样主要是客户端发起请求。</li><li>低延迟：由于省去了HTTP协议的头部信息和减少了网络往返次数，WebSocket能提供更低的延迟通信。</li><li>轻量级：尽管建立在TCP之上，WebSocket协议本身设计得相对简单，减少了不必要的开销。</li><li>兼容性：WebSocket是现代浏览器的标准组成部分，广泛支持于各类浏览器和移动设备上，也易于与各种服务器端技术集成。</li></ul><p>工作流程： 握手：WebSocket连接的建立始于一个HTTP请求，这个请求包含了一些特殊的头部字段，用来指示客户端希望将此连接升级为WebSocket连接。服务器如果同意，会在响应中包含相应的升级信息，随后连接转为WebSocket协议。 数据帧：一旦连接建立，后续的数据传输不再遵循HTTP格式，而是以WebSocket帧的形式进行。这些帧可以携带文本或二进制数据，并且可以被分割或组合以适应不同的数据需求。 心跳与控制帧：为了维持连接的活跃状态，WebSocket协议支持心跳机制，通过发送特殊控制帧来检测连接是否仍然有效。此外，还有用于关闭连接的控制帧。 断开与重连：WebSocket连接可能会因为网络问题、服务器关闭等原因中断，应用层需要处理这些情况，比如实现自动重连机制。</p><h2 id="二-websocket技术及协议" tabindex="-1"><a class="header-anchor" href="#二-websocket技术及协议"><span>二 WebSocket技术及协议</span></a></h2><p>WebSocket技术的优点有：1）通过第一次HTTP Request建立了连接之后，后续的数据交换都不用再重新发送HTTP Request，节省了带宽资源； 2) WebSocket的连接是双向通信的连接，在同一个TCP连接上，既可以发送，也可以接收; 3)具有多路复用的功能(multiplexing)，也即几个不同的URI可以复用同一个WebSocket连接。这些特点非常类似TCP连接，但是因为它借用了HTTP协议的一些概念，所以被称为了WebSocket。</p><h3 id="websocket-api" tabindex="-1"><a class="header-anchor" href="#websocket-api"><span>WebSocket API</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>enum BinaryType { &quot;blob&quot;, &quot;arraybuffer&quot; };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[Exposed=(Window,Worker)]</span></span>
<span class="line"><span>interface WebSocket : EventTarget {</span></span>
<span class="line"><span>  constructor(USVString url, optional (DOMString or sequence&lt;DOMString&gt;) protocols = []);</span></span>
<span class="line"><span>  readonly attribute USVString url;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // ready state</span></span>
<span class="line"><span>  const unsigned short CONNECTING = 0;</span></span>
<span class="line"><span>  const unsigned short OPEN = 1;</span></span>
<span class="line"><span>  const unsigned short CLOSING = 2;</span></span>
<span class="line"><span>  const unsigned short CLOSED = 3;</span></span>
<span class="line"><span>  readonly attribute unsigned short readyState;</span></span>
<span class="line"><span>  readonly attribute unsigned long long bufferedAmount;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // networking</span></span>
<span class="line"><span>  attribute EventHandler onopen;</span></span>
<span class="line"><span>  attribute EventHandler onerror;</span></span>
<span class="line"><span>  attribute EventHandler onclose;</span></span>
<span class="line"><span>  readonly attribute DOMString extensions;</span></span>
<span class="line"><span>  readonly attribute DOMString protocol;</span></span>
<span class="line"><span>  undefined close(optional [Clamp] unsigned short code, optional USVString reason);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // messaging</span></span>
<span class="line"><span>  attribute EventHandler onmessage;</span></span>
<span class="line"><span>  attribute BinaryType binaryType;</span></span>
<span class="line"><span>  undefined send((BufferSource or Blob or USVString) data);</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口的内容可以分为三类：<strong>状态变量、网络功能和消息处理等</strong>。</p><ol><li>构造函数WebSocket(url, protocols)：构造WebSocket对象，以及建立和服务器连接; protocols可选字段，代表选择的子协议</li><li>状态变量readyState: 代表当前连接的状态，短整型数据，取值为CONNECTING(值为0)， OPEN(值为1), CLOSING(值为2), CLOSED(值为3)</li><li>方法变量close(code, reason)： 关闭此WebSocket连接。</li><li>状态变量bufferedAmount: send函数调用后，被缓存并且未发送到网络上的数据长度</li><li>方法变量send(data): 将数据data通过此WebSocket发送到对端</li><li>回调函数onopen/onmessage/onerror/onclose: 当相应的事件发生时会触发此回调函数</li></ol><h2 id="三-websocket与http的关系" tabindex="-1"><a class="header-anchor" href="#三-websocket与http的关系"><span>三 websocket与http的关系</span></a></h2><p>与传统HTTP轮询和长轮询的比较：</p><ul><li>轮询：客户端定时向服务器发送请求，查询是否有新数据，这种方法效率低下，对服务器压力大。</li><li>长轮询：客户端发起请求后，服务器不立即响应，直到有新数据才返回响应，之后客户端再次发起请求。这种方式减小了无意义的请求，但依然存在延迟且资源占用较多。</li><li>WebSocket：一旦连接建立，数据可以即时推送，无需客户端不断询问，大大提高了效率和实时性。</li></ul><p>总结：WebSocket的引入，标志着Web应用从传统的请求-响应模式迈入了实时双向通信的新时代。</p><h2 id="四-websocket解决的问题" tabindex="-1"><a class="header-anchor" href="#四-websocket解决的问题"><span>四 websocket解决的问题</span></a></h2><p>1.http存在的问题</p><p>2.long poll(长轮询)</p><p>3.Ajax轮询</p><p>4.websocket的改进</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p>部分文章内容参考:<a href="http://t.csdnimg.cn/eZB8m" target="_blank" rel="noopener noreferrer">websockt原理</a></p><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2>`,31)]))}const c=n(o,[["render",l],["__file","关于WebStocket.html.vue"]]),d=JSON.parse('{"path":"/7.%E4%B8%AD%E9%97%B4%E4%BB%B6-%E6%A1%86%E6%9E%B6/WebStock/%E5%85%B3%E4%BA%8EWebStocket.html","title":"WebStocket学习","lang":"zh-CN","frontmatter":{"post":true,"title":"WebStocket学习","date":"2024-06-28T00:00:00.000Z","categories":["中间件、框架"],"tags":["SpringBoot"],"cover":"https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202407181612651.png","description":"Websocket是一个持久化的协议","head":[["meta",{"property":"og:url","content":"https://www.zibbo.xyz/7.%E4%B8%AD%E9%97%B4%E4%BB%B6-%E6%A1%86%E6%9E%B6/WebStock/%E5%85%B3%E4%BA%8EWebStocket.html"}],["meta",{"property":"og:site_name","content":"程序员飞鱼"}],["meta",{"property":"og:title","content":"WebStocket学习"}],["meta",{"property":"og:description","content":"Websocket是一个持久化的协议"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202407181612651.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-30T05:46:47.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202407181612651.png"}],["meta",{"name":"twitter:image:alt","content":"WebStocket学习"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:published_time","content":"2024-06-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-30T05:46:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebStocket学习\\",\\"image\\":[\\"https://zibbo-blog.oss-cn-beijing.aliyuncs.com/blog/202407181612651.png\\"],\\"datePublished\\":\\"2024-06-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-30T05:46:47.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":6.83,"words":2048},"git":{"updatedTime":1735537607000,"contributors":[{"name":"jinguoguang","username":"jinguoguang","email":"1264651321@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/7919acd278b3b51446815c1d3fdc82c39b58b863964693935e4f898f57ff5139?d=retro"}]},"filePathRelative":"7.中间件-框架/WebStock/关于WebStocket.md","categoryList":[{"id":"e978e9","sort":7,"name":"中间件-框架"},{"id":"603e84","sort":10019,"name":"WebStock"}],"bulletin":false}');export{c as comp,d as data};
